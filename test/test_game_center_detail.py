# coding: utf-8

"""
    App Store Connect API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.game_center_detail import GameCenterDetail

class TestGameCenterDetail(unittest.TestCase):
    """GameCenterDetail unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GameCenterDetail:
        """Test GameCenterDetail
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GameCenterDetail`
        """
        model = GameCenterDetail()
        if include_optional:
            return GameCenterDetail(
                type = 'gameCenterDetails',
                id = '',
                attributes = openapi_client.models.game_center_detail_attributes.GameCenterDetail_attributes(
                    arcade_enabled = True, 
                    challenge_enabled = True, ),
                relationships = openapi_client.models.game_center_detail_relationships.GameCenterDetail_relationships(
                    app = openapi_client.models.alternative_distribution_key_create_request_data_relationships_app.AlternativeDistributionKeyCreateRequest_data_relationships_app(
                        data = openapi_client.models.accessibility_declaration_create_request_data_relationships_app_data.AccessibilityDeclarationCreateRequest_data_relationships_app_data(
                            type = 'apps', 
                            id = '', ), ), 
                    game_center_app_versions = openapi_client.models.game_center_app_version_relationships_compatibility_versions.GameCenterAppVersion_relationships_compatibilityVersions(
                        links = openapi_client.models.relationship_links.RelationshipLinks(
                            self = '', 
                            related = '', ), 
                        meta = openapi_client.models.paging_information.PagingInformation(
                            paging = openapi_client.models.paging_information_paging.PagingInformation_paging(
                                total = 56, 
                                limit = 56, 
                                next_cursor = '', ), ), ), 
                    game_center_group = openapi_client.models.game_center_detail_relationships_game_center_group.GameCenterDetail_relationships_gameCenterGroup(), 
                    game_center_leaderboards = openapi_client.models.game_center_activity_relationships_leaderboards.GameCenterActivity_relationships_leaderboards(), 
                    game_center_leaderboard_sets = openapi_client.models.game_center_detail_relationships_game_center_leaderboard_sets.GameCenterDetail_relationships_gameCenterLeaderboardSets(), 
                    game_center_achievements = openapi_client.models.game_center_activity_relationships_achievements.GameCenterActivity_relationships_achievements(), 
                    game_center_activities = openapi_client.models.game_center_detail_relationships_game_center_activities.GameCenterDetail_relationships_gameCenterActivities(), 
                    game_center_challenges = openapi_client.models.game_center_detail_relationships_game_center_challenges.GameCenterDetail_relationships_gameCenterChallenges(), 
                    default_leaderboard = openapi_client.models.game_center_challenge_create_request_data_relationships_leaderboard.GameCenterChallengeCreateRequest_data_relationships_leaderboard(), 
                    default_group_leaderboard = openapi_client.models.game_center_challenge_create_request_data_relationships_leaderboard.GameCenterChallengeCreateRequest_data_relationships_leaderboard(), 
                    achievement_releases = openapi_client.models.game_center_achievement_relationships_releases.GameCenterAchievement_relationships_releases(), 
                    activity_releases = openapi_client.models.game_center_detail_relationships_activity_releases.GameCenterDetail_relationships_activityReleases(), 
                    challenge_releases = openapi_client.models.game_center_detail_relationships_challenge_releases.GameCenterDetail_relationships_challengeReleases(), 
                    leaderboard_releases = openapi_client.models.game_center_detail_relationships_leaderboard_releases.GameCenterDetail_relationships_leaderboardReleases(), 
                    leaderboard_set_releases = openapi_client.models.game_center_detail_relationships_leaderboard_set_releases.GameCenterDetail_relationships_leaderboardSetReleases(), 
                    challenges_minimum_platform_versions = openapi_client.models.app_relationships_app_store_versions.App_relationships_appStoreVersions(), ),
                links = openapi_client.models.resource_links.ResourceLinks(
                    self = '', )
            )
        else:
            return GameCenterDetail(
                type = 'gameCenterDetails',
                id = '',
        )
        """

    def testGameCenterDetail(self):
        """Test GameCenterDetail"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
