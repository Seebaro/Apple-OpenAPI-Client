# coding: utf-8

"""
    App Store Connect API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.diagnostic_logs_product_data_inner_diagnostic_logs_inner import DiagnosticLogsProductDataInnerDiagnosticLogsInner

class TestDiagnosticLogsProductDataInnerDiagnosticLogsInner(unittest.TestCase):
    """DiagnosticLogsProductDataInnerDiagnosticLogsInner unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DiagnosticLogsProductDataInnerDiagnosticLogsInner:
        """Test DiagnosticLogsProductDataInnerDiagnosticLogsInner
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DiagnosticLogsProductDataInnerDiagnosticLogsInner`
        """
        model = DiagnosticLogsProductDataInnerDiagnosticLogsInner()
        if include_optional:
            return DiagnosticLogsProductDataInnerDiagnosticLogsInner(
                call_stack_tree = [
                    openapi_client.models.diagnostic_logs_product_data_inner_diagnostic_logs_inner_call_stack_tree_inner.diagnosticLogs_productData_inner_diagnosticLogs_inner_callStackTree_inner(
                        call_stack_per_thread = True, 
                        call_stacks = [
                            openapi_client.models.diagnostic_logs_product_data_inner_diagnostic_logs_inner_call_stack_tree_inner_call_stacks_inner.diagnosticLogs_productData_inner_diagnosticLogs_inner_callStackTree_inner_callStacks_inner(
                                call_stack_root_frames = [
                                    openapi_client.models.diagnostic_log_call_stack_node.DiagnosticLogCallStackNode(
                                        sample_count = 56, 
                                        is_blame_frame = True, 
                                        symbol_name = '', 
                                        insights_category = '', 
                                        offset_into_symbol = '', 
                                        binary_name = '', 
                                        file_name = '', 
                                        binary_uuid = '', 
                                        line_number = '', 
                                        address = '', 
                                        offset_into_binary_text_segment = '', 
                                        raw_frame = '', 
                                        sub_frames = [
                                            openapi_client.models.diagnostic_log_call_stack_node.DiagnosticLogCallStackNode(
                                                sample_count = 56, 
                                                is_blame_frame = True, 
                                                symbol_name = '', 
                                                insights_category = '', 
                                                offset_into_symbol = '', 
                                                binary_name = '', 
                                                file_name = '', 
                                                binary_uuid = '', 
                                                line_number = '', 
                                                address = '', 
                                                offset_into_binary_text_segment = '', 
                                                raw_frame = '', )
                                            ], )
                                    ], )
                            ], )
                    ],
                diagnostic_meta_data = openapi_client.models.diagnostic_logs_product_data_inner_diagnostic_logs_inner_diagnostic_meta_data.diagnosticLogs_productData_inner_diagnosticLogs_inner_diagnosticMetaData(
                    bundle_id = '', 
                    event = '', 
                    os_version = '', 
                    app_version = '', 
                    writes_caused = '', 
                    device_type = '', 
                    platform_architecture = '', 
                    event_detail = '', 
                    build_version = '', )
            )
        else:
            return DiagnosticLogsProductDataInnerDiagnosticLogsInner(
        )
        """

    def testDiagnosticLogsProductDataInnerDiagnosticLogsInner(self):
        """Test DiagnosticLogsProductDataInnerDiagnosticLogsInner"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
