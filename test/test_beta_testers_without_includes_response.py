# coding: utf-8

"""
    App Store Connect API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.beta_testers_without_includes_response import BetaTestersWithoutIncludesResponse

class TestBetaTestersWithoutIncludesResponse(unittest.TestCase):
    """BetaTestersWithoutIncludesResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> BetaTestersWithoutIncludesResponse:
        """Test BetaTestersWithoutIncludesResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `BetaTestersWithoutIncludesResponse`
        """
        model = BetaTestersWithoutIncludesResponse()
        if include_optional:
            return BetaTestersWithoutIncludesResponse(
                data = [
                    openapi_client.models.beta_tester.BetaTester(
                        type = 'betaTesters', 
                        id = '', 
                        attributes = openapi_client.models.beta_tester_attributes.BetaTester_attributes(
                            first_name = '', 
                            last_name = '', 
                            email = '', 
                            invite_type = 'EMAIL', 
                            state = 'NOT_INVITED', ), 
                        relationships = openapi_client.models.beta_tester_relationships.BetaTester_relationships(
                            apps = openapi_client.models.beta_tester_relationships_apps.BetaTester_relationships_apps(
                                links = openapi_client.models.relationship_links.RelationshipLinks(
                                    self = '', 
                                    related = '', ), 
                                meta = openapi_client.models.paging_information.PagingInformation(
                                    paging = openapi_client.models.paging_information_paging.PagingInformation_paging(
                                        total = 56, 
                                        limit = 56, 
                                        next_cursor = '', ), ), 
                                data = [
                                    openapi_client.models.accessibility_declaration_create_request_data_relationships_app_data.AccessibilityDeclarationCreateRequest_data_relationships_app_data(
                                        type = 'apps', 
                                        id = '', )
                                    ], ), 
                            beta_groups = openapi_client.models.app_relationships_beta_groups.App_relationships_betaGroups(), 
                            builds = openapi_client.models.app_relationships_builds.App_relationships_builds(), ), 
                        links = openapi_client.models.resource_links.ResourceLinks(
                            self = '', ), )
                    ],
                links = openapi_client.models.paged_document_links.PagedDocumentLinks(
                    self = '', 
                    first = '', 
                    next = '', ),
                meta = openapi_client.models.paging_information.PagingInformation(
                    paging = openapi_client.models.paging_information_paging.PagingInformation_paging(
                        total = 56, 
                        limit = 56, 
                        next_cursor = '', ), )
            )
        else:
            return BetaTestersWithoutIncludesResponse(
                data = [
                    openapi_client.models.beta_tester.BetaTester(
                        type = 'betaTesters', 
                        id = '', 
                        attributes = openapi_client.models.beta_tester_attributes.BetaTester_attributes(
                            first_name = '', 
                            last_name = '', 
                            email = '', 
                            invite_type = 'EMAIL', 
                            state = 'NOT_INVITED', ), 
                        relationships = openapi_client.models.beta_tester_relationships.BetaTester_relationships(
                            apps = openapi_client.models.beta_tester_relationships_apps.BetaTester_relationships_apps(
                                links = openapi_client.models.relationship_links.RelationshipLinks(
                                    self = '', 
                                    related = '', ), 
                                meta = openapi_client.models.paging_information.PagingInformation(
                                    paging = openapi_client.models.paging_information_paging.PagingInformation_paging(
                                        total = 56, 
                                        limit = 56, 
                                        next_cursor = '', ), ), 
                                data = [
                                    openapi_client.models.accessibility_declaration_create_request_data_relationships_app_data.AccessibilityDeclarationCreateRequest_data_relationships_app_data(
                                        type = 'apps', 
                                        id = '', )
                                    ], ), 
                            beta_groups = openapi_client.models.app_relationships_beta_groups.App_relationships_betaGroups(), 
                            builds = openapi_client.models.app_relationships_builds.App_relationships_builds(), ), 
                        links = openapi_client.models.resource_links.ResourceLinks(
                            self = '', ), )
                    ],
                links = openapi_client.models.paged_document_links.PagedDocumentLinks(
                    self = '', 
                    first = '', 
                    next = '', ),
        )
        """

    def testBetaTestersWithoutIncludesResponse(self):
        """Test BetaTestersWithoutIncludesResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
