# coding: utf-8

"""
    App Store Connect API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.app_event_screenshot_response import AppEventScreenshotResponse

class TestAppEventScreenshotResponse(unittest.TestCase):
    """AppEventScreenshotResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AppEventScreenshotResponse:
        """Test AppEventScreenshotResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AppEventScreenshotResponse`
        """
        model = AppEventScreenshotResponse()
        if include_optional:
            return AppEventScreenshotResponse(
                data = openapi_client.models.app_event_screenshot.AppEventScreenshot(
                    type = 'appEventScreenshots', 
                    id = '', 
                    attributes = openapi_client.models.app_event_screenshot_attributes.AppEventScreenshot_attributes(
                        file_size = 56, 
                        file_name = '', 
                        image_asset = openapi_client.models.image_asset.ImageAsset(
                            template_url = '', 
                            width = 56, 
                            height = 56, ), 
                        asset_token = '', 
                        upload_operations = [
                            openapi_client.models.upload_operation.UploadOperation(
                                method = '', 
                                url = '', 
                                length = 56, 
                                offset = 56, 
                                request_headers = [
                                    openapi_client.models.http_header.HttpHeader(
                                        name = '', 
                                        value = '', )
                                    ], )
                            ], 
                        asset_delivery_state = openapi_client.models.app_media_asset_state.AppMediaAssetState(
                            errors = [
                                openapi_client.models.app_media_state_error.AppMediaStateError(
                                    code = '', 
                                    description = '', )
                                ], 
                            warnings = [
                                openapi_client.models.app_media_state_error.AppMediaStateError(
                                    code = '', 
                                    description = '', )
                                ], 
                            state = 'AWAITING_UPLOAD', ), 
                        app_event_asset_type = 'EVENT_CARD', ), 
                    relationships = openapi_client.models.app_event_screenshot_relationships.AppEventScreenshot_relationships(
                        app_event_localization = openapi_client.models.app_event_screenshot_relationships_app_event_localization.AppEventScreenshot_relationships_appEventLocalization(
                            data = openapi_client.models.app_event_screenshot_relationships_app_event_localization_data.AppEventScreenshot_relationships_appEventLocalization_data(
                                type = 'appEventLocalizations', 
                                id = '', ), ), ), 
                    links = openapi_client.models.resource_links.ResourceLinks(
                        self = '', ), ),
                included = [
                    openapi_client.models.app_event_localization.AppEventLocalization(
                        type = 'appEventLocalizations', 
                        id = '', 
                        attributes = openapi_client.models.app_event_localization_attributes.AppEventLocalization_attributes(
                            locale = '', 
                            name = '', 
                            short_description = '', 
                            long_description = '', ), 
                        relationships = openapi_client.models.app_event_localization_relationships.AppEventLocalization_relationships(
                            app_event = openapi_client.models.app_event_localization_relationships_app_event.AppEventLocalization_relationships_appEvent(
                                data = openapi_client.models.app_event_localization_relationships_app_event_data.AppEventLocalization_relationships_appEvent_data(
                                    type = 'appEvents', 
                                    id = '', ), ), 
                            app_event_screenshots = openapi_client.models.app_event_localization_relationships_app_event_screenshots.AppEventLocalization_relationships_appEventScreenshots(
                                links = openapi_client.models.relationship_links.RelationshipLinks(
                                    self = '', 
                                    related = '', ), 
                                meta = openapi_client.models.paging_information.PagingInformation(
                                    paging = openapi_client.models.paging_information_paging.PagingInformation_paging(
                                        total = 56, 
                                        limit = 56, 
                                        next_cursor = '', ), ), ), 
                            app_event_video_clips = openapi_client.models.app_event_localization_relationships_app_event_video_clips.AppEventLocalization_relationships_appEventVideoClips(), ), 
                        links = openapi_client.models.resource_links.ResourceLinks(
                            self = '', ), )
                    ],
                links = openapi_client.models.document_links.DocumentLinks(
                    self = '', )
            )
        else:
            return AppEventScreenshotResponse(
                data = openapi_client.models.app_event_screenshot.AppEventScreenshot(
                    type = 'appEventScreenshots', 
                    id = '', 
                    attributes = openapi_client.models.app_event_screenshot_attributes.AppEventScreenshot_attributes(
                        file_size = 56, 
                        file_name = '', 
                        image_asset = openapi_client.models.image_asset.ImageAsset(
                            template_url = '', 
                            width = 56, 
                            height = 56, ), 
                        asset_token = '', 
                        upload_operations = [
                            openapi_client.models.upload_operation.UploadOperation(
                                method = '', 
                                url = '', 
                                length = 56, 
                                offset = 56, 
                                request_headers = [
                                    openapi_client.models.http_header.HttpHeader(
                                        name = '', 
                                        value = '', )
                                    ], )
                            ], 
                        asset_delivery_state = openapi_client.models.app_media_asset_state.AppMediaAssetState(
                            errors = [
                                openapi_client.models.app_media_state_error.AppMediaStateError(
                                    code = '', 
                                    description = '', )
                                ], 
                            warnings = [
                                openapi_client.models.app_media_state_error.AppMediaStateError(
                                    code = '', 
                                    description = '', )
                                ], 
                            state = 'AWAITING_UPLOAD', ), 
                        app_event_asset_type = 'EVENT_CARD', ), 
                    relationships = openapi_client.models.app_event_screenshot_relationships.AppEventScreenshot_relationships(
                        app_event_localization = openapi_client.models.app_event_screenshot_relationships_app_event_localization.AppEventScreenshot_relationships_appEventLocalization(
                            data = openapi_client.models.app_event_screenshot_relationships_app_event_localization_data.AppEventScreenshot_relationships_appEventLocalization_data(
                                type = 'appEventLocalizations', 
                                id = '', ), ), ), 
                    links = openapi_client.models.resource_links.ResourceLinks(
                        self = '', ), ),
                links = openapi_client.models.document_links.DocumentLinks(
                    self = '', ),
        )
        """

    def testAppEventScreenshotResponse(self):
        """Test AppEventScreenshotResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
