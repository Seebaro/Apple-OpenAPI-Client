# coding: utf-8

"""
    App Store Connect API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.scm_git_reference_response import ScmGitReferenceResponse

class TestScmGitReferenceResponse(unittest.TestCase):
    """ScmGitReferenceResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ScmGitReferenceResponse:
        """Test ScmGitReferenceResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ScmGitReferenceResponse`
        """
        model = ScmGitReferenceResponse()
        if include_optional:
            return ScmGitReferenceResponse(
                data = openapi_client.models.scm_git_reference.ScmGitReference(
                    type = 'scmGitReferences', 
                    id = '', 
                    attributes = openapi_client.models.scm_git_reference_attributes.ScmGitReference_attributes(
                        name = '', 
                        canonical_name = '', 
                        is_deleted = True, 
                        kind = 'BRANCH', ), 
                    relationships = openapi_client.models.scm_git_reference_relationships.ScmGitReference_relationships(
                        repository = openapi_client.models.scm_git_reference_relationships_repository.ScmGitReference_relationships_repository(
                            data = openapi_client.models.ci_product_relationships_primary_repositories_data_inner.CiProduct_relationships_primaryRepositories_data_inner(
                                type = 'scmRepositories', 
                                id = '', ), ), ), 
                    links = openapi_client.models.resource_links.ResourceLinks(
                        self = '', ), ),
                included = [
                    openapi_client.models.scm_repository.ScmRepository(
                        type = 'scmRepositories', 
                        id = '', 
                        attributes = openapi_client.models.scm_repository_attributes.ScmRepository_attributes(
                            last_accessed_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            http_clone_url = '', 
                            ssh_clone_url = '', 
                            owner_name = '', 
                            repository_name = '', ), 
                        relationships = openapi_client.models.scm_repository_relationships.ScmRepository_relationships(
                            scm_provider = openapi_client.models.scm_repository_relationships_scm_provider.ScmRepository_relationships_scmProvider(
                                data = openapi_client.models.scm_repository_relationships_scm_provider_data.ScmRepository_relationships_scmProvider_data(
                                    type = 'scmProviders', 
                                    id = '', ), ), 
                            default_branch = openapi_client.models.ci_build_run_relationships_source_branch_or_tag.CiBuildRun_relationships_sourceBranchOrTag(), 
                            git_references = openapi_client.models.analytics_report_instance_relationships_segments.AnalyticsReportInstance_relationships_segments(
                                links = openapi_client.models.relationship_links.RelationshipLinks(
                                    self = '', 
                                    related = '', ), ), 
                            pull_requests = openapi_client.models.analytics_report_instance_relationships_segments.AnalyticsReportInstance_relationships_segments(), ), 
                        links = openapi_client.models.resource_links.ResourceLinks(
                            self = '', ), )
                    ],
                links = openapi_client.models.document_links.DocumentLinks(
                    self = '', )
            )
        else:
            return ScmGitReferenceResponse(
                data = openapi_client.models.scm_git_reference.ScmGitReference(
                    type = 'scmGitReferences', 
                    id = '', 
                    attributes = openapi_client.models.scm_git_reference_attributes.ScmGitReference_attributes(
                        name = '', 
                        canonical_name = '', 
                        is_deleted = True, 
                        kind = 'BRANCH', ), 
                    relationships = openapi_client.models.scm_git_reference_relationships.ScmGitReference_relationships(
                        repository = openapi_client.models.scm_git_reference_relationships_repository.ScmGitReference_relationships_repository(
                            data = openapi_client.models.ci_product_relationships_primary_repositories_data_inner.CiProduct_relationships_primaryRepositories_data_inner(
                                type = 'scmRepositories', 
                                id = '', ), ), ), 
                    links = openapi_client.models.resource_links.ResourceLinks(
                        self = '', ), ),
                links = openapi_client.models.document_links.DocumentLinks(
                    self = '', ),
        )
        """

    def testScmGitReferenceResponse(self):
        """Test ScmGitReferenceResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
