# coding: utf-8

"""
    App Store Connect API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.app_encryption_declarations_response_included_inner import AppEncryptionDeclarationsResponseIncludedInner

class TestAppEncryptionDeclarationsResponseIncludedInner(unittest.TestCase):
    """AppEncryptionDeclarationsResponseIncludedInner unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AppEncryptionDeclarationsResponseIncludedInner:
        """Test AppEncryptionDeclarationsResponseIncludedInner
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AppEncryptionDeclarationsResponseIncludedInner`
        """
        model = AppEncryptionDeclarationsResponseIncludedInner()
        if include_optional:
            return AppEncryptionDeclarationsResponseIncludedInner(
                type = 'apps',
                id = '',
                attributes = openapi_client.models.app_encryption_declaration_document_attributes.AppEncryptionDeclarationDocument_attributes(
                    file_size = 56, 
                    file_name = '', 
                    asset_token = '', 
                    download_url = '', 
                    source_file_checksum = '', 
                    upload_operations = [
                        openapi_client.models.upload_operation.UploadOperation(
                            method = '', 
                            url = '', 
                            length = 56, 
                            offset = 56, 
                            request_headers = [
                                openapi_client.models.http_header.HttpHeader(
                                    name = '', 
                                    value = '', )
                                ], )
                        ], 
                    asset_delivery_state = openapi_client.models.app_media_asset_state.AppMediaAssetState(
                        errors = [
                            openapi_client.models.app_media_state_error.AppMediaStateError(
                                code = '', 
                                description = '', )
                            ], 
                        warnings = [
                            openapi_client.models.app_media_state_error.AppMediaStateError(
                                code = '', 
                                description = '', )
                            ], 
                        state = 'AWAITING_UPLOAD', ), ),
                relationships = openapi_client.models.build_relationships.Build_relationships(
                    pre_release_version = openapi_client.models.build_relationships_pre_release_version.Build_relationships_preReleaseVersion(
                        links = openapi_client.models.relationship_links.RelationshipLinks(
                            self = '', 
                            related = '', ), 
                        data = openapi_client.models.app_relationships_pre_release_versions_data_inner.App_relationships_preReleaseVersions_data_inner(
                            type = 'preReleaseVersions', 
                            id = '', ), ), 
                    individual_testers = openapi_client.models.beta_group_relationships_beta_testers.BetaGroup_relationships_betaTesters(
                        meta = openapi_client.models.paging_information.PagingInformation(
                            paging = openapi_client.models.paging_information_paging.PagingInformation_paging(
                                total = 56, 
                                limit = 56, 
                                next_cursor = '', ), ), ), 
                    beta_groups = openapi_client.models.app_relationships_beta_groups.App_relationships_betaGroups(), 
                    beta_build_localizations = openapi_client.models.build_relationships_beta_build_localizations.Build_relationships_betaBuildLocalizations(), 
                    app_encryption_declaration = openapi_client.models.build_relationships_app_encryption_declaration.Build_relationships_appEncryptionDeclaration(), 
                    beta_app_review_submission = openapi_client.models.build_relationships_beta_app_review_submission.Build_relationships_betaAppReviewSubmission(), 
                    app = openapi_client.models.beta_app_localization_relationships_app.BetaAppLocalization_relationships_app(), 
                    build_beta_detail = openapi_client.models.build_relationships_build_beta_detail.Build_relationships_buildBetaDetail(), 
                    app_store_version = openapi_client.models.app_clip_default_experience_relationships_release_with_app_store_version.AppClipDefaultExperience_relationships_releaseWithAppStoreVersion(), 
                    icons = openapi_client.models.build_relationships_icons.Build_relationships_icons(), 
                    build_bundles = openapi_client.models.build_relationships_build_bundles.Build_relationships_buildBundles(), 
                    perf_power_metrics = openapi_client.models.analytics_report_instance_relationships_segments.AnalyticsReportInstance_relationships_segments(), 
                    diagnostic_signatures = openapi_client.models.analytics_report_instance_relationships_segments.AnalyticsReportInstance_relationships_segments(), ),
                links = openapi_client.models.resource_links.ResourceLinks(
                    self = '', )
            )
        else:
            return AppEncryptionDeclarationsResponseIncludedInner(
                type = 'apps',
                id = '',
        )
        """

    def testAppEncryptionDeclarationsResponseIncludedInner(self):
        """Test AppEncryptionDeclarationsResponseIncludedInner"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
