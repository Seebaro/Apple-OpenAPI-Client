# coding: utf-8

"""
    App Store Connect API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.analytics_report_requests_response import AnalyticsReportRequestsResponse

class TestAnalyticsReportRequestsResponse(unittest.TestCase):
    """AnalyticsReportRequestsResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AnalyticsReportRequestsResponse:
        """Test AnalyticsReportRequestsResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AnalyticsReportRequestsResponse`
        """
        model = AnalyticsReportRequestsResponse()
        if include_optional:
            return AnalyticsReportRequestsResponse(
                data = [
                    openapi_client.models.analytics_report_request.AnalyticsReportRequest(
                        type = 'analyticsReportRequests', 
                        id = '', 
                        attributes = openapi_client.models.analytics_report_request_attributes.AnalyticsReportRequest_attributes(
                            access_type = 'ONE_TIME_SNAPSHOT', 
                            stopped_due_to_inactivity = True, ), 
                        relationships = openapi_client.models.analytics_report_request_relationships.AnalyticsReportRequest_relationships(
                            reports = openapi_client.models.analytics_report_request_relationships_reports.AnalyticsReportRequest_relationships_reports(
                                links = openapi_client.models.relationship_links.RelationshipLinks(
                                    self = '', 
                                    related = '', ), 
                                meta = openapi_client.models.paging_information.PagingInformation(
                                    paging = openapi_client.models.paging_information_paging.PagingInformation_paging(
                                        total = 56, 
                                        limit = 56, 
                                        next_cursor = '', ), ), 
                                data = [
                                    openapi_client.models.analytics_report_request_relationships_reports_data_inner.AnalyticsReportRequest_relationships_reports_data_inner(
                                        type = 'analyticsReports', 
                                        id = '', )
                                    ], ), ), 
                        links = openapi_client.models.resource_links.ResourceLinks(
                            self = '', ), )
                    ],
                included = [
                    openapi_client.models.analytics_report.AnalyticsReport(
                        type = 'analyticsReports', 
                        id = '', 
                        attributes = openapi_client.models.analytics_report_attributes.AnalyticsReport_attributes(
                            name = '', 
                            category = 'APP_USAGE', ), 
                        relationships = openapi_client.models.analytics_report_relationships.AnalyticsReport_relationships(
                            instances = openapi_client.models.analytics_report_instance_relationships_segments.AnalyticsReportInstance_relationships_segments(
                                links = openapi_client.models.relationship_links.RelationshipLinks(
                                    self = '', 
                                    related = '', ), ), ), 
                        links = openapi_client.models.resource_links.ResourceLinks(
                            self = '', ), )
                    ],
                links = openapi_client.models.paged_document_links.PagedDocumentLinks(
                    self = '', 
                    first = '', 
                    next = '', ),
                meta = openapi_client.models.paging_information.PagingInformation(
                    paging = openapi_client.models.paging_information_paging.PagingInformation_paging(
                        total = 56, 
                        limit = 56, 
                        next_cursor = '', ), )
            )
        else:
            return AnalyticsReportRequestsResponse(
                data = [
                    openapi_client.models.analytics_report_request.AnalyticsReportRequest(
                        type = 'analyticsReportRequests', 
                        id = '', 
                        attributes = openapi_client.models.analytics_report_request_attributes.AnalyticsReportRequest_attributes(
                            access_type = 'ONE_TIME_SNAPSHOT', 
                            stopped_due_to_inactivity = True, ), 
                        relationships = openapi_client.models.analytics_report_request_relationships.AnalyticsReportRequest_relationships(
                            reports = openapi_client.models.analytics_report_request_relationships_reports.AnalyticsReportRequest_relationships_reports(
                                links = openapi_client.models.relationship_links.RelationshipLinks(
                                    self = '', 
                                    related = '', ), 
                                meta = openapi_client.models.paging_information.PagingInformation(
                                    paging = openapi_client.models.paging_information_paging.PagingInformation_paging(
                                        total = 56, 
                                        limit = 56, 
                                        next_cursor = '', ), ), 
                                data = [
                                    openapi_client.models.analytics_report_request_relationships_reports_data_inner.AnalyticsReportRequest_relationships_reports_data_inner(
                                        type = 'analyticsReports', 
                                        id = '', )
                                    ], ), ), 
                        links = openapi_client.models.resource_links.ResourceLinks(
                            self = '', ), )
                    ],
                links = openapi_client.models.paged_document_links.PagedDocumentLinks(
                    self = '', 
                    first = '', 
                    next = '', ),
        )
        """

    def testAnalyticsReportRequestsResponse(self):
        """Test AnalyticsReportRequestsResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
