# coding: utf-8

"""
    App Store Connect API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.app_encryption_declaration_document_response import AppEncryptionDeclarationDocumentResponse

class TestAppEncryptionDeclarationDocumentResponse(unittest.TestCase):
    """AppEncryptionDeclarationDocumentResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AppEncryptionDeclarationDocumentResponse:
        """Test AppEncryptionDeclarationDocumentResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AppEncryptionDeclarationDocumentResponse`
        """
        model = AppEncryptionDeclarationDocumentResponse()
        if include_optional:
            return AppEncryptionDeclarationDocumentResponse(
                data = openapi_client.models.app_encryption_declaration_document.AppEncryptionDeclarationDocument(
                    type = 'appEncryptionDeclarationDocuments', 
                    id = '', 
                    attributes = openapi_client.models.app_encryption_declaration_document_attributes.AppEncryptionDeclarationDocument_attributes(
                        file_size = 56, 
                        file_name = '', 
                        asset_token = '', 
                        download_url = '', 
                        source_file_checksum = '', 
                        upload_operations = [
                            openapi_client.models.upload_operation.UploadOperation(
                                method = '', 
                                url = '', 
                                length = 56, 
                                offset = 56, 
                                request_headers = [
                                    openapi_client.models.http_header.HttpHeader(
                                        name = '', 
                                        value = '', )
                                    ], )
                            ], 
                        asset_delivery_state = openapi_client.models.app_media_asset_state.AppMediaAssetState(
                            errors = [
                                openapi_client.models.app_media_state_error.AppMediaStateError(
                                    code = '', 
                                    description = '', )
                                ], 
                            warnings = [
                                openapi_client.models.app_media_state_error.AppMediaStateError(
                                    code = '', 
                                    description = '', )
                                ], 
                            state = 'AWAITING_UPLOAD', ), ), 
                    links = openapi_client.models.resource_links.ResourceLinks(
                        self = '', ), ),
                links = openapi_client.models.document_links.DocumentLinks(
                    self = '', )
            )
        else:
            return AppEncryptionDeclarationDocumentResponse(
                data = openapi_client.models.app_encryption_declaration_document.AppEncryptionDeclarationDocument(
                    type = 'appEncryptionDeclarationDocuments', 
                    id = '', 
                    attributes = openapi_client.models.app_encryption_declaration_document_attributes.AppEncryptionDeclarationDocument_attributes(
                        file_size = 56, 
                        file_name = '', 
                        asset_token = '', 
                        download_url = '', 
                        source_file_checksum = '', 
                        upload_operations = [
                            openapi_client.models.upload_operation.UploadOperation(
                                method = '', 
                                url = '', 
                                length = 56, 
                                offset = 56, 
                                request_headers = [
                                    openapi_client.models.http_header.HttpHeader(
                                        name = '', 
                                        value = '', )
                                    ], )
                            ], 
                        asset_delivery_state = openapi_client.models.app_media_asset_state.AppMediaAssetState(
                            errors = [
                                openapi_client.models.app_media_state_error.AppMediaStateError(
                                    code = '', 
                                    description = '', )
                                ], 
                            warnings = [
                                openapi_client.models.app_media_state_error.AppMediaStateError(
                                    code = '', 
                                    description = '', )
                                ], 
                            state = 'AWAITING_UPLOAD', ), ), 
                    links = openapi_client.models.resource_links.ResourceLinks(
                        self = '', ), ),
                links = openapi_client.models.document_links.DocumentLinks(
                    self = '', ),
        )
        """

    def testAppEncryptionDeclarationDocumentResponse(self):
        """Test AppEncryptionDeclarationDocumentResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
