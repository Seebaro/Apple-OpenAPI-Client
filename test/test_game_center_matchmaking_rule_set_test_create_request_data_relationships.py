# coding: utf-8

"""
    App Store Connect API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.game_center_matchmaking_rule_set_test_create_request_data_relationships import GameCenterMatchmakingRuleSetTestCreateRequestDataRelationships

class TestGameCenterMatchmakingRuleSetTestCreateRequestDataRelationships(unittest.TestCase):
    """GameCenterMatchmakingRuleSetTestCreateRequestDataRelationships unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GameCenterMatchmakingRuleSetTestCreateRequestDataRelationships:
        """Test GameCenterMatchmakingRuleSetTestCreateRequestDataRelationships
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GameCenterMatchmakingRuleSetTestCreateRequestDataRelationships`
        """
        model = GameCenterMatchmakingRuleSetTestCreateRequestDataRelationships()
        if include_optional:
            return GameCenterMatchmakingRuleSetTestCreateRequestDataRelationships(
                matchmaking_rule_set = openapi_client.models.game_center_matchmaking_queue_create_request_data_relationships_rule_set.GameCenterMatchmakingQueueCreateRequest_data_relationships_ruleSet(
                    data = openapi_client.models.game_center_matchmaking_queue_relationships_rule_set_data.GameCenterMatchmakingQueue_relationships_ruleSet_data(
                        type = 'gameCenterMatchmakingRuleSets', 
                        id = '', ), ),
                matchmaking_requests = openapi_client.models.game_center_matchmaking_rule_set_test_create_request_data_relationships_matchmaking_requests.GameCenterMatchmakingRuleSetTestCreateRequest_data_relationships_matchmakingRequests(
                    data = [
                        openapi_client.models.game_center_matchmaking_rule_set_test_create_request_data_relationships_matchmaking_requests_data_inner.GameCenterMatchmakingRuleSetTestCreateRequest_data_relationships_matchmakingRequests_data_inner(
                            type = 'gameCenterMatchmakingTestRequests', 
                            id = '', )
                        ], )
            )
        else:
            return GameCenterMatchmakingRuleSetTestCreateRequestDataRelationships(
                matchmaking_rule_set = openapi_client.models.game_center_matchmaking_queue_create_request_data_relationships_rule_set.GameCenterMatchmakingQueueCreateRequest_data_relationships_ruleSet(
                    data = openapi_client.models.game_center_matchmaking_queue_relationships_rule_set_data.GameCenterMatchmakingQueue_relationships_ruleSet_data(
                        type = 'gameCenterMatchmakingRuleSets', 
                        id = '', ), ),
                matchmaking_requests = openapi_client.models.game_center_matchmaking_rule_set_test_create_request_data_relationships_matchmaking_requests.GameCenterMatchmakingRuleSetTestCreateRequest_data_relationships_matchmakingRequests(
                    data = [
                        openapi_client.models.game_center_matchmaking_rule_set_test_create_request_data_relationships_matchmaking_requests_data_inner.GameCenterMatchmakingRuleSetTestCreateRequest_data_relationships_matchmakingRequests_data_inner(
                            type = 'gameCenterMatchmakingTestRequests', 
                            id = '', )
                        ], ),
        )
        """

    def testGameCenterMatchmakingRuleSetTestCreateRequestDataRelationships(self):
        """Test GameCenterMatchmakingRuleSetTestCreateRequestDataRelationships"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
