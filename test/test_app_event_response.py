# coding: utf-8

"""
    App Store Connect API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.app_event_response import AppEventResponse

class TestAppEventResponse(unittest.TestCase):
    """AppEventResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AppEventResponse:
        """Test AppEventResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AppEventResponse`
        """
        model = AppEventResponse()
        if include_optional:
            return AppEventResponse(
                data = openapi_client.models.app_event.AppEvent(
                    type = 'appEvents', 
                    id = '', 
                    attributes = openapi_client.models.app_event_attributes.AppEvent_attributes(
                        reference_name = '', 
                        badge = 'LIVE_EVENT', 
                        event_state = 'DRAFT', 
                        deep_link = '', 
                        purchase_requirement = '', 
                        primary_locale = '', 
                        priority = 'HIGH', 
                        purpose = 'APPROPRIATE_FOR_ALL_USERS', 
                        territory_schedules = [
                            openapi_client.models.app_event_attributes_territory_schedules_inner.AppEvent_attributes_territorySchedules_inner(
                                territories = [
                                    ''
                                    ], 
                                publish_start = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                event_start = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                event_end = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                            ], 
                        archived_territory_schedules = [
                            openapi_client.models.app_event_attributes_territory_schedules_inner.AppEvent_attributes_territorySchedules_inner(
                                publish_start = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                event_start = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                event_end = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                            ], ), 
                    relationships = openapi_client.models.app_event_relationships.AppEvent_relationships(
                        localizations = openapi_client.models.app_event_relationships_localizations.AppEvent_relationships_localizations(
                            links = openapi_client.models.relationship_links.RelationshipLinks(
                                self = '', 
                                related = '', ), 
                            meta = openapi_client.models.paging_information.PagingInformation(
                                paging = openapi_client.models.paging_information_paging.PagingInformation_paging(
                                    total = 56, 
                                    limit = 56, 
                                    next_cursor = '', ), ), 
                            data = [
                                openapi_client.models.app_event_screenshot_relationships_app_event_localization_data.AppEventScreenshot_relationships_appEventLocalization_data(
                                    type = 'appEventLocalizations', 
                                    id = '', )
                                ], ), ), 
                    links = openapi_client.models.resource_links.ResourceLinks(
                        self = '', ), ),
                included = [
                    openapi_client.models.app_event_localization.AppEventLocalization(
                        type = 'appEventLocalizations', 
                        id = '', 
                        attributes = openapi_client.models.app_event_localization_attributes.AppEventLocalization_attributes(
                            locale = '', 
                            name = '', 
                            short_description = '', 
                            long_description = '', ), 
                        relationships = openapi_client.models.app_event_localization_relationships.AppEventLocalization_relationships(
                            app_event = openapi_client.models.app_event_localization_relationships_app_event.AppEventLocalization_relationships_appEvent(
                                data = openapi_client.models.app_event_localization_relationships_app_event_data.AppEventLocalization_relationships_appEvent_data(
                                    type = 'appEvents', 
                                    id = '', ), ), 
                            app_event_screenshots = openapi_client.models.app_event_localization_relationships_app_event_screenshots.AppEventLocalization_relationships_appEventScreenshots(
                                links = openapi_client.models.relationship_links.RelationshipLinks(
                                    self = '', 
                                    related = '', ), 
                                meta = openapi_client.models.paging_information.PagingInformation(
                                    paging = openapi_client.models.paging_information_paging.PagingInformation_paging(
                                        total = 56, 
                                        limit = 56, 
                                        next_cursor = '', ), ), ), 
                            app_event_video_clips = openapi_client.models.app_event_localization_relationships_app_event_video_clips.AppEventLocalization_relationships_appEventVideoClips(), ), 
                        links = openapi_client.models.resource_links.ResourceLinks(
                            self = '', ), )
                    ],
                links = openapi_client.models.document_links.DocumentLinks(
                    self = '', )
            )
        else:
            return AppEventResponse(
                data = openapi_client.models.app_event.AppEvent(
                    type = 'appEvents', 
                    id = '', 
                    attributes = openapi_client.models.app_event_attributes.AppEvent_attributes(
                        reference_name = '', 
                        badge = 'LIVE_EVENT', 
                        event_state = 'DRAFT', 
                        deep_link = '', 
                        purchase_requirement = '', 
                        primary_locale = '', 
                        priority = 'HIGH', 
                        purpose = 'APPROPRIATE_FOR_ALL_USERS', 
                        territory_schedules = [
                            openapi_client.models.app_event_attributes_territory_schedules_inner.AppEvent_attributes_territorySchedules_inner(
                                territories = [
                                    ''
                                    ], 
                                publish_start = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                event_start = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                event_end = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                            ], 
                        archived_territory_schedules = [
                            openapi_client.models.app_event_attributes_territory_schedules_inner.AppEvent_attributes_territorySchedules_inner(
                                publish_start = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                event_start = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                event_end = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                            ], ), 
                    relationships = openapi_client.models.app_event_relationships.AppEvent_relationships(
                        localizations = openapi_client.models.app_event_relationships_localizations.AppEvent_relationships_localizations(
                            links = openapi_client.models.relationship_links.RelationshipLinks(
                                self = '', 
                                related = '', ), 
                            meta = openapi_client.models.paging_information.PagingInformation(
                                paging = openapi_client.models.paging_information_paging.PagingInformation_paging(
                                    total = 56, 
                                    limit = 56, 
                                    next_cursor = '', ), ), 
                            data = [
                                openapi_client.models.app_event_screenshot_relationships_app_event_localization_data.AppEventScreenshot_relationships_appEventLocalization_data(
                                    type = 'appEventLocalizations', 
                                    id = '', )
                                ], ), ), 
                    links = openapi_client.models.resource_links.ResourceLinks(
                        self = '', ), ),
                links = openapi_client.models.document_links.DocumentLinks(
                    self = '', ),
        )
        """

    def testAppEventResponse(self):
        """Test AppEventResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
