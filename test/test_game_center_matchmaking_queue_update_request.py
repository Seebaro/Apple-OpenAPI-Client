# coding: utf-8

"""
    App Store Connect API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.game_center_matchmaking_queue_update_request import GameCenterMatchmakingQueueUpdateRequest

class TestGameCenterMatchmakingQueueUpdateRequest(unittest.TestCase):
    """GameCenterMatchmakingQueueUpdateRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GameCenterMatchmakingQueueUpdateRequest:
        """Test GameCenterMatchmakingQueueUpdateRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GameCenterMatchmakingQueueUpdateRequest`
        """
        model = GameCenterMatchmakingQueueUpdateRequest()
        if include_optional:
            return GameCenterMatchmakingQueueUpdateRequest(
                data = openapi_client.models.game_center_matchmaking_queue_update_request_data.GameCenterMatchmakingQueueUpdateRequest_data(
                    type = 'gameCenterMatchmakingQueues', 
                    id = '', 
                    attributes = openapi_client.models.game_center_matchmaking_queue_update_request_data_attributes.GameCenterMatchmakingQueueUpdateRequest_data_attributes(
                        classic_matchmaking_bundle_ids = [
                            ''
                            ], ), 
                    relationships = openapi_client.models.game_center_matchmaking_queue_relationships.GameCenterMatchmakingQueue_relationships(
                        rule_set = openapi_client.models.game_center_matchmaking_queue_relationships_rule_set.GameCenterMatchmakingQueue_relationships_ruleSet(
                            data = openapi_client.models.game_center_matchmaking_queue_relationships_rule_set_data.GameCenterMatchmakingQueue_relationships_ruleSet_data(
                                type = 'gameCenterMatchmakingRuleSets', 
                                id = '', ), ), 
                        experiment_rule_set = openapi_client.models.game_center_matchmaking_queue_relationships_rule_set.GameCenterMatchmakingQueue_relationships_ruleSet(), ), )
            )
        else:
            return GameCenterMatchmakingQueueUpdateRequest(
                data = openapi_client.models.game_center_matchmaking_queue_update_request_data.GameCenterMatchmakingQueueUpdateRequest_data(
                    type = 'gameCenterMatchmakingQueues', 
                    id = '', 
                    attributes = openapi_client.models.game_center_matchmaking_queue_update_request_data_attributes.GameCenterMatchmakingQueueUpdateRequest_data_attributes(
                        classic_matchmaking_bundle_ids = [
                            ''
                            ], ), 
                    relationships = openapi_client.models.game_center_matchmaking_queue_relationships.GameCenterMatchmakingQueue_relationships(
                        rule_set = openapi_client.models.game_center_matchmaking_queue_relationships_rule_set.GameCenterMatchmakingQueue_relationships_ruleSet(
                            data = openapi_client.models.game_center_matchmaking_queue_relationships_rule_set_data.GameCenterMatchmakingQueue_relationships_ruleSet_data(
                                type = 'gameCenterMatchmakingRuleSets', 
                                id = '', ), ), 
                        experiment_rule_set = openapi_client.models.game_center_matchmaking_queue_relationships_rule_set.GameCenterMatchmakingQueue_relationships_ruleSet(), ), ),
        )
        """

    def testGameCenterMatchmakingQueueUpdateRequest(self):
        """Test GameCenterMatchmakingQueueUpdateRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
