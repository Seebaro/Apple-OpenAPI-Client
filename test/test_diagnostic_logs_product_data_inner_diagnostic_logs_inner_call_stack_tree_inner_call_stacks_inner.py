# coding: utf-8

"""
    App Store Connect API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.diagnostic_logs_product_data_inner_diagnostic_logs_inner_call_stack_tree_inner_call_stacks_inner import DiagnosticLogsProductDataInnerDiagnosticLogsInnerCallStackTreeInnerCallStacksInner

class TestDiagnosticLogsProductDataInnerDiagnosticLogsInnerCallStackTreeInnerCallStacksInner(unittest.TestCase):
    """DiagnosticLogsProductDataInnerDiagnosticLogsInnerCallStackTreeInnerCallStacksInner unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DiagnosticLogsProductDataInnerDiagnosticLogsInnerCallStackTreeInnerCallStacksInner:
        """Test DiagnosticLogsProductDataInnerDiagnosticLogsInnerCallStackTreeInnerCallStacksInner
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DiagnosticLogsProductDataInnerDiagnosticLogsInnerCallStackTreeInnerCallStacksInner`
        """
        model = DiagnosticLogsProductDataInnerDiagnosticLogsInnerCallStackTreeInnerCallStacksInner()
        if include_optional:
            return DiagnosticLogsProductDataInnerDiagnosticLogsInnerCallStackTreeInnerCallStacksInner(
                call_stack_root_frames = [
                    openapi_client.models.diagnostic_log_call_stack_node.DiagnosticLogCallStackNode(
                        sample_count = 56, 
                        is_blame_frame = True, 
                        symbol_name = '', 
                        insights_category = '', 
                        offset_into_symbol = '', 
                        binary_name = '', 
                        file_name = '', 
                        binary_uuid = '', 
                        line_number = '', 
                        address = '', 
                        offset_into_binary_text_segment = '', 
                        raw_frame = '', 
                        sub_frames = [
                            openapi_client.models.diagnostic_log_call_stack_node.DiagnosticLogCallStackNode(
                                sample_count = 56, 
                                is_blame_frame = True, 
                                symbol_name = '', 
                                insights_category = '', 
                                offset_into_symbol = '', 
                                binary_name = '', 
                                file_name = '', 
                                binary_uuid = '', 
                                line_number = '', 
                                address = '', 
                                offset_into_binary_text_segment = '', 
                                raw_frame = '', )
                            ], )
                    ]
            )
        else:
            return DiagnosticLogsProductDataInnerDiagnosticLogsInnerCallStackTreeInnerCallStacksInner(
        )
        """

    def testDiagnosticLogsProductDataInnerDiagnosticLogsInnerCallStackTreeInnerCallStacksInner(self):
        """Test DiagnosticLogsProductDataInnerDiagnosticLogsInnerCallStackTreeInnerCallStacksInner"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
