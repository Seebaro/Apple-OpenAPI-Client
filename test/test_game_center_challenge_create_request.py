# coding: utf-8

"""
    App Store Connect API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.game_center_challenge_create_request import GameCenterChallengeCreateRequest

class TestGameCenterChallengeCreateRequest(unittest.TestCase):
    """GameCenterChallengeCreateRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GameCenterChallengeCreateRequest:
        """Test GameCenterChallengeCreateRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GameCenterChallengeCreateRequest`
        """
        model = GameCenterChallengeCreateRequest()
        if include_optional:
            return GameCenterChallengeCreateRequest(
                data = openapi_client.models.game_center_challenge_create_request_data.GameCenterChallengeCreateRequest_data(
                    type = 'gameCenterChallenges', 
                    attributes = openapi_client.models.game_center_challenge_create_request_data_attributes.GameCenterChallengeCreateRequest_data_attributes(
                        reference_name = '', 
                        vendor_identifier = '', 
                        allowed_durations = [
                            'ONE_DAY'
                            ], 
                        challenge_type = 'LEADERBOARD', 
                        repeatable = True, ), 
                    relationships = openapi_client.models.game_center_challenge_create_request_data_relationships.GameCenterChallengeCreateRequest_data_relationships(
                        game_center_detail = openapi_client.models.game_center_achievement_release_relationships_game_center_detail.GameCenterAchievementRelease_relationships_gameCenterDetail(
                            data = openapi_client.models.app_relationships_game_center_detail_data.App_relationships_gameCenterDetail_data(
                                type = 'gameCenterDetails', 
                                id = '', ), ), 
                        game_center_group = openapi_client.models.game_center_achievement_relationships_game_center_group.GameCenterAchievement_relationships_gameCenterGroup(), 
                        leaderboard = openapi_client.models.game_center_challenge_create_request_data_relationships_leaderboard.GameCenterChallengeCreateRequest_data_relationships_leaderboard(), ), )
            )
        else:
            return GameCenterChallengeCreateRequest(
                data = openapi_client.models.game_center_challenge_create_request_data.GameCenterChallengeCreateRequest_data(
                    type = 'gameCenterChallenges', 
                    attributes = openapi_client.models.game_center_challenge_create_request_data_attributes.GameCenterChallengeCreateRequest_data_attributes(
                        reference_name = '', 
                        vendor_identifier = '', 
                        allowed_durations = [
                            'ONE_DAY'
                            ], 
                        challenge_type = 'LEADERBOARD', 
                        repeatable = True, ), 
                    relationships = openapi_client.models.game_center_challenge_create_request_data_relationships.GameCenterChallengeCreateRequest_data_relationships(
                        game_center_detail = openapi_client.models.game_center_achievement_release_relationships_game_center_detail.GameCenterAchievementRelease_relationships_gameCenterDetail(
                            data = openapi_client.models.app_relationships_game_center_detail_data.App_relationships_gameCenterDetail_data(
                                type = 'gameCenterDetails', 
                                id = '', ), ), 
                        game_center_group = openapi_client.models.game_center_achievement_relationships_game_center_group.GameCenterAchievement_relationships_gameCenterGroup(), 
                        leaderboard = openapi_client.models.game_center_challenge_create_request_data_relationships_leaderboard.GameCenterChallengeCreateRequest_data_relationships_leaderboard(), ), ),
        )
        """

    def testGameCenterChallengeCreateRequest(self):
        """Test GameCenterChallengeCreateRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
