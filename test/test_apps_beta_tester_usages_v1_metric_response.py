# coding: utf-8

"""
    App Store Connect API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.apps_beta_tester_usages_v1_metric_response import AppsBetaTesterUsagesV1MetricResponse

class TestAppsBetaTesterUsagesV1MetricResponse(unittest.TestCase):
    """AppsBetaTesterUsagesV1MetricResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AppsBetaTesterUsagesV1MetricResponse:
        """Test AppsBetaTesterUsagesV1MetricResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AppsBetaTesterUsagesV1MetricResponse`
        """
        model = AppsBetaTesterUsagesV1MetricResponse()
        if include_optional:
            return AppsBetaTesterUsagesV1MetricResponse(
                data = [
                    openapi_client.models.apps_beta_tester_usages_v1_metric_response_data_inner.AppsBetaTesterUsagesV1MetricResponse_data_inner(
                        data_points = openapi_client.models.apps_beta_tester_usages_v1_metric_response_data_inner_data_points.AppsBetaTesterUsagesV1MetricResponse_data_inner_dataPoints(
                            start = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            end = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            values = openapi_client.models.apps_beta_tester_usages_v1_metric_response_data_inner_data_points_values.AppsBetaTesterUsagesV1MetricResponse_data_inner_dataPoints_values(
                                crash_count = 56, 
                                session_count = 56, 
                                feedback_count = 56, ), ), 
                        dimensions = openapi_client.models.apps_beta_tester_usages_v1_metric_response_data_inner_dimensions.AppsBetaTesterUsagesV1MetricResponse_data_inner_dimensions(
                            beta_testers = openapi_client.models.apps_beta_tester_usages_v1_metric_response_data_inner_dimensions_beta_testers.AppsBetaTesterUsagesV1MetricResponse_data_inner_dimensions_betaTesters(
                                links = openapi_client.models.apps_beta_tester_usages_v1_metric_response_data_inner_dimensions_beta_testers_links.AppsBetaTesterUsagesV1MetricResponse_data_inner_dimensions_betaTesters_links(
                                    group_by = '', 
                                    related = '', ), 
                                data = '', ), ), )
                    ],
                links = openapi_client.models.paged_document_links.PagedDocumentLinks(
                    self = '', 
                    first = '', 
                    next = '', ),
                meta = openapi_client.models.paging_information.PagingInformation(
                    paging = openapi_client.models.paging_information_paging.PagingInformation_paging(
                        total = 56, 
                        limit = 56, 
                        next_cursor = '', ), ),
                included = [
                    openapi_client.models.beta_tester.BetaTester(
                        type = 'betaTesters', 
                        id = '', 
                        attributes = openapi_client.models.beta_tester_attributes.BetaTester_attributes(
                            first_name = '', 
                            last_name = '', 
                            email = '', 
                            invite_type = 'EMAIL', 
                            state = 'NOT_INVITED', ), 
                        relationships = openapi_client.models.beta_tester_relationships.BetaTester_relationships(
                            apps = openapi_client.models.beta_tester_relationships_apps.BetaTester_relationships_apps(
                                links = openapi_client.models.relationship_links.RelationshipLinks(
                                    self = '', 
                                    related = '', ), 
                                meta = openapi_client.models.paging_information.PagingInformation(
                                    paging = openapi_client.models.paging_information_paging.PagingInformation_paging(
                                        total = 56, 
                                        limit = 56, 
                                        next_cursor = '', ), ), 
                                data = [
                                    openapi_client.models.accessibility_declaration_create_request_data_relationships_app_data.AccessibilityDeclarationCreateRequest_data_relationships_app_data(
                                        type = 'apps', 
                                        id = '', )
                                    ], ), 
                            beta_groups = openapi_client.models.app_relationships_beta_groups.App_relationships_betaGroups(), 
                            builds = openapi_client.models.app_relationships_builds.App_relationships_builds(), ), 
                        links = openapi_client.models.resource_links.ResourceLinks(
                            self = '', ), )
                    ]
            )
        else:
            return AppsBetaTesterUsagesV1MetricResponse(
                data = [
                    openapi_client.models.apps_beta_tester_usages_v1_metric_response_data_inner.AppsBetaTesterUsagesV1MetricResponse_data_inner(
                        data_points = openapi_client.models.apps_beta_tester_usages_v1_metric_response_data_inner_data_points.AppsBetaTesterUsagesV1MetricResponse_data_inner_dataPoints(
                            start = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            end = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            values = openapi_client.models.apps_beta_tester_usages_v1_metric_response_data_inner_data_points_values.AppsBetaTesterUsagesV1MetricResponse_data_inner_dataPoints_values(
                                crash_count = 56, 
                                session_count = 56, 
                                feedback_count = 56, ), ), 
                        dimensions = openapi_client.models.apps_beta_tester_usages_v1_metric_response_data_inner_dimensions.AppsBetaTesterUsagesV1MetricResponse_data_inner_dimensions(
                            beta_testers = openapi_client.models.apps_beta_tester_usages_v1_metric_response_data_inner_dimensions_beta_testers.AppsBetaTesterUsagesV1MetricResponse_data_inner_dimensions_betaTesters(
                                links = openapi_client.models.apps_beta_tester_usages_v1_metric_response_data_inner_dimensions_beta_testers_links.AppsBetaTesterUsagesV1MetricResponse_data_inner_dimensions_betaTesters_links(
                                    group_by = '', 
                                    related = '', ), 
                                data = '', ), ), )
                    ],
                links = openapi_client.models.paged_document_links.PagedDocumentLinks(
                    self = '', 
                    first = '', 
                    next = '', ),
        )
        """

    def testAppsBetaTesterUsagesV1MetricResponse(self):
        """Test AppsBetaTesterUsagesV1MetricResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
