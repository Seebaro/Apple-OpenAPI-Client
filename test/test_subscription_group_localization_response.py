# coding: utf-8

"""
    App Store Connect API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.subscription_group_localization_response import SubscriptionGroupLocalizationResponse

class TestSubscriptionGroupLocalizationResponse(unittest.TestCase):
    """SubscriptionGroupLocalizationResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SubscriptionGroupLocalizationResponse:
        """Test SubscriptionGroupLocalizationResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SubscriptionGroupLocalizationResponse`
        """
        model = SubscriptionGroupLocalizationResponse()
        if include_optional:
            return SubscriptionGroupLocalizationResponse(
                data = openapi_client.models.subscription_group_localization.SubscriptionGroupLocalization(
                    type = 'subscriptionGroupLocalizations', 
                    id = '', 
                    attributes = openapi_client.models.subscription_group_localization_attributes.SubscriptionGroupLocalization_attributes(
                        name = '', 
                        custom_app_name = '', 
                        locale = '', 
                        state = 'PREPARE_FOR_SUBMISSION', ), 
                    relationships = openapi_client.models.subscription_group_localization_relationships.SubscriptionGroupLocalization_relationships(
                        subscription_group = openapi_client.models.subscription_group_localization_relationships_subscription_group.SubscriptionGroupLocalization_relationships_subscriptionGroup(
                            data = openapi_client.models.app_relationships_subscription_groups_data_inner.App_relationships_subscriptionGroups_data_inner(
                                type = 'subscriptionGroups', 
                                id = '', ), ), ), 
                    links = openapi_client.models.resource_links.ResourceLinks(
                        self = '', ), ),
                included = [
                    openapi_client.models.subscription_group.SubscriptionGroup(
                        type = 'subscriptionGroups', 
                        id = '', 
                        attributes = openapi_client.models.game_center_group_attributes.GameCenterGroup_attributes(
                            reference_name = '', ), 
                        relationships = openapi_client.models.subscription_group_relationships.SubscriptionGroup_relationships(
                            subscriptions = openapi_client.models.subscription_group_relationships_subscriptions.SubscriptionGroup_relationships_subscriptions(
                                links = openapi_client.models.relationship_links.RelationshipLinks(
                                    self = '', 
                                    related = '', ), 
                                meta = openapi_client.models.paging_information.PagingInformation(
                                    paging = openapi_client.models.paging_information_paging.PagingInformation_paging(
                                        total = 56, 
                                        limit = 56, 
                                        next_cursor = '', ), ), 
                                data = [
                                    openapi_client.models.promoted_purchase_relationships_subscription_data.PromotedPurchase_relationships_subscription_data(
                                        type = 'subscriptions', 
                                        id = '', )
                                    ], ), 
                            subscription_group_localizations = openapi_client.models.subscription_group_relationships_subscription_group_localizations.SubscriptionGroup_relationships_subscriptionGroupLocalizations(), ), 
                        links = openapi_client.models.resource_links.ResourceLinks(
                            self = '', ), )
                    ],
                links = openapi_client.models.document_links.DocumentLinks(
                    self = '', )
            )
        else:
            return SubscriptionGroupLocalizationResponse(
                data = openapi_client.models.subscription_group_localization.SubscriptionGroupLocalization(
                    type = 'subscriptionGroupLocalizations', 
                    id = '', 
                    attributes = openapi_client.models.subscription_group_localization_attributes.SubscriptionGroupLocalization_attributes(
                        name = '', 
                        custom_app_name = '', 
                        locale = '', 
                        state = 'PREPARE_FOR_SUBMISSION', ), 
                    relationships = openapi_client.models.subscription_group_localization_relationships.SubscriptionGroupLocalization_relationships(
                        subscription_group = openapi_client.models.subscription_group_localization_relationships_subscription_group.SubscriptionGroupLocalization_relationships_subscriptionGroup(
                            data = openapi_client.models.app_relationships_subscription_groups_data_inner.App_relationships_subscriptionGroups_data_inner(
                                type = 'subscriptionGroups', 
                                id = '', ), ), ), 
                    links = openapi_client.models.resource_links.ResourceLinks(
                        self = '', ), ),
                links = openapi_client.models.document_links.DocumentLinks(
                    self = '', ),
        )
        """

    def testSubscriptionGroupLocalizationResponse(self):
        """Test SubscriptionGroupLocalizationResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
