# coding: utf-8

"""
    App Store Connect API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.game_center_challenge_version_release_response import GameCenterChallengeVersionReleaseResponse

class TestGameCenterChallengeVersionReleaseResponse(unittest.TestCase):
    """GameCenterChallengeVersionReleaseResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GameCenterChallengeVersionReleaseResponse:
        """Test GameCenterChallengeVersionReleaseResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GameCenterChallengeVersionReleaseResponse`
        """
        model = GameCenterChallengeVersionReleaseResponse()
        if include_optional:
            return GameCenterChallengeVersionReleaseResponse(
                data = openapi_client.models.game_center_challenge_version_release.GameCenterChallengeVersionRelease(
                    type = 'gameCenterChallengeVersionReleases', 
                    id = '', 
                    relationships = openapi_client.models.game_center_challenge_version_release_relationships.GameCenterChallengeVersionRelease_relationships(
                        version = openapi_client.models.game_center_challenge_image_create_request_data_relationships_version.GameCenterChallengeImageCreateRequest_data_relationships_version(
                            data = openapi_client.models.game_center_challenge_image_create_request_data_relationships_version_data.GameCenterChallengeImageCreateRequest_data_relationships_version_data(
                                type = 'gameCenterChallengeVersions', 
                                id = '', ), ), ), 
                    links = openapi_client.models.resource_links.ResourceLinks(
                        self = '', ), ),
                included = [
                    openapi_client.models.game_center_challenge_version.GameCenterChallengeVersion(
                        type = 'gameCenterChallengeVersions', 
                        id = '', 
                        attributes = openapi_client.models.game_center_challenge_version_attributes.GameCenterChallengeVersion_attributes(
                            version = 56, 
                            state = 'PREPARE_FOR_SUBMISSION', ), 
                        relationships = openapi_client.models.game_center_challenge_version_relationships.GameCenterChallengeVersion_relationships(
                            challenge = openapi_client.models.game_center_challenge_version_relationships_challenge.GameCenterChallengeVersion_relationships_challenge(
                                data = openapi_client.models.game_center_challenge_version_relationships_challenge_data.GameCenterChallengeVersion_relationships_challenge_data(
                                    type = 'gameCenterChallenges', 
                                    id = '', ), ), 
                            localizations = openapi_client.models.game_center_challenge_version_relationships_localizations.GameCenterChallengeVersion_relationships_localizations(
                                links = openapi_client.models.relationship_links.RelationshipLinks(
                                    self = '', 
                                    related = '', ), 
                                meta = openapi_client.models.paging_information.PagingInformation(
                                    paging = openapi_client.models.paging_information_paging.PagingInformation_paging(
                                        total = 56, 
                                        limit = 56, 
                                        next_cursor = '', ), ), ), 
                            releases = openapi_client.models.game_center_challenge_version_relationships_releases.GameCenterChallengeVersion_relationships_releases(), 
                            default_image = openapi_client.models.game_center_challenge_localization_relationships_image.GameCenterChallengeLocalization_relationships_image(), ), 
                        links = openapi_client.models.resource_links.ResourceLinks(
                            self = '', ), )
                    ],
                links = openapi_client.models.document_links.DocumentLinks(
                    self = '', )
            )
        else:
            return GameCenterChallengeVersionReleaseResponse(
                data = openapi_client.models.game_center_challenge_version_release.GameCenterChallengeVersionRelease(
                    type = 'gameCenterChallengeVersionReleases', 
                    id = '', 
                    relationships = openapi_client.models.game_center_challenge_version_release_relationships.GameCenterChallengeVersionRelease_relationships(
                        version = openapi_client.models.game_center_challenge_image_create_request_data_relationships_version.GameCenterChallengeImageCreateRequest_data_relationships_version(
                            data = openapi_client.models.game_center_challenge_image_create_request_data_relationships_version_data.GameCenterChallengeImageCreateRequest_data_relationships_version_data(
                                type = 'gameCenterChallengeVersions', 
                                id = '', ), ), ), 
                    links = openapi_client.models.resource_links.ResourceLinks(
                        self = '', ), ),
                links = openapi_client.models.document_links.DocumentLinks(
                    self = '', ),
        )
        """

    def testGameCenterChallengeVersionReleaseResponse(self):
        """Test GameCenterChallengeVersionReleaseResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
