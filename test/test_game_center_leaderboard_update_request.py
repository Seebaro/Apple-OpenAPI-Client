# coding: utf-8

"""
    App Store Connect API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.game_center_leaderboard_update_request import GameCenterLeaderboardUpdateRequest

class TestGameCenterLeaderboardUpdateRequest(unittest.TestCase):
    """GameCenterLeaderboardUpdateRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GameCenterLeaderboardUpdateRequest:
        """Test GameCenterLeaderboardUpdateRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GameCenterLeaderboardUpdateRequest`
        """
        model = GameCenterLeaderboardUpdateRequest()
        if include_optional:
            return GameCenterLeaderboardUpdateRequest(
                data = openapi_client.models.game_center_leaderboard_update_request_data.GameCenterLeaderboardUpdateRequest_data(
                    type = 'gameCenterLeaderboards', 
                    id = '', 
                    attributes = openapi_client.models.game_center_leaderboard_update_request_data_attributes.GameCenterLeaderboardUpdateRequest_data_attributes(
                        default_formatter = 'INTEGER', 
                        reference_name = '', 
                        submission_type = 'BEST_SCORE', 
                        score_sort_type = 'ASC', 
                        score_range_start = 1, 
                        score_range_end = 1, 
                        recurrence_start_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        recurrence_duration = '', 
                        recurrence_rule = '', 
                        archived = True, 
                        activity_properties = {
                            'key' : ''
                            }, 
                        visibility = 'SHOW_FOR_ALL', ), )
            )
        else:
            return GameCenterLeaderboardUpdateRequest(
                data = openapi_client.models.game_center_leaderboard_update_request_data.GameCenterLeaderboardUpdateRequest_data(
                    type = 'gameCenterLeaderboards', 
                    id = '', 
                    attributes = openapi_client.models.game_center_leaderboard_update_request_data_attributes.GameCenterLeaderboardUpdateRequest_data_attributes(
                        default_formatter = 'INTEGER', 
                        reference_name = '', 
                        submission_type = 'BEST_SCORE', 
                        score_sort_type = 'ASC', 
                        score_range_start = 1, 
                        score_range_end = 1, 
                        recurrence_start_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        recurrence_duration = '', 
                        recurrence_rule = '', 
                        archived = True, 
                        activity_properties = {
                            'key' : ''
                            }, 
                        visibility = 'SHOW_FOR_ALL', ), ),
        )
        """

    def testGameCenterLeaderboardUpdateRequest(self):
        """Test GameCenterLeaderboardUpdateRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
