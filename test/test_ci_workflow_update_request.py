# coding: utf-8

"""
    App Store Connect API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.ci_workflow_update_request import CiWorkflowUpdateRequest

class TestCiWorkflowUpdateRequest(unittest.TestCase):
    """CiWorkflowUpdateRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CiWorkflowUpdateRequest:
        """Test CiWorkflowUpdateRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CiWorkflowUpdateRequest`
        """
        model = CiWorkflowUpdateRequest()
        if include_optional:
            return CiWorkflowUpdateRequest(
                data = openapi_client.models.ci_workflow_update_request_data.CiWorkflowUpdateRequest_data(
                    type = 'ciWorkflows', 
                    id = '', 
                    attributes = openapi_client.models.ci_workflow_update_request_data_attributes.CiWorkflowUpdateRequest_data_attributes(
                        name = '', 
                        description = '', 
                        branch_start_condition = openapi_client.models.ci_branch_start_condition.CiBranchStartCondition(
                            source = openapi_client.models.ci_branch_patterns.CiBranchPatterns(
                                is_all_match = True, 
                                patterns = [
                                    openapi_client.models.ci_branch_patterns_patterns_inner.CiBranchPatterns_patterns_inner(
                                        pattern = '', 
                                        is_prefix = True, )
                                    ], ), 
                            files_and_folders_rule = openapi_client.models.ci_files_and_folders_rule.CiFilesAndFoldersRule(
                                mode = 'START_IF_ANY_FILE_MATCHES', 
                                matchers = [
                                    openapi_client.models.ci_start_condition_file_matcher.CiStartConditionFileMatcher(
                                        directory = '', 
                                        file_extension = '', 
                                        file_name = '', )
                                    ], ), 
                            auto_cancel = True, ), 
                        tag_start_condition = openapi_client.models.ci_tag_start_condition.CiTagStartCondition(
                            auto_cancel = True, ), 
                        pull_request_start_condition = openapi_client.models.ci_pull_request_start_condition.CiPullRequestStartCondition(
                            destination = openapi_client.models.ci_branch_patterns.CiBranchPatterns(
                                is_all_match = True, ), 
                            auto_cancel = True, ), 
                        scheduled_start_condition = openapi_client.models.ci_scheduled_start_condition.CiScheduledStartCondition(
                            schedule = openapi_client.models.ci_scheduled_start_condition_schedule.CiScheduledStartCondition_schedule(
                                frequency = 'WEEKLY', 
                                days = [
                                    'SUNDAY'
                                    ], 
                                hour = 56, 
                                minute = 56, 
                                timezone = '', ), ), 
                        manual_branch_start_condition = openapi_client.models.ci_manual_branch_start_condition.CiManualBranchStartCondition(), 
                        manual_tag_start_condition = openapi_client.models.ci_manual_tag_start_condition.CiManualTagStartCondition(), 
                        manual_pull_request_start_condition = openapi_client.models.ci_manual_pull_request_start_condition.CiManualPullRequestStartCondition(), 
                        actions = [
                            openapi_client.models.ci_action.CiAction(
                                name = '', 
                                action_type = 'BUILD', 
                                build_distribution_audience = 'INTERNAL_ONLY', 
                                test_configuration = openapi_client.models.ci_action_test_configuration.CiAction_testConfiguration(
                                    kind = 'USE_SCHEME_SETTINGS', 
                                    test_plan_name = '', 
                                    test_destinations = [
                                        openapi_client.models.ci_test_destination.CiTestDestination(
                                            device_type_name = '', 
                                            device_type_identifier = '', 
                                            runtime_name = '', 
                                            runtime_identifier = '', 
                                            kind = 'SIMULATOR', )
                                        ], ), 
                                scheme = '', 
                                platform = 'MACOS', 
                                is_required_to_pass = True, )
                            ], 
                        is_enabled = True, 
                        is_locked_for_editing = True, 
                        clean = True, 
                        container_file_path = '', ), 
                    relationships = openapi_client.models.ci_workflow_update_request_data_relationships.CiWorkflowUpdateRequest_data_relationships(
                        xcode_version = openapi_client.models.ci_workflow_relationships_xcode_version.CiWorkflow_relationships_xcodeVersion(
                            data = openapi_client.models.ci_mac_os_version_relationships_xcode_versions_data_inner.CiMacOsVersion_relationships_xcodeVersions_data_inner(
                                type = 'ciXcodeVersions', 
                                id = '', ), ), 
                        mac_os_version = openapi_client.models.ci_workflow_relationships_mac_os_version.CiWorkflow_relationships_macOsVersion(), ), )
            )
        else:
            return CiWorkflowUpdateRequest(
                data = openapi_client.models.ci_workflow_update_request_data.CiWorkflowUpdateRequest_data(
                    type = 'ciWorkflows', 
                    id = '', 
                    attributes = openapi_client.models.ci_workflow_update_request_data_attributes.CiWorkflowUpdateRequest_data_attributes(
                        name = '', 
                        description = '', 
                        branch_start_condition = openapi_client.models.ci_branch_start_condition.CiBranchStartCondition(
                            source = openapi_client.models.ci_branch_patterns.CiBranchPatterns(
                                is_all_match = True, 
                                patterns = [
                                    openapi_client.models.ci_branch_patterns_patterns_inner.CiBranchPatterns_patterns_inner(
                                        pattern = '', 
                                        is_prefix = True, )
                                    ], ), 
                            files_and_folders_rule = openapi_client.models.ci_files_and_folders_rule.CiFilesAndFoldersRule(
                                mode = 'START_IF_ANY_FILE_MATCHES', 
                                matchers = [
                                    openapi_client.models.ci_start_condition_file_matcher.CiStartConditionFileMatcher(
                                        directory = '', 
                                        file_extension = '', 
                                        file_name = '', )
                                    ], ), 
                            auto_cancel = True, ), 
                        tag_start_condition = openapi_client.models.ci_tag_start_condition.CiTagStartCondition(
                            auto_cancel = True, ), 
                        pull_request_start_condition = openapi_client.models.ci_pull_request_start_condition.CiPullRequestStartCondition(
                            destination = openapi_client.models.ci_branch_patterns.CiBranchPatterns(
                                is_all_match = True, ), 
                            auto_cancel = True, ), 
                        scheduled_start_condition = openapi_client.models.ci_scheduled_start_condition.CiScheduledStartCondition(
                            schedule = openapi_client.models.ci_scheduled_start_condition_schedule.CiScheduledStartCondition_schedule(
                                frequency = 'WEEKLY', 
                                days = [
                                    'SUNDAY'
                                    ], 
                                hour = 56, 
                                minute = 56, 
                                timezone = '', ), ), 
                        manual_branch_start_condition = openapi_client.models.ci_manual_branch_start_condition.CiManualBranchStartCondition(), 
                        manual_tag_start_condition = openapi_client.models.ci_manual_tag_start_condition.CiManualTagStartCondition(), 
                        manual_pull_request_start_condition = openapi_client.models.ci_manual_pull_request_start_condition.CiManualPullRequestStartCondition(), 
                        actions = [
                            openapi_client.models.ci_action.CiAction(
                                name = '', 
                                action_type = 'BUILD', 
                                build_distribution_audience = 'INTERNAL_ONLY', 
                                test_configuration = openapi_client.models.ci_action_test_configuration.CiAction_testConfiguration(
                                    kind = 'USE_SCHEME_SETTINGS', 
                                    test_plan_name = '', 
                                    test_destinations = [
                                        openapi_client.models.ci_test_destination.CiTestDestination(
                                            device_type_name = '', 
                                            device_type_identifier = '', 
                                            runtime_name = '', 
                                            runtime_identifier = '', 
                                            kind = 'SIMULATOR', )
                                        ], ), 
                                scheme = '', 
                                platform = 'MACOS', 
                                is_required_to_pass = True, )
                            ], 
                        is_enabled = True, 
                        is_locked_for_editing = True, 
                        clean = True, 
                        container_file_path = '', ), 
                    relationships = openapi_client.models.ci_workflow_update_request_data_relationships.CiWorkflowUpdateRequest_data_relationships(
                        xcode_version = openapi_client.models.ci_workflow_relationships_xcode_version.CiWorkflow_relationships_xcodeVersion(
                            data = openapi_client.models.ci_mac_os_version_relationships_xcode_versions_data_inner.CiMacOsVersion_relationships_xcodeVersions_data_inner(
                                type = 'ciXcodeVersions', 
                                id = '', ), ), 
                        mac_os_version = openapi_client.models.ci_workflow_relationships_mac_os_version.CiWorkflow_relationships_macOsVersion(), ), ),
        )
        """

    def testCiWorkflowUpdateRequest(self):
        """Test CiWorkflowUpdateRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
