# coding: utf-8

"""
    App Store Connect API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.app_preview_response import AppPreviewResponse

class TestAppPreviewResponse(unittest.TestCase):
    """AppPreviewResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AppPreviewResponse:
        """Test AppPreviewResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AppPreviewResponse`
        """
        model = AppPreviewResponse()
        if include_optional:
            return AppPreviewResponse(
                data = openapi_client.models.app_preview.AppPreview(
                    type = 'appPreviews', 
                    id = '', 
                    attributes = openapi_client.models.app_preview_attributes.AppPreview_attributes(
                        file_size = 56, 
                        file_name = '', 
                        source_file_checksum = '', 
                        preview_frame_time_code = '', 
                        mime_type = '', 
                        video_url = '', 
                        preview_frame_image = openapi_client.models.preview_frame_image.PreviewFrameImage(
                            image = openapi_client.models.image_asset.ImageAsset(
                                template_url = '', 
                                width = 56, 
                                height = 56, ), 
                            state = openapi_client.models.app_media_preview_frame_image_state.AppMediaPreviewFrameImageState(
                                errors = [
                                    openapi_client.models.app_media_state_error.AppMediaStateError(
                                        code = '', 
                                        description = '', )
                                    ], 
                                warnings = [
                                    openapi_client.models.app_media_state_error.AppMediaStateError(
                                        code = '', 
                                        description = '', )
                                    ], ), ), 
                        preview_image = openapi_client.models.image_asset.ImageAsset(
                            template_url = '', 
                            width = 56, 
                            height = 56, ), 
                        upload_operations = [
                            openapi_client.models.upload_operation.UploadOperation(
                                method = '', 
                                url = '', 
                                length = 56, 
                                offset = 56, 
                                request_headers = [
                                    openapi_client.models.http_header.HttpHeader(
                                        name = '', 
                                        value = '', )
                                    ], )
                            ], 
                        asset_delivery_state = openapi_client.models.app_media_asset_state.AppMediaAssetState(), 
                        video_delivery_state = openapi_client.models.app_media_video_state.AppMediaVideoState(), ), 
                    relationships = openapi_client.models.app_preview_relationships.AppPreview_relationships(
                        app_preview_set = openapi_client.models.app_preview_relationships_app_preview_set.AppPreview_relationships_appPreviewSet(
                            data = openapi_client.models.app_custom_product_page_localization_relationships_app_preview_sets_data_inner.AppCustomProductPageLocalization_relationships_appPreviewSets_data_inner(
                                type = 'appPreviewSets', 
                                id = '', ), ), ), 
                    links = openapi_client.models.resource_links.ResourceLinks(
                        self = '', ), ),
                included = [
                    openapi_client.models.app_preview_set.AppPreviewSet(
                        type = 'appPreviewSets', 
                        id = '', 
                        attributes = openapi_client.models.app_preview_set_attributes.AppPreviewSet_attributes(
                            preview_type = 'IPHONE_67', ), 
                        relationships = openapi_client.models.app_preview_set_relationships.AppPreviewSet_relationships(
                            app_store_version_localization = openapi_client.models.app_preview_set_relationships_app_store_version_localization.AppPreviewSet_relationships_appStoreVersionLocalization(
                                data = openapi_client.models.app_preview_set_relationships_app_store_version_localization_data.AppPreviewSet_relationships_appStoreVersionLocalization_data(
                                    type = 'appStoreVersionLocalizations', 
                                    id = '', ), ), 
                            app_custom_product_page_localization = openapi_client.models.app_preview_set_relationships_app_custom_product_page_localization.AppPreviewSet_relationships_appCustomProductPageLocalization(), 
                            app_store_version_experiment_treatment_localization = openapi_client.models.app_preview_set_relationships_app_store_version_experiment_treatment_localization.AppPreviewSet_relationships_appStoreVersionExperimentTreatmentLocalization(), 
                            app_previews = openapi_client.models.app_preview_set_relationships_app_previews.AppPreviewSet_relationships_appPreviews(
                                links = openapi_client.models.relationship_links.RelationshipLinks(
                                    self = '', 
                                    related = '', ), 
                                meta = openapi_client.models.paging_information.PagingInformation(
                                    paging = openapi_client.models.paging_information_paging.PagingInformation_paging(
                                        total = 56, 
                                        limit = 56, 
                                        next_cursor = '', ), ), ), ), 
                        links = openapi_client.models.resource_links.ResourceLinks(
                            self = '', ), )
                    ],
                links = openapi_client.models.document_links.DocumentLinks(
                    self = '', )
            )
        else:
            return AppPreviewResponse(
                data = openapi_client.models.app_preview.AppPreview(
                    type = 'appPreviews', 
                    id = '', 
                    attributes = openapi_client.models.app_preview_attributes.AppPreview_attributes(
                        file_size = 56, 
                        file_name = '', 
                        source_file_checksum = '', 
                        preview_frame_time_code = '', 
                        mime_type = '', 
                        video_url = '', 
                        preview_frame_image = openapi_client.models.preview_frame_image.PreviewFrameImage(
                            image = openapi_client.models.image_asset.ImageAsset(
                                template_url = '', 
                                width = 56, 
                                height = 56, ), 
                            state = openapi_client.models.app_media_preview_frame_image_state.AppMediaPreviewFrameImageState(
                                errors = [
                                    openapi_client.models.app_media_state_error.AppMediaStateError(
                                        code = '', 
                                        description = '', )
                                    ], 
                                warnings = [
                                    openapi_client.models.app_media_state_error.AppMediaStateError(
                                        code = '', 
                                        description = '', )
                                    ], ), ), 
                        preview_image = openapi_client.models.image_asset.ImageAsset(
                            template_url = '', 
                            width = 56, 
                            height = 56, ), 
                        upload_operations = [
                            openapi_client.models.upload_operation.UploadOperation(
                                method = '', 
                                url = '', 
                                length = 56, 
                                offset = 56, 
                                request_headers = [
                                    openapi_client.models.http_header.HttpHeader(
                                        name = '', 
                                        value = '', )
                                    ], )
                            ], 
                        asset_delivery_state = openapi_client.models.app_media_asset_state.AppMediaAssetState(), 
                        video_delivery_state = openapi_client.models.app_media_video_state.AppMediaVideoState(), ), 
                    relationships = openapi_client.models.app_preview_relationships.AppPreview_relationships(
                        app_preview_set = openapi_client.models.app_preview_relationships_app_preview_set.AppPreview_relationships_appPreviewSet(
                            data = openapi_client.models.app_custom_product_page_localization_relationships_app_preview_sets_data_inner.AppCustomProductPageLocalization_relationships_appPreviewSets_data_inner(
                                type = 'appPreviewSets', 
                                id = '', ), ), ), 
                    links = openapi_client.models.resource_links.ResourceLinks(
                        self = '', ), ),
                links = openapi_client.models.document_links.DocumentLinks(
                    self = '', ),
        )
        """

    def testAppPreviewResponse(self):
        """Test AppPreviewResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
