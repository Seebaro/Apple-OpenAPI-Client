# coding: utf-8

"""
    App Store Connect API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.subscription_relationships import SubscriptionRelationships

class TestSubscriptionRelationships(unittest.TestCase):
    """SubscriptionRelationships unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SubscriptionRelationships:
        """Test SubscriptionRelationships
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SubscriptionRelationships`
        """
        model = SubscriptionRelationships()
        if include_optional:
            return SubscriptionRelationships(
                subscription_localizations = openapi_client.models.subscription_relationships_subscription_localizations.Subscription_relationships_subscriptionLocalizations(
                    links = openapi_client.models.relationship_links.RelationshipLinks(
                        self = '', 
                        related = '', ), 
                    meta = openapi_client.models.paging_information.PagingInformation(
                        paging = openapi_client.models.paging_information_paging.PagingInformation_paging(
                            total = 56, 
                            limit = 56, 
                            next_cursor = '', ), ), 
                    data = [
                        openapi_client.models.subscription_relationships_subscription_localizations_data_inner.Subscription_relationships_subscriptionLocalizations_data_inner(
                            type = 'subscriptionLocalizations', 
                            id = '', )
                        ], ),
                app_store_review_screenshot = openapi_client.models.subscription_relationships_app_store_review_screenshot.Subscription_relationships_appStoreReviewScreenshot(
                    links = openapi_client.models.relationship_links.RelationshipLinks(
                        self = '', 
                        related = '', ), 
                    data = openapi_client.models.subscription_relationships_app_store_review_screenshot_data.Subscription_relationships_appStoreReviewScreenshot_data(
                        type = 'subscriptionAppStoreReviewScreenshots', 
                        id = '', ), ),
                group = openapi_client.models.subscription_group_localization_relationships_subscription_group.SubscriptionGroupLocalization_relationships_subscriptionGroup(
                    data = openapi_client.models.app_relationships_subscription_groups_data_inner.App_relationships_subscriptionGroups_data_inner(
                        type = 'subscriptionGroups', 
                        id = '', ), ),
                introductory_offers = openapi_client.models.subscription_relationships_introductory_offers.Subscription_relationships_introductoryOffers(
                    links = openapi_client.models.relationship_links.RelationshipLinks(
                        self = '', 
                        related = '', ), 
                    meta = openapi_client.models.paging_information.PagingInformation(
                        paging = openapi_client.models.paging_information_paging.PagingInformation_paging(
                            total = 56, 
                            limit = 56, 
                            next_cursor = '', ), ), 
                    data = [
                        openapi_client.models.subscription_relationships_introductory_offers_data_inner.Subscription_relationships_introductoryOffers_data_inner(
                            type = 'subscriptionIntroductoryOffers', 
                            id = '', )
                        ], ),
                promotional_offers = openapi_client.models.subscription_relationships_promotional_offers.Subscription_relationships_promotionalOffers(
                    links = openapi_client.models.relationship_links.RelationshipLinks(
                        self = '', 
                        related = '', ), 
                    meta = openapi_client.models.paging_information.PagingInformation(
                        paging = openapi_client.models.paging_information_paging.PagingInformation_paging(
                            total = 56, 
                            limit = 56, 
                            next_cursor = '', ), ), 
                    data = [
                        openapi_client.models.subscription_relationships_promotional_offers_data_inner.Subscription_relationships_promotionalOffers_data_inner(
                            type = 'subscriptionPromotionalOffers', 
                            id = '', )
                        ], ),
                offer_codes = openapi_client.models.subscription_relationships_offer_codes.Subscription_relationships_offerCodes(
                    links = openapi_client.models.relationship_links.RelationshipLinks(
                        self = '', 
                        related = '', ), 
                    meta = openapi_client.models.paging_information.PagingInformation(
                        paging = openapi_client.models.paging_information_paging.PagingInformation_paging(
                            total = 56, 
                            limit = 56, 
                            next_cursor = '', ), ), 
                    data = [
                        openapi_client.models.subscription_offer_code_custom_code_relationships_offer_code_data.SubscriptionOfferCodeCustomCode_relationships_offerCode_data(
                            type = 'subscriptionOfferCodes', 
                            id = '', )
                        ], ),
                prices = openapi_client.models.subscription_relationships_prices.Subscription_relationships_prices(
                    links = openapi_client.models.relationship_links.RelationshipLinks(
                        self = '', 
                        related = '', ), 
                    meta = openapi_client.models.paging_information.PagingInformation(
                        paging = openapi_client.models.paging_information_paging.PagingInformation_paging(
                            total = 56, 
                            limit = 56, 
                            next_cursor = '', ), ), 
                    data = [
                        openapi_client.models.subscription_relationships_prices_data_inner.Subscription_relationships_prices_data_inner(
                            type = 'subscriptionPrices', 
                            id = '', )
                        ], ),
                price_points = openapi_client.models.analytics_report_instance_relationships_segments.AnalyticsReportInstance_relationships_segments(
                    links = openapi_client.models.relationship_links.RelationshipLinks(
                        self = '', 
                        related = '', ), ),
                promoted_purchase = openapi_client.models.in_app_purchase_v2_relationships_promoted_purchase.InAppPurchaseV2_relationships_promotedPurchase(
                    links = openapi_client.models.relationship_links.RelationshipLinks(
                        self = '', 
                        related = '', ), 
                    data = openapi_client.models.app_relationships_promoted_purchases_data_inner.App_relationships_promotedPurchases_data_inner(
                        type = 'promotedPurchases', 
                        id = '', ), ),
                subscription_availability = openapi_client.models.subscription_relationships_subscription_availability.Subscription_relationships_subscriptionAvailability(
                    links = openapi_client.models.relationship_links.RelationshipLinks(
                        self = '', 
                        related = '', ), 
                    data = openapi_client.models.subscription_relationships_subscription_availability_data.Subscription_relationships_subscriptionAvailability_data(
                        type = 'subscriptionAvailabilities', 
                        id = '', ), ),
                win_back_offers = openapi_client.models.subscription_relationships_win_back_offers.Subscription_relationships_winBackOffers(
                    links = openapi_client.models.relationship_links.RelationshipLinks(
                        self = '', 
                        related = '', ), 
                    meta = openapi_client.models.paging_information.PagingInformation(
                        paging = openapi_client.models.paging_information_paging.PagingInformation_paging(
                            total = 56, 
                            limit = 56, 
                            next_cursor = '', ), ), 
                    data = [
                        openapi_client.models.subscription_relationships_win_back_offers_data_inner.Subscription_relationships_winBackOffers_data_inner(
                            type = 'winBackOffers', 
                            id = '', )
                        ], ),
                images = openapi_client.models.subscription_relationships_images.Subscription_relationships_images(
                    links = openapi_client.models.relationship_links.RelationshipLinks(
                        self = '', 
                        related = '', ), 
                    meta = openapi_client.models.paging_information.PagingInformation(
                        paging = openapi_client.models.paging_information_paging.PagingInformation_paging(
                            total = 56, 
                            limit = 56, 
                            next_cursor = '', ), ), 
                    data = [
                        openapi_client.models.subscription_relationships_images_data_inner.Subscription_relationships_images_data_inner(
                            type = 'subscriptionImages', 
                            id = '', )
                        ], )
            )
        else:
            return SubscriptionRelationships(
        )
        """

    def testSubscriptionRelationships(self):
        """Test SubscriptionRelationships"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
