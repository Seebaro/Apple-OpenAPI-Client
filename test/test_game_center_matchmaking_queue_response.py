# coding: utf-8

"""
    App Store Connect API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.game_center_matchmaking_queue_response import GameCenterMatchmakingQueueResponse

class TestGameCenterMatchmakingQueueResponse(unittest.TestCase):
    """GameCenterMatchmakingQueueResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GameCenterMatchmakingQueueResponse:
        """Test GameCenterMatchmakingQueueResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GameCenterMatchmakingQueueResponse`
        """
        model = GameCenterMatchmakingQueueResponse()
        if include_optional:
            return GameCenterMatchmakingQueueResponse(
                data = openapi_client.models.game_center_matchmaking_queue.GameCenterMatchmakingQueue(
                    type = 'gameCenterMatchmakingQueues', 
                    id = '', 
                    attributes = openapi_client.models.game_center_matchmaking_queue_attributes.GameCenterMatchmakingQueue_attributes(
                        reference_name = '', 
                        classic_matchmaking_bundle_ids = [
                            ''
                            ], ), 
                    relationships = openapi_client.models.game_center_matchmaking_queue_relationships.GameCenterMatchmakingQueue_relationships(
                        rule_set = openapi_client.models.game_center_matchmaking_queue_relationships_rule_set.GameCenterMatchmakingQueue_relationships_ruleSet(
                            data = openapi_client.models.game_center_matchmaking_queue_relationships_rule_set_data.GameCenterMatchmakingQueue_relationships_ruleSet_data(
                                type = 'gameCenterMatchmakingRuleSets', 
                                id = '', ), ), 
                        experiment_rule_set = openapi_client.models.game_center_matchmaking_queue_relationships_rule_set.GameCenterMatchmakingQueue_relationships_ruleSet(), ), 
                    links = openapi_client.models.resource_links.ResourceLinks(
                        self = '', ), ),
                included = [
                    openapi_client.models.game_center_matchmaking_rule_set.GameCenterMatchmakingRuleSet(
                        type = 'gameCenterMatchmakingRuleSets', 
                        id = '', 
                        attributes = openapi_client.models.game_center_matchmaking_rule_set_attributes.GameCenterMatchmakingRuleSet_attributes(
                            reference_name = '', 
                            rule_language_version = 56, 
                            min_players = 56, 
                            max_players = 56, ), 
                        relationships = openapi_client.models.game_center_matchmaking_rule_set_relationships.GameCenterMatchmakingRuleSet_relationships(
                            teams = openapi_client.models.game_center_matchmaking_rule_set_relationships_teams.GameCenterMatchmakingRuleSet_relationships_teams(
                                links = openapi_client.models.relationship_links.RelationshipLinks(
                                    self = '', 
                                    related = '', ), 
                                meta = openapi_client.models.paging_information.PagingInformation(
                                    paging = openapi_client.models.paging_information_paging.PagingInformation_paging(
                                        total = 56, 
                                        limit = 56, 
                                        next_cursor = '', ), ), 
                                data = [
                                    openapi_client.models.game_center_matchmaking_rule_set_relationships_teams_data_inner.GameCenterMatchmakingRuleSet_relationships_teams_data_inner(
                                        type = 'gameCenterMatchmakingTeams', 
                                        id = '', )
                                    ], ), 
                            rules = openapi_client.models.game_center_matchmaking_rule_set_relationships_rules.GameCenterMatchmakingRuleSet_relationships_rules(), 
                            matchmaking_queues = openapi_client.models.game_center_matchmaking_rule_set_relationships_matchmaking_queues.GameCenterMatchmakingRuleSet_relationships_matchmakingQueues(), ), 
                        links = openapi_client.models.resource_links.ResourceLinks(
                            self = '', ), )
                    ],
                links = openapi_client.models.document_links.DocumentLinks(
                    self = '', )
            )
        else:
            return GameCenterMatchmakingQueueResponse(
                data = openapi_client.models.game_center_matchmaking_queue.GameCenterMatchmakingQueue(
                    type = 'gameCenterMatchmakingQueues', 
                    id = '', 
                    attributes = openapi_client.models.game_center_matchmaking_queue_attributes.GameCenterMatchmakingQueue_attributes(
                        reference_name = '', 
                        classic_matchmaking_bundle_ids = [
                            ''
                            ], ), 
                    relationships = openapi_client.models.game_center_matchmaking_queue_relationships.GameCenterMatchmakingQueue_relationships(
                        rule_set = openapi_client.models.game_center_matchmaking_queue_relationships_rule_set.GameCenterMatchmakingQueue_relationships_ruleSet(
                            data = openapi_client.models.game_center_matchmaking_queue_relationships_rule_set_data.GameCenterMatchmakingQueue_relationships_ruleSet_data(
                                type = 'gameCenterMatchmakingRuleSets', 
                                id = '', ), ), 
                        experiment_rule_set = openapi_client.models.game_center_matchmaking_queue_relationships_rule_set.GameCenterMatchmakingQueue_relationships_ruleSet(), ), 
                    links = openapi_client.models.resource_links.ResourceLinks(
                        self = '', ), ),
                links = openapi_client.models.document_links.DocumentLinks(
                    self = '', ),
        )
        """

    def testGameCenterMatchmakingQueueResponse(self):
        """Test GameCenterMatchmakingQueueResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
