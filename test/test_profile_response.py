# coding: utf-8

"""
    App Store Connect API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.profile_response import ProfileResponse

class TestProfileResponse(unittest.TestCase):
    """ProfileResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ProfileResponse:
        """Test ProfileResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ProfileResponse`
        """
        model = ProfileResponse()
        if include_optional:
            return ProfileResponse(
                data = openapi_client.models.profile.Profile(
                    type = 'profiles', 
                    id = '', 
                    attributes = openapi_client.models.profile_attributes.Profile_attributes(
                        name = '', 
                        platform = 'IOS', 
                        profile_type = 'IOS_APP_DEVELOPMENT', 
                        profile_state = 'ACTIVE', 
                        profile_content = '', 
                        uuid = '', 
                        created_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        expiration_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                    relationships = openapi_client.models.profile_relationships.Profile_relationships(
                        bundle_id = openapi_client.models.profile_relationships_bundle_id.Profile_relationships_bundleId(
                            links = openapi_client.models.relationship_links.RelationshipLinks(
                                self = '', 
                                related = '', ), 
                            data = openapi_client.models.bundle_id_capability_create_request_data_relationships_bundle_id_data.BundleIdCapabilityCreateRequest_data_relationships_bundleId_data(
                                type = 'bundleIds', 
                                id = '', ), ), 
                        devices = openapi_client.models.profile_relationships_devices.Profile_relationships_devices(
                            meta = openapi_client.models.paging_information.PagingInformation(
                                paging = openapi_client.models.paging_information_paging.PagingInformation_paging(
                                    total = 56, 
                                    limit = 56, 
                                    next_cursor = '', ), ), ), 
                        certificates = openapi_client.models.merchant_id_relationships_certificates.MerchantId_relationships_certificates(), ), 
                    links = openapi_client.models.resource_links.ResourceLinks(
                        self = '', ), ),
                included = [
                    null
                    ],
                links = openapi_client.models.document_links.DocumentLinks(
                    self = '', )
            )
        else:
            return ProfileResponse(
                data = openapi_client.models.profile.Profile(
                    type = 'profiles', 
                    id = '', 
                    attributes = openapi_client.models.profile_attributes.Profile_attributes(
                        name = '', 
                        platform = 'IOS', 
                        profile_type = 'IOS_APP_DEVELOPMENT', 
                        profile_state = 'ACTIVE', 
                        profile_content = '', 
                        uuid = '', 
                        created_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        expiration_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                    relationships = openapi_client.models.profile_relationships.Profile_relationships(
                        bundle_id = openapi_client.models.profile_relationships_bundle_id.Profile_relationships_bundleId(
                            links = openapi_client.models.relationship_links.RelationshipLinks(
                                self = '', 
                                related = '', ), 
                            data = openapi_client.models.bundle_id_capability_create_request_data_relationships_bundle_id_data.BundleIdCapabilityCreateRequest_data_relationships_bundleId_data(
                                type = 'bundleIds', 
                                id = '', ), ), 
                        devices = openapi_client.models.profile_relationships_devices.Profile_relationships_devices(
                            meta = openapi_client.models.paging_information.PagingInformation(
                                paging = openapi_client.models.paging_information_paging.PagingInformation_paging(
                                    total = 56, 
                                    limit = 56, 
                                    next_cursor = '', ), ), ), 
                        certificates = openapi_client.models.merchant_id_relationships_certificates.MerchantId_relationships_certificates(), ), 
                    links = openapi_client.models.resource_links.ResourceLinks(
                        self = '', ), ),
                links = openapi_client.models.document_links.DocumentLinks(
                    self = '', ),
        )
        """

    def testProfileResponse(self):
        """Test ProfileResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
