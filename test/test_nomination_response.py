# coding: utf-8

"""
    App Store Connect API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.nomination_response import NominationResponse

class TestNominationResponse(unittest.TestCase):
    """NominationResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> NominationResponse:
        """Test NominationResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `NominationResponse`
        """
        model = NominationResponse()
        if include_optional:
            return NominationResponse(
                data = openapi_client.models.nomination.Nomination(
                    type = 'nominations', 
                    id = '', 
                    attributes = openapi_client.models.nomination_attributes.Nomination_attributes(
                        name = '', 
                        type = 'APP_LAUNCH', 
                        description = '', 
                        created_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        last_modified_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        submitted_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        state = 'DRAFT', 
                        publish_start_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        publish_end_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        device_families = [
                            'IPHONE'
                            ], 
                        locales = [
                            ''
                            ], 
                        supplemental_materials_uris = [
                            ''
                            ], 
                        has_in_app_events = True, 
                        launch_in_select_markets_first = True, 
                        notes = '', 
                        pre_order_enabled = True, ), 
                    relationships = openapi_client.models.nomination_relationships.Nomination_relationships(
                        related_apps = openapi_client.models.in_app_purchase_relationships_apps.InAppPurchase_relationships_apps(
                            meta = openapi_client.models.paging_information.PagingInformation(
                                paging = openapi_client.models.paging_information_paging.PagingInformation_paging(
                                    total = 56, 
                                    limit = 56, 
                                    next_cursor = '', ), ), 
                            data = [
                                openapi_client.models.accessibility_declaration_create_request_data_relationships_app_data.AccessibilityDeclarationCreateRequest_data_relationships_app_data(
                                    type = 'apps', 
                                    id = '', )
                                ], ), 
                        created_by_actor = openapi_client.models.nomination_relationships_created_by_actor.Nomination_relationships_createdByActor(), 
                        last_modified_by_actor = openapi_client.models.nomination_relationships_created_by_actor.Nomination_relationships_createdByActor(), 
                        submitted_by_actor = , 
                        in_app_events = openapi_client.models.nomination_relationships_in_app_events.Nomination_relationships_inAppEvents(), 
                        supported_territories = openapi_client.models.nomination_relationships_supported_territories.Nomination_relationships_supportedTerritories(), ), 
                    links = openapi_client.models.resource_links.ResourceLinks(
                        self = '', ), ),
                included = [
                    null
                    ],
                links = openapi_client.models.document_links.DocumentLinks(
                    self = '', )
            )
        else:
            return NominationResponse(
                data = openapi_client.models.nomination.Nomination(
                    type = 'nominations', 
                    id = '', 
                    attributes = openapi_client.models.nomination_attributes.Nomination_attributes(
                        name = '', 
                        type = 'APP_LAUNCH', 
                        description = '', 
                        created_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        last_modified_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        submitted_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        state = 'DRAFT', 
                        publish_start_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        publish_end_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        device_families = [
                            'IPHONE'
                            ], 
                        locales = [
                            ''
                            ], 
                        supplemental_materials_uris = [
                            ''
                            ], 
                        has_in_app_events = True, 
                        launch_in_select_markets_first = True, 
                        notes = '', 
                        pre_order_enabled = True, ), 
                    relationships = openapi_client.models.nomination_relationships.Nomination_relationships(
                        related_apps = openapi_client.models.in_app_purchase_relationships_apps.InAppPurchase_relationships_apps(
                            meta = openapi_client.models.paging_information.PagingInformation(
                                paging = openapi_client.models.paging_information_paging.PagingInformation_paging(
                                    total = 56, 
                                    limit = 56, 
                                    next_cursor = '', ), ), 
                            data = [
                                openapi_client.models.accessibility_declaration_create_request_data_relationships_app_data.AccessibilityDeclarationCreateRequest_data_relationships_app_data(
                                    type = 'apps', 
                                    id = '', )
                                ], ), 
                        created_by_actor = openapi_client.models.nomination_relationships_created_by_actor.Nomination_relationships_createdByActor(), 
                        last_modified_by_actor = openapi_client.models.nomination_relationships_created_by_actor.Nomination_relationships_createdByActor(), 
                        submitted_by_actor = , 
                        in_app_events = openapi_client.models.nomination_relationships_in_app_events.Nomination_relationships_inAppEvents(), 
                        supported_territories = openapi_client.models.nomination_relationships_supported_territories.Nomination_relationships_supportedTerritories(), ), 
                    links = openapi_client.models.resource_links.ResourceLinks(
                        self = '', ), ),
                links = openapi_client.models.document_links.DocumentLinks(
                    self = '', ),
        )
        """

    def testNominationResponse(self):
        """Test NominationResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
