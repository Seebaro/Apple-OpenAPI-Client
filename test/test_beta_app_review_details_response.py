# coding: utf-8

"""
    App Store Connect API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.beta_app_review_details_response import BetaAppReviewDetailsResponse

class TestBetaAppReviewDetailsResponse(unittest.TestCase):
    """BetaAppReviewDetailsResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> BetaAppReviewDetailsResponse:
        """Test BetaAppReviewDetailsResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `BetaAppReviewDetailsResponse`
        """
        model = BetaAppReviewDetailsResponse()
        if include_optional:
            return BetaAppReviewDetailsResponse(
                data = [
                    openapi_client.models.beta_app_review_detail.BetaAppReviewDetail(
                        type = 'betaAppReviewDetails', 
                        id = '', 
                        attributes = openapi_client.models.app_store_review_detail_attributes.AppStoreReviewDetail_attributes(
                            contact_first_name = '', 
                            contact_last_name = '', 
                            contact_phone = '', 
                            contact_email = '', 
                            demo_account_name = '', 
                            demo_account_password = '', 
                            demo_account_required = True, 
                            notes = '', ), 
                        relationships = openapi_client.models.beta_app_localization_relationships.BetaAppLocalization_relationships(
                            app = openapi_client.models.beta_app_localization_relationships_app.BetaAppLocalization_relationships_app(
                                links = openapi_client.models.relationship_links.RelationshipLinks(
                                    self = '', 
                                    related = '', ), 
                                data = openapi_client.models.accessibility_declaration_create_request_data_relationships_app_data.AccessibilityDeclarationCreateRequest_data_relationships_app_data(
                                    type = 'apps', 
                                    id = '', ), ), ), 
                        links = openapi_client.models.resource_links.ResourceLinks(
                            self = '', ), )
                    ],
                included = [
                    openapi_client.models.app.App(
                        type = 'apps', 
                        id = '', 
                        attributes = openapi_client.models.app_attributes.App_attributes(
                            accessibility_url = '', 
                            name = '', 
                            bundle_id = '', 
                            sku = '', 
                            primary_locale = '', 
                            is_or_ever_was_made_for_kids = True, 
                            subscription_status_url = '', 
                            subscription_status_url_version = 'V1', 
                            subscription_status_url_for_sandbox = '', 
                            subscription_status_url_version_for_sandbox = 'V1', 
                            content_rights_declaration = 'DOES_NOT_USE_THIRD_PARTY_CONTENT', 
                            streamlined_purchasing_enabled = True, ), 
                        relationships = openapi_client.models.app_relationships.App_relationships(
                            accessibility_declarations = openapi_client.models.analytics_report_instance_relationships_segments.AnalyticsReportInstance_relationships_segments(
                                links = openapi_client.models.relationship_links.RelationshipLinks(
                                    self = '', 
                                    related = '', ), ), 
                            app_encryption_declarations = openapi_client.models.app_relationships_app_encryption_declarations.App_relationships_appEncryptionDeclarations(
                                meta = openapi_client.models.paging_information.PagingInformation(
                                    paging = openapi_client.models.paging_information_paging.PagingInformation_paging(
                                        total = 56, 
                                        limit = 56, 
                                        next_cursor = '', ), ), 
                                data = [
                                    openapi_client.models.app_encryption_declaration_document_create_request_data_relationships_app_encryption_declaration_data.AppEncryptionDeclarationDocumentCreateRequest_data_relationships_appEncryptionDeclaration_data(
                                        type = 'appEncryptionDeclarations', 
                                        id = '', )
                                    ], ), 
                            ci_product = openapi_client.models.app_relationships_ci_product.App_relationships_ciProduct(), 
                            beta_testers = openapi_client.models.analytics_report_instance_relationships_segments.AnalyticsReportInstance_relationships_segments(), 
                            beta_groups = openapi_client.models.app_relationships_beta_groups.App_relationships_betaGroups(), 
                            app_store_versions = openapi_client.models.app_relationships_app_store_versions.App_relationships_appStoreVersions(), 
                            pre_release_versions = openapi_client.models.app_relationships_pre_release_versions.App_relationships_preReleaseVersions(), 
                            beta_app_localizations = openapi_client.models.app_relationships_beta_app_localizations.App_relationships_betaAppLocalizations(), 
                            builds = openapi_client.models.app_relationships_builds.App_relationships_builds(), 
                            beta_license_agreement = openapi_client.models.app_relationships_beta_license_agreement.App_relationships_betaLicenseAgreement(), 
                            beta_app_review_detail = openapi_client.models.app_relationships_beta_app_review_detail.App_relationships_betaAppReviewDetail(), 
                            app_infos = openapi_client.models.app_relationships_app_infos.App_relationships_appInfos(), 
                            app_clips = openapi_client.models.app_relationships_app_clips.App_relationships_appClips(), 
                            app_price_points = , 
                            end_user_license_agreement = openapi_client.models.app_relationships_end_user_license_agreement.App_relationships_endUserLicenseAgreement(), 
                            app_price_schedule = , 
                            app_availability_v2 = , 
                            in_app_purchases = openapi_client.models.app_relationships_in_app_purchases.App_relationships_inAppPurchases(), 
                            subscription_groups = openapi_client.models.app_relationships_subscription_groups.App_relationships_subscriptionGroups(), 
                            game_center_enabled_versions = openapi_client.models.app_relationships_game_center_enabled_versions.App_relationships_gameCenterEnabledVersions(), 
                            perf_power_metrics = , 
                            app_custom_product_pages = openapi_client.models.app_relationships_app_custom_product_pages.App_relationships_appCustomProductPages(), 
                            in_app_purchases_v2 = openapi_client.models.app_relationships_in_app_purchases_v2.App_relationships_inAppPurchasesV2(), 
                            promoted_purchases = openapi_client.models.app_relationships_promoted_purchases.App_relationships_promotedPurchases(), 
                            app_events = openapi_client.models.app_relationships_app_events.App_relationships_appEvents(), 
                            review_submissions = openapi_client.models.app_relationships_review_submissions.App_relationships_reviewSubmissions(), 
                            subscription_grace_period = openapi_client.models.app_relationships_subscription_grace_period.App_relationships_subscriptionGracePeriod(), 
                            customer_reviews = , 
                            customer_review_summarizations = , 
                            game_center_detail = openapi_client.models.app_relationships_game_center_detail.App_relationships_gameCenterDetail(), 
                            app_store_version_experiments_v2 = openapi_client.models.app_store_version_relationships_app_store_version_experiments.AppStoreVersion_relationships_appStoreVersionExperiments(), 
                            alternative_distribution_key = , 
                            analytics_report_requests = , 
                            marketplace_search_detail = , 
                            background_assets = , 
                            beta_feedback_screenshot_submissions = , 
                            beta_feedback_crash_submissions = , 
                            webhooks = , ), 
                        links = openapi_client.models.resource_links.ResourceLinks(
                            self = '', ), )
                    ],
                links = openapi_client.models.paged_document_links.PagedDocumentLinks(
                    self = '', 
                    first = '', 
                    next = '', ),
                meta = openapi_client.models.paging_information.PagingInformation(
                    paging = openapi_client.models.paging_information_paging.PagingInformation_paging(
                        total = 56, 
                        limit = 56, 
                        next_cursor = '', ), )
            )
        else:
            return BetaAppReviewDetailsResponse(
                data = [
                    openapi_client.models.beta_app_review_detail.BetaAppReviewDetail(
                        type = 'betaAppReviewDetails', 
                        id = '', 
                        attributes = openapi_client.models.app_store_review_detail_attributes.AppStoreReviewDetail_attributes(
                            contact_first_name = '', 
                            contact_last_name = '', 
                            contact_phone = '', 
                            contact_email = '', 
                            demo_account_name = '', 
                            demo_account_password = '', 
                            demo_account_required = True, 
                            notes = '', ), 
                        relationships = openapi_client.models.beta_app_localization_relationships.BetaAppLocalization_relationships(
                            app = openapi_client.models.beta_app_localization_relationships_app.BetaAppLocalization_relationships_app(
                                links = openapi_client.models.relationship_links.RelationshipLinks(
                                    self = '', 
                                    related = '', ), 
                                data = openapi_client.models.accessibility_declaration_create_request_data_relationships_app_data.AccessibilityDeclarationCreateRequest_data_relationships_app_data(
                                    type = 'apps', 
                                    id = '', ), ), ), 
                        links = openapi_client.models.resource_links.ResourceLinks(
                            self = '', ), )
                    ],
                links = openapi_client.models.paged_document_links.PagedDocumentLinks(
                    self = '', 
                    first = '', 
                    next = '', ),
        )
        """

    def testBetaAppReviewDetailsResponse(self):
        """Test BetaAppReviewDetailsResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
