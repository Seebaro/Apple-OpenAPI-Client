# coding: utf-8

"""
    App Store Connect API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.in_app_purchase_images_response import InAppPurchaseImagesResponse

class TestInAppPurchaseImagesResponse(unittest.TestCase):
    """InAppPurchaseImagesResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> InAppPurchaseImagesResponse:
        """Test InAppPurchaseImagesResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `InAppPurchaseImagesResponse`
        """
        model = InAppPurchaseImagesResponse()
        if include_optional:
            return InAppPurchaseImagesResponse(
                data = [
                    openapi_client.models.in_app_purchase_image.InAppPurchaseImage(
                        type = 'inAppPurchaseImages', 
                        id = '', 
                        attributes = openapi_client.models.in_app_purchase_image_attributes.InAppPurchaseImage_attributes(
                            file_size = 56, 
                            file_name = '', 
                            source_file_checksum = '', 
                            asset_token = '', 
                            image_asset = openapi_client.models.image_asset.ImageAsset(
                                template_url = '', 
                                width = 56, 
                                height = 56, ), 
                            upload_operations = [
                                openapi_client.models.upload_operation.UploadOperation(
                                    method = '', 
                                    url = '', 
                                    length = 56, 
                                    offset = 56, 
                                    request_headers = [
                                        openapi_client.models.http_header.HttpHeader(
                                            name = '', 
                                            value = '', )
                                        ], )
                                ], 
                            state = 'AWAITING_UPLOAD', ), 
                        relationships = openapi_client.models.in_app_purchase_image_relationships.InAppPurchaseImage_relationships(
                            in_app_purchase = openapi_client.models.in_app_purchase_app_store_review_screenshot_relationships_in_app_purchase_v2.InAppPurchaseAppStoreReviewScreenshot_relationships_inAppPurchaseV2(
                                data = openapi_client.models.app_relationships_in_app_purchases_data_inner.App_relationships_inAppPurchases_data_inner(
                                    type = 'inAppPurchases', 
                                    id = '', ), ), ), 
                        links = openapi_client.models.resource_links.ResourceLinks(
                            self = '', ), )
                    ],
                included = [
                    openapi_client.models.in_app_purchase_v2.InAppPurchaseV2(
                        type = 'inAppPurchases', 
                        id = '', 
                        attributes = openapi_client.models.in_app_purchase_v2_attributes.InAppPurchaseV2_attributes(
                            name = '', 
                            product_id = '', 
                            in_app_purchase_type = 'CONSUMABLE', 
                            state = 'MISSING_METADATA', 
                            review_note = '', 
                            family_sharable = True, 
                            content_hosting = True, ), 
                        relationships = openapi_client.models.in_app_purchase_v2_relationships.InAppPurchaseV2_relationships(
                            in_app_purchase_localizations = openapi_client.models.in_app_purchase_v2_relationships_in_app_purchase_localizations.InAppPurchaseV2_relationships_inAppPurchaseLocalizations(
                                links = openapi_client.models.relationship_links.RelationshipLinks(
                                    self = '', 
                                    related = '', ), 
                                meta = openapi_client.models.paging_information.PagingInformation(
                                    paging = openapi_client.models.paging_information_paging.PagingInformation_paging(
                                        total = 56, 
                                        limit = 56, 
                                        next_cursor = '', ), ), 
                                data = [
                                    openapi_client.models.in_app_purchase_v2_relationships_in_app_purchase_localizations_data_inner.InAppPurchaseV2_relationships_inAppPurchaseLocalizations_data_inner(
                                        type = 'inAppPurchaseLocalizations', 
                                        id = '', )
                                    ], ), 
                            price_points = openapi_client.models.in_app_purchase_v2_relationships_price_points.InAppPurchaseV2_relationships_pricePoints(), 
                            content = openapi_client.models.in_app_purchase_v2_relationships_content.InAppPurchaseV2_relationships_content(), 
                            app_store_review_screenshot = openapi_client.models.in_app_purchase_v2_relationships_app_store_review_screenshot.InAppPurchaseV2_relationships_appStoreReviewScreenshot(), 
                            promoted_purchase = openapi_client.models.in_app_purchase_v2_relationships_promoted_purchase.InAppPurchaseV2_relationships_promotedPurchase(), 
                            iap_price_schedule = openapi_client.models.in_app_purchase_v2_relationships_iap_price_schedule.InAppPurchaseV2_relationships_iapPriceSchedule(), 
                            in_app_purchase_availability = openapi_client.models.in_app_purchase_v2_relationships_in_app_purchase_availability.InAppPurchaseV2_relationships_inAppPurchaseAvailability(), 
                            images = openapi_client.models.in_app_purchase_v2_relationships_images.InAppPurchaseV2_relationships_images(), ), 
                        links = openapi_client.models.resource_links.ResourceLinks(
                            self = '', ), )
                    ],
                links = openapi_client.models.paged_document_links.PagedDocumentLinks(
                    self = '', 
                    first = '', 
                    next = '', ),
                meta = openapi_client.models.paging_information.PagingInformation(
                    paging = openapi_client.models.paging_information_paging.PagingInformation_paging(
                        total = 56, 
                        limit = 56, 
                        next_cursor = '', ), )
            )
        else:
            return InAppPurchaseImagesResponse(
                data = [
                    openapi_client.models.in_app_purchase_image.InAppPurchaseImage(
                        type = 'inAppPurchaseImages', 
                        id = '', 
                        attributes = openapi_client.models.in_app_purchase_image_attributes.InAppPurchaseImage_attributes(
                            file_size = 56, 
                            file_name = '', 
                            source_file_checksum = '', 
                            asset_token = '', 
                            image_asset = openapi_client.models.image_asset.ImageAsset(
                                template_url = '', 
                                width = 56, 
                                height = 56, ), 
                            upload_operations = [
                                openapi_client.models.upload_operation.UploadOperation(
                                    method = '', 
                                    url = '', 
                                    length = 56, 
                                    offset = 56, 
                                    request_headers = [
                                        openapi_client.models.http_header.HttpHeader(
                                            name = '', 
                                            value = '', )
                                        ], )
                                ], 
                            state = 'AWAITING_UPLOAD', ), 
                        relationships = openapi_client.models.in_app_purchase_image_relationships.InAppPurchaseImage_relationships(
                            in_app_purchase = openapi_client.models.in_app_purchase_app_store_review_screenshot_relationships_in_app_purchase_v2.InAppPurchaseAppStoreReviewScreenshot_relationships_inAppPurchaseV2(
                                data = openapi_client.models.app_relationships_in_app_purchases_data_inner.App_relationships_inAppPurchases_data_inner(
                                    type = 'inAppPurchases', 
                                    id = '', ), ), ), 
                        links = openapi_client.models.resource_links.ResourceLinks(
                            self = '', ), )
                    ],
                links = openapi_client.models.paged_document_links.PagedDocumentLinks(
                    self = '', 
                    first = '', 
                    next = '', ),
        )
        """

    def testInAppPurchaseImagesResponse(self):
        """Test InAppPurchaseImagesResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
