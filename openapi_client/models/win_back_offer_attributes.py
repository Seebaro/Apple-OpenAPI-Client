# coding: utf-8

"""
    App Store Connect API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.integer_range import IntegerRange
from openapi_client.models.subscription_offer_duration import SubscriptionOfferDuration
from openapi_client.models.subscription_offer_mode import SubscriptionOfferMode
from typing import Optional, Set
from typing_extensions import Self

class WinBackOfferAttributes(BaseModel):
    """
    WinBackOfferAttributes
    """ # noqa: E501
    reference_name: Optional[StrictStr] = Field(default=None, alias="referenceName")
    offer_id: Optional[StrictStr] = Field(default=None, alias="offerId")
    duration: Optional[SubscriptionOfferDuration] = None
    offer_mode: Optional[SubscriptionOfferMode] = Field(default=None, alias="offerMode")
    period_count: Optional[StrictInt] = Field(default=None, alias="periodCount")
    customer_eligibility_paid_subscription_duration_in_months: Optional[StrictInt] = Field(default=None, alias="customerEligibilityPaidSubscriptionDurationInMonths")
    customer_eligibility_time_since_last_subscribed_in_months: Optional[IntegerRange] = Field(default=None, alias="customerEligibilityTimeSinceLastSubscribedInMonths")
    customer_eligibility_wait_between_offers_in_months: Optional[StrictInt] = Field(default=None, alias="customerEligibilityWaitBetweenOffersInMonths")
    start_date: Optional[date] = Field(default=None, alias="startDate")
    end_date: Optional[date] = Field(default=None, alias="endDate")
    priority: Optional[StrictStr] = None
    promotion_intent: Optional[StrictStr] = Field(default=None, alias="promotionIntent")
    __properties: ClassVar[List[str]] = ["referenceName", "offerId", "duration", "offerMode", "periodCount", "customerEligibilityPaidSubscriptionDurationInMonths", "customerEligibilityTimeSinceLastSubscribedInMonths", "customerEligibilityWaitBetweenOffersInMonths", "startDate", "endDate", "priority", "promotionIntent"]

    @field_validator('priority')
    def priority_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['HIGH', 'NORMAL']):
            raise ValueError("must be one of enum values ('HIGH', 'NORMAL')")
        return value

    @field_validator('promotion_intent')
    def promotion_intent_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NOT_PROMOTED', 'USE_AUTO_GENERATED_ASSETS']):
            raise ValueError("must be one of enum values ('NOT_PROMOTED', 'USE_AUTO_GENERATED_ASSETS')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WinBackOfferAttributes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of customer_eligibility_time_since_last_subscribed_in_months
        if self.customer_eligibility_time_since_last_subscribed_in_months:
            _dict['customerEligibilityTimeSinceLastSubscribedInMonths'] = self.customer_eligibility_time_since_last_subscribed_in_months.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WinBackOfferAttributes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "referenceName": obj.get("referenceName"),
            "offerId": obj.get("offerId"),
            "duration": obj.get("duration"),
            "offerMode": obj.get("offerMode"),
            "periodCount": obj.get("periodCount"),
            "customerEligibilityPaidSubscriptionDurationInMonths": obj.get("customerEligibilityPaidSubscriptionDurationInMonths"),
            "customerEligibilityTimeSinceLastSubscribedInMonths": IntegerRange.from_dict(obj["customerEligibilityTimeSinceLastSubscribedInMonths"]) if obj.get("customerEligibilityTimeSinceLastSubscribedInMonths") is not None else None,
            "customerEligibilityWaitBetweenOffersInMonths": obj.get("customerEligibilityWaitBetweenOffersInMonths"),
            "startDate": obj.get("startDate"),
            "endDate": obj.get("endDate"),
            "priority": obj.get("priority"),
            "promotionIntent": obj.get("promotionIntent")
        })
        return _obj


