# coding: utf-8

"""
    App Store Connect API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.subscription_status_url_version import SubscriptionStatusUrlVersion
from typing import Optional, Set
from typing_extensions import Self

class AppAttributes(BaseModel):
    """
    AppAttributes
    """ # noqa: E501
    accessibility_url: Optional[StrictStr] = Field(default=None, alias="accessibilityUrl")
    name: Optional[StrictStr] = None
    bundle_id: Optional[StrictStr] = Field(default=None, alias="bundleId")
    sku: Optional[StrictStr] = None
    primary_locale: Optional[StrictStr] = Field(default=None, alias="primaryLocale")
    is_or_ever_was_made_for_kids: Optional[StrictBool] = Field(default=None, alias="isOrEverWasMadeForKids")
    subscription_status_url: Optional[StrictStr] = Field(default=None, alias="subscriptionStatusUrl")
    subscription_status_url_version: Optional[SubscriptionStatusUrlVersion] = Field(default=None, alias="subscriptionStatusUrlVersion")
    subscription_status_url_for_sandbox: Optional[StrictStr] = Field(default=None, alias="subscriptionStatusUrlForSandbox")
    subscription_status_url_version_for_sandbox: Optional[SubscriptionStatusUrlVersion] = Field(default=None, alias="subscriptionStatusUrlVersionForSandbox")
    content_rights_declaration: Optional[StrictStr] = Field(default=None, alias="contentRightsDeclaration")
    streamlined_purchasing_enabled: Optional[StrictBool] = Field(default=None, alias="streamlinedPurchasingEnabled")
    __properties: ClassVar[List[str]] = ["accessibilityUrl", "name", "bundleId", "sku", "primaryLocale", "isOrEverWasMadeForKids", "subscriptionStatusUrl", "subscriptionStatusUrlVersion", "subscriptionStatusUrlForSandbox", "subscriptionStatusUrlVersionForSandbox", "contentRightsDeclaration", "streamlinedPurchasingEnabled"]

    @field_validator('content_rights_declaration')
    def content_rights_declaration_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DOES_NOT_USE_THIRD_PARTY_CONTENT', 'USES_THIRD_PARTY_CONTENT']):
            raise ValueError("must be one of enum values ('DOES_NOT_USE_THIRD_PARTY_CONTENT', 'USES_THIRD_PARTY_CONTENT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AppAttributes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AppAttributes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accessibilityUrl": obj.get("accessibilityUrl"),
            "name": obj.get("name"),
            "bundleId": obj.get("bundleId"),
            "sku": obj.get("sku"),
            "primaryLocale": obj.get("primaryLocale"),
            "isOrEverWasMadeForKids": obj.get("isOrEverWasMadeForKids"),
            "subscriptionStatusUrl": obj.get("subscriptionStatusUrl"),
            "subscriptionStatusUrlVersion": obj.get("subscriptionStatusUrlVersion"),
            "subscriptionStatusUrlForSandbox": obj.get("subscriptionStatusUrlForSandbox"),
            "subscriptionStatusUrlVersionForSandbox": obj.get("subscriptionStatusUrlVersionForSandbox"),
            "contentRightsDeclaration": obj.get("contentRightsDeclaration"),
            "streamlinedPurchasingEnabled": obj.get("streamlinedPurchasingEnabled")
        })
        return _obj


