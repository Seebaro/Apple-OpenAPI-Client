# coding: utf-8

"""
    App Store Connect API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.build_audience_type import BuildAudienceType
from openapi_client.models.image_asset import ImageAsset
from typing import Optional, Set
from typing_extensions import Self

class BuildAttributes(BaseModel):
    """
    BuildAttributes
    """ # noqa: E501
    version: Optional[StrictStr] = None
    uploaded_date: Optional[datetime] = Field(default=None, alias="uploadedDate")
    expiration_date: Optional[datetime] = Field(default=None, alias="expirationDate")
    expired: Optional[StrictBool] = None
    min_os_version: Optional[StrictStr] = Field(default=None, alias="minOsVersion")
    ls_minimum_system_version: Optional[StrictStr] = Field(default=None, alias="lsMinimumSystemVersion")
    computed_min_mac_os_version: Optional[StrictStr] = Field(default=None, alias="computedMinMacOsVersion")
    computed_min_vision_os_version: Optional[StrictStr] = Field(default=None, alias="computedMinVisionOsVersion")
    icon_asset_token: Optional[ImageAsset] = Field(default=None, alias="iconAssetToken")
    processing_state: Optional[StrictStr] = Field(default=None, alias="processingState")
    build_audience_type: Optional[BuildAudienceType] = Field(default=None, alias="buildAudienceType")
    uses_non_exempt_encryption: Optional[StrictBool] = Field(default=None, alias="usesNonExemptEncryption")
    __properties: ClassVar[List[str]] = ["version", "uploadedDate", "expirationDate", "expired", "minOsVersion", "lsMinimumSystemVersion", "computedMinMacOsVersion", "computedMinVisionOsVersion", "iconAssetToken", "processingState", "buildAudienceType", "usesNonExemptEncryption"]

    @field_validator('processing_state')
    def processing_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PROCESSING', 'FAILED', 'INVALID', 'VALID']):
            raise ValueError("must be one of enum values ('PROCESSING', 'FAILED', 'INVALID', 'VALID')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BuildAttributes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of icon_asset_token
        if self.icon_asset_token:
            _dict['iconAssetToken'] = self.icon_asset_token.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BuildAttributes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "version": obj.get("version"),
            "uploadedDate": obj.get("uploadedDate"),
            "expirationDate": obj.get("expirationDate"),
            "expired": obj.get("expired"),
            "minOsVersion": obj.get("minOsVersion"),
            "lsMinimumSystemVersion": obj.get("lsMinimumSystemVersion"),
            "computedMinMacOsVersion": obj.get("computedMinMacOsVersion"),
            "computedMinVisionOsVersion": obj.get("computedMinVisionOsVersion"),
            "iconAssetToken": ImageAsset.from_dict(obj["iconAssetToken"]) if obj.get("iconAssetToken") is not None else None,
            "processingState": obj.get("processingState"),
            "buildAudienceType": obj.get("buildAudienceType"),
            "usesNonExemptEncryption": obj.get("usesNonExemptEncryption")
        })
        return _obj


