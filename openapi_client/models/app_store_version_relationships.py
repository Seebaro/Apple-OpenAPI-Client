# coding: utf-8

"""
    App Store Connect API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.alternative_distribution_key_create_request_data_relationships_app import AlternativeDistributionKeyCreateRequestDataRelationshipsApp
from openapi_client.models.analytics_report_instance_relationships_segments import AnalyticsReportInstanceRelationshipsSegments
from openapi_client.models.app_store_version_relationships_age_rating_declaration import AppStoreVersionRelationshipsAgeRatingDeclaration
from openapi_client.models.app_store_version_relationships_alternative_distribution_package import AppStoreVersionRelationshipsAlternativeDistributionPackage
from openapi_client.models.app_store_version_relationships_app_clip_default_experience import AppStoreVersionRelationshipsAppClipDefaultExperience
from openapi_client.models.app_store_version_relationships_app_store_review_detail import AppStoreVersionRelationshipsAppStoreReviewDetail
from openapi_client.models.app_store_version_relationships_app_store_version_experiments import AppStoreVersionRelationshipsAppStoreVersionExperiments
from openapi_client.models.app_store_version_relationships_app_store_version_localizations import AppStoreVersionRelationshipsAppStoreVersionLocalizations
from openapi_client.models.app_store_version_relationships_app_store_version_phased_release import AppStoreVersionRelationshipsAppStoreVersionPhasedRelease
from openapi_client.models.app_store_version_relationships_app_store_version_submission import AppStoreVersionRelationshipsAppStoreVersionSubmission
from openapi_client.models.app_store_version_relationships_build import AppStoreVersionRelationshipsBuild
from openapi_client.models.app_store_version_relationships_game_center_app_version import AppStoreVersionRelationshipsGameCenterAppVersion
from openapi_client.models.app_store_version_relationships_routing_app_coverage import AppStoreVersionRelationshipsRoutingAppCoverage
from typing import Optional, Set
from typing_extensions import Self

class AppStoreVersionRelationships(BaseModel):
    """
    AppStoreVersionRelationships
    """ # noqa: E501
    app: Optional[AlternativeDistributionKeyCreateRequestDataRelationshipsApp] = None
    age_rating_declaration: Optional[AppStoreVersionRelationshipsAgeRatingDeclaration] = Field(default=None, alias="ageRatingDeclaration")
    app_store_version_localizations: Optional[AppStoreVersionRelationshipsAppStoreVersionLocalizations] = Field(default=None, alias="appStoreVersionLocalizations")
    build: Optional[AppStoreVersionRelationshipsBuild] = None
    app_store_version_phased_release: Optional[AppStoreVersionRelationshipsAppStoreVersionPhasedRelease] = Field(default=None, alias="appStoreVersionPhasedRelease")
    game_center_app_version: Optional[AppStoreVersionRelationshipsGameCenterAppVersion] = Field(default=None, alias="gameCenterAppVersion")
    routing_app_coverage: Optional[AppStoreVersionRelationshipsRoutingAppCoverage] = Field(default=None, alias="routingAppCoverage")
    app_store_review_detail: Optional[AppStoreVersionRelationshipsAppStoreReviewDetail] = Field(default=None, alias="appStoreReviewDetail")
    app_store_version_submission: Optional[AppStoreVersionRelationshipsAppStoreVersionSubmission] = Field(default=None, alias="appStoreVersionSubmission")
    app_clip_default_experience: Optional[AppStoreVersionRelationshipsAppClipDefaultExperience] = Field(default=None, alias="appClipDefaultExperience")
    app_store_version_experiments: Optional[AppStoreVersionRelationshipsAppStoreVersionExperiments] = Field(default=None, alias="appStoreVersionExperiments")
    app_store_version_experiments_v2: Optional[AppStoreVersionRelationshipsAppStoreVersionExperiments] = Field(default=None, alias="appStoreVersionExperimentsV2")
    customer_reviews: Optional[AnalyticsReportInstanceRelationshipsSegments] = Field(default=None, alias="customerReviews")
    alternative_distribution_package: Optional[AppStoreVersionRelationshipsAlternativeDistributionPackage] = Field(default=None, alias="alternativeDistributionPackage")
    __properties: ClassVar[List[str]] = ["app", "ageRatingDeclaration", "appStoreVersionLocalizations", "build", "appStoreVersionPhasedRelease", "gameCenterAppVersion", "routingAppCoverage", "appStoreReviewDetail", "appStoreVersionSubmission", "appClipDefaultExperience", "appStoreVersionExperiments", "appStoreVersionExperimentsV2", "customerReviews", "alternativeDistributionPackage"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AppStoreVersionRelationships from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of app
        if self.app:
            _dict['app'] = self.app.to_dict()
        # override the default output from pydantic by calling `to_dict()` of age_rating_declaration
        if self.age_rating_declaration:
            _dict['ageRatingDeclaration'] = self.age_rating_declaration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of app_store_version_localizations
        if self.app_store_version_localizations:
            _dict['appStoreVersionLocalizations'] = self.app_store_version_localizations.to_dict()
        # override the default output from pydantic by calling `to_dict()` of build
        if self.build:
            _dict['build'] = self.build.to_dict()
        # override the default output from pydantic by calling `to_dict()` of app_store_version_phased_release
        if self.app_store_version_phased_release:
            _dict['appStoreVersionPhasedRelease'] = self.app_store_version_phased_release.to_dict()
        # override the default output from pydantic by calling `to_dict()` of game_center_app_version
        if self.game_center_app_version:
            _dict['gameCenterAppVersion'] = self.game_center_app_version.to_dict()
        # override the default output from pydantic by calling `to_dict()` of routing_app_coverage
        if self.routing_app_coverage:
            _dict['routingAppCoverage'] = self.routing_app_coverage.to_dict()
        # override the default output from pydantic by calling `to_dict()` of app_store_review_detail
        if self.app_store_review_detail:
            _dict['appStoreReviewDetail'] = self.app_store_review_detail.to_dict()
        # override the default output from pydantic by calling `to_dict()` of app_store_version_submission
        if self.app_store_version_submission:
            _dict['appStoreVersionSubmission'] = self.app_store_version_submission.to_dict()
        # override the default output from pydantic by calling `to_dict()` of app_clip_default_experience
        if self.app_clip_default_experience:
            _dict['appClipDefaultExperience'] = self.app_clip_default_experience.to_dict()
        # override the default output from pydantic by calling `to_dict()` of app_store_version_experiments
        if self.app_store_version_experiments:
            _dict['appStoreVersionExperiments'] = self.app_store_version_experiments.to_dict()
        # override the default output from pydantic by calling `to_dict()` of app_store_version_experiments_v2
        if self.app_store_version_experiments_v2:
            _dict['appStoreVersionExperimentsV2'] = self.app_store_version_experiments_v2.to_dict()
        # override the default output from pydantic by calling `to_dict()` of customer_reviews
        if self.customer_reviews:
            _dict['customerReviews'] = self.customer_reviews.to_dict()
        # override the default output from pydantic by calling `to_dict()` of alternative_distribution_package
        if self.alternative_distribution_package:
            _dict['alternativeDistributionPackage'] = self.alternative_distribution_package.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AppStoreVersionRelationships from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "app": AlternativeDistributionKeyCreateRequestDataRelationshipsApp.from_dict(obj["app"]) if obj.get("app") is not None else None,
            "ageRatingDeclaration": AppStoreVersionRelationshipsAgeRatingDeclaration.from_dict(obj["ageRatingDeclaration"]) if obj.get("ageRatingDeclaration") is not None else None,
            "appStoreVersionLocalizations": AppStoreVersionRelationshipsAppStoreVersionLocalizations.from_dict(obj["appStoreVersionLocalizations"]) if obj.get("appStoreVersionLocalizations") is not None else None,
            "build": AppStoreVersionRelationshipsBuild.from_dict(obj["build"]) if obj.get("build") is not None else None,
            "appStoreVersionPhasedRelease": AppStoreVersionRelationshipsAppStoreVersionPhasedRelease.from_dict(obj["appStoreVersionPhasedRelease"]) if obj.get("appStoreVersionPhasedRelease") is not None else None,
            "gameCenterAppVersion": AppStoreVersionRelationshipsGameCenterAppVersion.from_dict(obj["gameCenterAppVersion"]) if obj.get("gameCenterAppVersion") is not None else None,
            "routingAppCoverage": AppStoreVersionRelationshipsRoutingAppCoverage.from_dict(obj["routingAppCoverage"]) if obj.get("routingAppCoverage") is not None else None,
            "appStoreReviewDetail": AppStoreVersionRelationshipsAppStoreReviewDetail.from_dict(obj["appStoreReviewDetail"]) if obj.get("appStoreReviewDetail") is not None else None,
            "appStoreVersionSubmission": AppStoreVersionRelationshipsAppStoreVersionSubmission.from_dict(obj["appStoreVersionSubmission"]) if obj.get("appStoreVersionSubmission") is not None else None,
            "appClipDefaultExperience": AppStoreVersionRelationshipsAppClipDefaultExperience.from_dict(obj["appClipDefaultExperience"]) if obj.get("appClipDefaultExperience") is not None else None,
            "appStoreVersionExperiments": AppStoreVersionRelationshipsAppStoreVersionExperiments.from_dict(obj["appStoreVersionExperiments"]) if obj.get("appStoreVersionExperiments") is not None else None,
            "appStoreVersionExperimentsV2": AppStoreVersionRelationshipsAppStoreVersionExperiments.from_dict(obj["appStoreVersionExperimentsV2"]) if obj.get("appStoreVersionExperimentsV2") is not None else None,
            "customerReviews": AnalyticsReportInstanceRelationshipsSegments.from_dict(obj["customerReviews"]) if obj.get("customerReviews") is not None else None,
            "alternativeDistributionPackage": AppStoreVersionRelationshipsAlternativeDistributionPackage.from_dict(obj["alternativeDistributionPackage"]) if obj.get("alternativeDistributionPackage") is not None else None
        })
        return _obj


