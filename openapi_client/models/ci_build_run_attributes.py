# coding: utf-8

"""
    App Store Connect API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.ci_build_run_attributes_source_commit import CiBuildRunAttributesSourceCommit
from openapi_client.models.ci_completion_status import CiCompletionStatus
from openapi_client.models.ci_execution_progress import CiExecutionProgress
from openapi_client.models.ci_issue_counts import CiIssueCounts
from typing import Optional, Set
from typing_extensions import Self

class CiBuildRunAttributes(BaseModel):
    """
    CiBuildRunAttributes
    """ # noqa: E501
    number: Optional[StrictInt] = None
    created_date: Optional[datetime] = Field(default=None, alias="createdDate")
    started_date: Optional[datetime] = Field(default=None, alias="startedDate")
    finished_date: Optional[datetime] = Field(default=None, alias="finishedDate")
    source_commit: Optional[CiBuildRunAttributesSourceCommit] = Field(default=None, alias="sourceCommit")
    destination_commit: Optional[CiBuildRunAttributesSourceCommit] = Field(default=None, alias="destinationCommit")
    is_pull_request_build: Optional[StrictBool] = Field(default=None, alias="isPullRequestBuild")
    issue_counts: Optional[CiIssueCounts] = Field(default=None, alias="issueCounts")
    execution_progress: Optional[CiExecutionProgress] = Field(default=None, alias="executionProgress")
    completion_status: Optional[CiCompletionStatus] = Field(default=None, alias="completionStatus")
    start_reason: Optional[StrictStr] = Field(default=None, alias="startReason")
    cancel_reason: Optional[StrictStr] = Field(default=None, alias="cancelReason")
    __properties: ClassVar[List[str]] = ["number", "createdDate", "startedDate", "finishedDate", "sourceCommit", "destinationCommit", "isPullRequestBuild", "issueCounts", "executionProgress", "completionStatus", "startReason", "cancelReason"]

    @field_validator('start_reason')
    def start_reason_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['GIT_REF_CHANGE', 'MANUAL', 'MANUAL_REBUILD', 'PULL_REQUEST_OPEN', 'PULL_REQUEST_UPDATE', 'SCHEDULE']):
            raise ValueError("must be one of enum values ('GIT_REF_CHANGE', 'MANUAL', 'MANUAL_REBUILD', 'PULL_REQUEST_OPEN', 'PULL_REQUEST_UPDATE', 'SCHEDULE')")
        return value

    @field_validator('cancel_reason')
    def cancel_reason_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['AUTOMATICALLY_BY_NEWER_BUILD', 'MANUALLY_BY_USER']):
            raise ValueError("must be one of enum values ('AUTOMATICALLY_BY_NEWER_BUILD', 'MANUALLY_BY_USER')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CiBuildRunAttributes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of source_commit
        if self.source_commit:
            _dict['sourceCommit'] = self.source_commit.to_dict()
        # override the default output from pydantic by calling `to_dict()` of destination_commit
        if self.destination_commit:
            _dict['destinationCommit'] = self.destination_commit.to_dict()
        # override the default output from pydantic by calling `to_dict()` of issue_counts
        if self.issue_counts:
            _dict['issueCounts'] = self.issue_counts.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CiBuildRunAttributes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "number": obj.get("number"),
            "createdDate": obj.get("createdDate"),
            "startedDate": obj.get("startedDate"),
            "finishedDate": obj.get("finishedDate"),
            "sourceCommit": CiBuildRunAttributesSourceCommit.from_dict(obj["sourceCommit"]) if obj.get("sourceCommit") is not None else None,
            "destinationCommit": CiBuildRunAttributesSourceCommit.from_dict(obj["destinationCommit"]) if obj.get("destinationCommit") is not None else None,
            "isPullRequestBuild": obj.get("isPullRequestBuild"),
            "issueCounts": CiIssueCounts.from_dict(obj["issueCounts"]) if obj.get("issueCounts") is not None else None,
            "executionProgress": obj.get("executionProgress"),
            "completionStatus": obj.get("completionStatus"),
            "startReason": obj.get("startReason"),
            "cancelReason": obj.get("cancelReason")
        })
        return _obj


