# coding: utf-8

"""
    App Store Connect API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.analytics_report_instance_relationships_segments import AnalyticsReportInstanceRelationshipsSegments
from openapi_client.models.in_app_purchase_v2_relationships_promoted_purchase import InAppPurchaseV2RelationshipsPromotedPurchase
from openapi_client.models.subscription_group_localization_relationships_subscription_group import SubscriptionGroupLocalizationRelationshipsSubscriptionGroup
from openapi_client.models.subscription_relationships_app_store_review_screenshot import SubscriptionRelationshipsAppStoreReviewScreenshot
from openapi_client.models.subscription_relationships_images import SubscriptionRelationshipsImages
from openapi_client.models.subscription_relationships_introductory_offers import SubscriptionRelationshipsIntroductoryOffers
from openapi_client.models.subscription_relationships_offer_codes import SubscriptionRelationshipsOfferCodes
from openapi_client.models.subscription_relationships_prices import SubscriptionRelationshipsPrices
from openapi_client.models.subscription_relationships_promotional_offers import SubscriptionRelationshipsPromotionalOffers
from openapi_client.models.subscription_relationships_subscription_availability import SubscriptionRelationshipsSubscriptionAvailability
from openapi_client.models.subscription_relationships_subscription_localizations import SubscriptionRelationshipsSubscriptionLocalizations
from openapi_client.models.subscription_relationships_win_back_offers import SubscriptionRelationshipsWinBackOffers
from typing import Optional, Set
from typing_extensions import Self

class SubscriptionRelationships(BaseModel):
    """
    SubscriptionRelationships
    """ # noqa: E501
    subscription_localizations: Optional[SubscriptionRelationshipsSubscriptionLocalizations] = Field(default=None, alias="subscriptionLocalizations")
    app_store_review_screenshot: Optional[SubscriptionRelationshipsAppStoreReviewScreenshot] = Field(default=None, alias="appStoreReviewScreenshot")
    group: Optional[SubscriptionGroupLocalizationRelationshipsSubscriptionGroup] = None
    introductory_offers: Optional[SubscriptionRelationshipsIntroductoryOffers] = Field(default=None, alias="introductoryOffers")
    promotional_offers: Optional[SubscriptionRelationshipsPromotionalOffers] = Field(default=None, alias="promotionalOffers")
    offer_codes: Optional[SubscriptionRelationshipsOfferCodes] = Field(default=None, alias="offerCodes")
    prices: Optional[SubscriptionRelationshipsPrices] = None
    price_points: Optional[AnalyticsReportInstanceRelationshipsSegments] = Field(default=None, alias="pricePoints")
    promoted_purchase: Optional[InAppPurchaseV2RelationshipsPromotedPurchase] = Field(default=None, alias="promotedPurchase")
    subscription_availability: Optional[SubscriptionRelationshipsSubscriptionAvailability] = Field(default=None, alias="subscriptionAvailability")
    win_back_offers: Optional[SubscriptionRelationshipsWinBackOffers] = Field(default=None, alias="winBackOffers")
    images: Optional[SubscriptionRelationshipsImages] = None
    __properties: ClassVar[List[str]] = ["subscriptionLocalizations", "appStoreReviewScreenshot", "group", "introductoryOffers", "promotionalOffers", "offerCodes", "prices", "pricePoints", "promotedPurchase", "subscriptionAvailability", "winBackOffers", "images"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SubscriptionRelationships from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of subscription_localizations
        if self.subscription_localizations:
            _dict['subscriptionLocalizations'] = self.subscription_localizations.to_dict()
        # override the default output from pydantic by calling `to_dict()` of app_store_review_screenshot
        if self.app_store_review_screenshot:
            _dict['appStoreReviewScreenshot'] = self.app_store_review_screenshot.to_dict()
        # override the default output from pydantic by calling `to_dict()` of group
        if self.group:
            _dict['group'] = self.group.to_dict()
        # override the default output from pydantic by calling `to_dict()` of introductory_offers
        if self.introductory_offers:
            _dict['introductoryOffers'] = self.introductory_offers.to_dict()
        # override the default output from pydantic by calling `to_dict()` of promotional_offers
        if self.promotional_offers:
            _dict['promotionalOffers'] = self.promotional_offers.to_dict()
        # override the default output from pydantic by calling `to_dict()` of offer_codes
        if self.offer_codes:
            _dict['offerCodes'] = self.offer_codes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of prices
        if self.prices:
            _dict['prices'] = self.prices.to_dict()
        # override the default output from pydantic by calling `to_dict()` of price_points
        if self.price_points:
            _dict['pricePoints'] = self.price_points.to_dict()
        # override the default output from pydantic by calling `to_dict()` of promoted_purchase
        if self.promoted_purchase:
            _dict['promotedPurchase'] = self.promoted_purchase.to_dict()
        # override the default output from pydantic by calling `to_dict()` of subscription_availability
        if self.subscription_availability:
            _dict['subscriptionAvailability'] = self.subscription_availability.to_dict()
        # override the default output from pydantic by calling `to_dict()` of win_back_offers
        if self.win_back_offers:
            _dict['winBackOffers'] = self.win_back_offers.to_dict()
        # override the default output from pydantic by calling `to_dict()` of images
        if self.images:
            _dict['images'] = self.images.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SubscriptionRelationships from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "subscriptionLocalizations": SubscriptionRelationshipsSubscriptionLocalizations.from_dict(obj["subscriptionLocalizations"]) if obj.get("subscriptionLocalizations") is not None else None,
            "appStoreReviewScreenshot": SubscriptionRelationshipsAppStoreReviewScreenshot.from_dict(obj["appStoreReviewScreenshot"]) if obj.get("appStoreReviewScreenshot") is not None else None,
            "group": SubscriptionGroupLocalizationRelationshipsSubscriptionGroup.from_dict(obj["group"]) if obj.get("group") is not None else None,
            "introductoryOffers": SubscriptionRelationshipsIntroductoryOffers.from_dict(obj["introductoryOffers"]) if obj.get("introductoryOffers") is not None else None,
            "promotionalOffers": SubscriptionRelationshipsPromotionalOffers.from_dict(obj["promotionalOffers"]) if obj.get("promotionalOffers") is not None else None,
            "offerCodes": SubscriptionRelationshipsOfferCodes.from_dict(obj["offerCodes"]) if obj.get("offerCodes") is not None else None,
            "prices": SubscriptionRelationshipsPrices.from_dict(obj["prices"]) if obj.get("prices") is not None else None,
            "pricePoints": AnalyticsReportInstanceRelationshipsSegments.from_dict(obj["pricePoints"]) if obj.get("pricePoints") is not None else None,
            "promotedPurchase": InAppPurchaseV2RelationshipsPromotedPurchase.from_dict(obj["promotedPurchase"]) if obj.get("promotedPurchase") is not None else None,
            "subscriptionAvailability": SubscriptionRelationshipsSubscriptionAvailability.from_dict(obj["subscriptionAvailability"]) if obj.get("subscriptionAvailability") is not None else None,
            "winBackOffers": SubscriptionRelationshipsWinBackOffers.from_dict(obj["winBackOffers"]) if obj.get("winBackOffers") is not None else None,
            "images": SubscriptionRelationshipsImages.from_dict(obj["images"]) if obj.get("images") is not None else None
        })
        return _obj


