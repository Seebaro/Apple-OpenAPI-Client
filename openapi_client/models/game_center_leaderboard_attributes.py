# coding: utf-8

"""
    App Store Connect API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from decimal import Decimal
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.game_center_leaderboard_formatter import GameCenterLeaderboardFormatter
from typing import Optional, Set
from typing_extensions import Self

class GameCenterLeaderboardAttributes(BaseModel):
    """
    GameCenterLeaderboardAttributes
    """ # noqa: E501
    default_formatter: Optional[GameCenterLeaderboardFormatter] = Field(default=None, alias="defaultFormatter")
    reference_name: Optional[StrictStr] = Field(default=None, alias="referenceName")
    vendor_identifier: Optional[StrictStr] = Field(default=None, alias="vendorIdentifier")
    submission_type: Optional[StrictStr] = Field(default=None, alias="submissionType")
    score_sort_type: Optional[StrictStr] = Field(default=None, alias="scoreSortType")
    score_range_start: Optional[Decimal] = Field(default=None, alias="scoreRangeStart")
    score_range_end: Optional[Decimal] = Field(default=None, alias="scoreRangeEnd")
    recurrence_start_date: Optional[datetime] = Field(default=None, alias="recurrenceStartDate")
    recurrence_duration: Optional[StrictStr] = Field(default=None, alias="recurrenceDuration")
    recurrence_rule: Optional[StrictStr] = Field(default=None, alias="recurrenceRule")
    archived: Optional[StrictBool] = None
    activity_properties: Optional[Dict[str, StrictStr]] = Field(default=None, alias="activityProperties")
    visibility: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["defaultFormatter", "referenceName", "vendorIdentifier", "submissionType", "scoreSortType", "scoreRangeStart", "scoreRangeEnd", "recurrenceStartDate", "recurrenceDuration", "recurrenceRule", "archived", "activityProperties", "visibility"]

    @field_validator('submission_type')
    def submission_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['BEST_SCORE', 'MOST_RECENT_SCORE']):
            raise ValueError("must be one of enum values ('BEST_SCORE', 'MOST_RECENT_SCORE')")
        return value

    @field_validator('score_sort_type')
    def score_sort_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ASC', 'DESC']):
            raise ValueError("must be one of enum values ('ASC', 'DESC')")
        return value

    @field_validator('visibility')
    def visibility_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SHOW_FOR_ALL', 'HIDE_FOR_ALL']):
            raise ValueError("must be one of enum values ('SHOW_FOR_ALL', 'HIDE_FOR_ALL')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GameCenterLeaderboardAttributes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GameCenterLeaderboardAttributes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "defaultFormatter": obj.get("defaultFormatter"),
            "referenceName": obj.get("referenceName"),
            "vendorIdentifier": obj.get("vendorIdentifier"),
            "submissionType": obj.get("submissionType"),
            "scoreSortType": obj.get("scoreSortType"),
            "scoreRangeStart": obj.get("scoreRangeStart"),
            "scoreRangeEnd": obj.get("scoreRangeEnd"),
            "recurrenceStartDate": obj.get("recurrenceStartDate"),
            "recurrenceDuration": obj.get("recurrenceDuration"),
            "recurrenceRule": obj.get("recurrenceRule"),
            "archived": obj.get("archived"),
            "activityProperties": obj.get("activityProperties"),
            "visibility": obj.get("visibility")
        })
        return _obj


