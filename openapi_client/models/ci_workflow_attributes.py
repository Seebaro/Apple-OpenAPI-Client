# coding: utf-8

"""
    App Store Connect API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.ci_action import CiAction
from openapi_client.models.ci_branch_start_condition import CiBranchStartCondition
from openapi_client.models.ci_manual_branch_start_condition import CiManualBranchStartCondition
from openapi_client.models.ci_manual_pull_request_start_condition import CiManualPullRequestStartCondition
from openapi_client.models.ci_manual_tag_start_condition import CiManualTagStartCondition
from openapi_client.models.ci_pull_request_start_condition import CiPullRequestStartCondition
from openapi_client.models.ci_scheduled_start_condition import CiScheduledStartCondition
from openapi_client.models.ci_tag_start_condition import CiTagStartCondition
from typing import Optional, Set
from typing_extensions import Self

class CiWorkflowAttributes(BaseModel):
    """
    CiWorkflowAttributes
    """ # noqa: E501
    name: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    branch_start_condition: Optional[CiBranchStartCondition] = Field(default=None, alias="branchStartCondition")
    tag_start_condition: Optional[CiTagStartCondition] = Field(default=None, alias="tagStartCondition")
    pull_request_start_condition: Optional[CiPullRequestStartCondition] = Field(default=None, alias="pullRequestStartCondition")
    scheduled_start_condition: Optional[CiScheduledStartCondition] = Field(default=None, alias="scheduledStartCondition")
    manual_branch_start_condition: Optional[CiManualBranchStartCondition] = Field(default=None, alias="manualBranchStartCondition")
    manual_tag_start_condition: Optional[CiManualTagStartCondition] = Field(default=None, alias="manualTagStartCondition")
    manual_pull_request_start_condition: Optional[CiManualPullRequestStartCondition] = Field(default=None, alias="manualPullRequestStartCondition")
    actions: Optional[List[CiAction]] = None
    is_enabled: Optional[StrictBool] = Field(default=None, alias="isEnabled")
    is_locked_for_editing: Optional[StrictBool] = Field(default=None, alias="isLockedForEditing")
    clean: Optional[StrictBool] = None
    container_file_path: Optional[StrictStr] = Field(default=None, alias="containerFilePath")
    last_modified_date: Optional[datetime] = Field(default=None, alias="lastModifiedDate")
    __properties: ClassVar[List[str]] = ["name", "description", "branchStartCondition", "tagStartCondition", "pullRequestStartCondition", "scheduledStartCondition", "manualBranchStartCondition", "manualTagStartCondition", "manualPullRequestStartCondition", "actions", "isEnabled", "isLockedForEditing", "clean", "containerFilePath", "lastModifiedDate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CiWorkflowAttributes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of branch_start_condition
        if self.branch_start_condition:
            _dict['branchStartCondition'] = self.branch_start_condition.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tag_start_condition
        if self.tag_start_condition:
            _dict['tagStartCondition'] = self.tag_start_condition.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pull_request_start_condition
        if self.pull_request_start_condition:
            _dict['pullRequestStartCondition'] = self.pull_request_start_condition.to_dict()
        # override the default output from pydantic by calling `to_dict()` of scheduled_start_condition
        if self.scheduled_start_condition:
            _dict['scheduledStartCondition'] = self.scheduled_start_condition.to_dict()
        # override the default output from pydantic by calling `to_dict()` of manual_branch_start_condition
        if self.manual_branch_start_condition:
            _dict['manualBranchStartCondition'] = self.manual_branch_start_condition.to_dict()
        # override the default output from pydantic by calling `to_dict()` of manual_tag_start_condition
        if self.manual_tag_start_condition:
            _dict['manualTagStartCondition'] = self.manual_tag_start_condition.to_dict()
        # override the default output from pydantic by calling `to_dict()` of manual_pull_request_start_condition
        if self.manual_pull_request_start_condition:
            _dict['manualPullRequestStartCondition'] = self.manual_pull_request_start_condition.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in actions (list)
        _items = []
        if self.actions:
            for _item_actions in self.actions:
                if _item_actions:
                    _items.append(_item_actions.to_dict())
            _dict['actions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CiWorkflowAttributes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "description": obj.get("description"),
            "branchStartCondition": CiBranchStartCondition.from_dict(obj["branchStartCondition"]) if obj.get("branchStartCondition") is not None else None,
            "tagStartCondition": CiTagStartCondition.from_dict(obj["tagStartCondition"]) if obj.get("tagStartCondition") is not None else None,
            "pullRequestStartCondition": CiPullRequestStartCondition.from_dict(obj["pullRequestStartCondition"]) if obj.get("pullRequestStartCondition") is not None else None,
            "scheduledStartCondition": CiScheduledStartCondition.from_dict(obj["scheduledStartCondition"]) if obj.get("scheduledStartCondition") is not None else None,
            "manualBranchStartCondition": CiManualBranchStartCondition.from_dict(obj["manualBranchStartCondition"]) if obj.get("manualBranchStartCondition") is not None else None,
            "manualTagStartCondition": CiManualTagStartCondition.from_dict(obj["manualTagStartCondition"]) if obj.get("manualTagStartCondition") is not None else None,
            "manualPullRequestStartCondition": CiManualPullRequestStartCondition.from_dict(obj["manualPullRequestStartCondition"]) if obj.get("manualPullRequestStartCondition") is not None else None,
            "actions": [CiAction.from_dict(_item) for _item in obj["actions"]] if obj.get("actions") is not None else None,
            "isEnabled": obj.get("isEnabled"),
            "isLockedForEditing": obj.get("isLockedForEditing"),
            "clean": obj.get("clean"),
            "containerFilePath": obj.get("containerFilePath"),
            "lastModifiedDate": obj.get("lastModifiedDate")
        })
        return _obj


