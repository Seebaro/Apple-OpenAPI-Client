# coding: utf-8

"""
    App Store Connect API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.app_store_age_rating import AppStoreAgeRating
from openapi_client.models.app_store_version_state import AppStoreVersionState
from openapi_client.models.brazil_age_rating import BrazilAgeRating
from openapi_client.models.kids_age_band import KidsAgeBand
from typing import Optional, Set
from typing_extensions import Self

class AppInfoAttributes(BaseModel):
    """
    AppInfoAttributes
    """ # noqa: E501
    app_store_state: Optional[AppStoreVersionState] = Field(default=None, alias="appStoreState")
    state: Optional[StrictStr] = None
    app_store_age_rating: Optional[AppStoreAgeRating] = Field(default=None, alias="appStoreAgeRating")
    australia_age_rating: Optional[StrictStr] = Field(default=None, alias="australiaAgeRating")
    brazil_age_rating: Optional[BrazilAgeRating] = Field(default=None, alias="brazilAgeRating")
    brazil_age_rating_v2: Optional[StrictStr] = Field(default=None, alias="brazilAgeRatingV2")
    france_age_rating: Optional[StrictStr] = Field(default=None, alias="franceAgeRating")
    korea_age_rating: Optional[StrictStr] = Field(default=None, alias="koreaAgeRating")
    kids_age_band: Optional[KidsAgeBand] = Field(default=None, alias="kidsAgeBand")
    __properties: ClassVar[List[str]] = ["appStoreState", "state", "appStoreAgeRating", "australiaAgeRating", "brazilAgeRating", "brazilAgeRatingV2", "franceAgeRating", "koreaAgeRating", "kidsAgeBand"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ACCEPTED', 'DEVELOPER_REJECTED', 'IN_REVIEW', 'PENDING_RELEASE', 'PREPARE_FOR_SUBMISSION', 'READY_FOR_DISTRIBUTION', 'READY_FOR_REVIEW', 'REJECTED', 'REPLACED_WITH_NEW_INFO', 'WAITING_FOR_REVIEW']):
            raise ValueError("must be one of enum values ('ACCEPTED', 'DEVELOPER_REJECTED', 'IN_REVIEW', 'PENDING_RELEASE', 'PREPARE_FOR_SUBMISSION', 'READY_FOR_DISTRIBUTION', 'READY_FOR_REVIEW', 'REJECTED', 'REPLACED_WITH_NEW_INFO', 'WAITING_FOR_REVIEW')")
        return value

    @field_validator('australia_age_rating')
    def australia_age_rating_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['FIFTEEN', 'EIGHTEEN']):
            raise ValueError("must be one of enum values ('FIFTEEN', 'EIGHTEEN')")
        return value

    @field_validator('brazil_age_rating_v2')
    def brazil_age_rating_v2_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SELF_RATED_L', 'SELF_RATED_TEN', 'SELF_RATED_TWELVE', 'SELF_RATED_FOURTEEN', 'SELF_RATED_SIXTEEN', 'SELF_RATED_EIGHTEEN', 'OFFICIAL_L', 'OFFICIAL_TEN', 'OFFICIAL_TWELVE', 'OFFICIAL_FOURTEEN', 'OFFICIAL_SIXTEEN', 'OFFICIAL_EIGHTEEN']):
            raise ValueError("must be one of enum values ('SELF_RATED_L', 'SELF_RATED_TEN', 'SELF_RATED_TWELVE', 'SELF_RATED_FOURTEEN', 'SELF_RATED_SIXTEEN', 'SELF_RATED_EIGHTEEN', 'OFFICIAL_L', 'OFFICIAL_TEN', 'OFFICIAL_TWELVE', 'OFFICIAL_FOURTEEN', 'OFFICIAL_SIXTEEN', 'OFFICIAL_EIGHTEEN')")
        return value

    @field_validator('france_age_rating')
    def france_age_rating_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EIGHTEEN']):
            raise ValueError("must be one of enum values ('EIGHTEEN')")
        return value

    @field_validator('korea_age_rating')
    def korea_age_rating_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ALL', 'TWELVE', 'FIFTEEN', 'NINETEEN', 'NOT_APPLICABLE']):
            raise ValueError("must be one of enum values ('ALL', 'TWELVE', 'FIFTEEN', 'NINETEEN', 'NOT_APPLICABLE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AppInfoAttributes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AppInfoAttributes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "appStoreState": obj.get("appStoreState"),
            "state": obj.get("state"),
            "appStoreAgeRating": obj.get("appStoreAgeRating"),
            "australiaAgeRating": obj.get("australiaAgeRating"),
            "brazilAgeRating": obj.get("brazilAgeRating"),
            "brazilAgeRatingV2": obj.get("brazilAgeRatingV2"),
            "franceAgeRating": obj.get("franceAgeRating"),
            "koreaAgeRating": obj.get("koreaAgeRating"),
            "kidsAgeBand": obj.get("kidsAgeBand")
        })
        return _obj


