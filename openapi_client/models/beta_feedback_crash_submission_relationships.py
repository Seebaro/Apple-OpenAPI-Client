# coding: utf-8

"""
    App Store Connect API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.analytics_report_instance_relationships_segments import AnalyticsReportInstanceRelationshipsSegments
from openapi_client.models.app_store_version_create_request_data_relationships_build import AppStoreVersionCreateRequestDataRelationshipsBuild
from openapi_client.models.beta_feedback_crash_submission_relationships_tester import BetaFeedbackCrashSubmissionRelationshipsTester
from typing import Optional, Set
from typing_extensions import Self

class BetaFeedbackCrashSubmissionRelationships(BaseModel):
    """
    BetaFeedbackCrashSubmissionRelationships
    """ # noqa: E501
    crash_log: Optional[AnalyticsReportInstanceRelationshipsSegments] = Field(default=None, alias="crashLog")
    build: Optional[AppStoreVersionCreateRequestDataRelationshipsBuild] = None
    tester: Optional[BetaFeedbackCrashSubmissionRelationshipsTester] = None
    __properties: ClassVar[List[str]] = ["crashLog", "build", "tester"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BetaFeedbackCrashSubmissionRelationships from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of crash_log
        if self.crash_log:
            _dict['crashLog'] = self.crash_log.to_dict()
        # override the default output from pydantic by calling `to_dict()` of build
        if self.build:
            _dict['build'] = self.build.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tester
        if self.tester:
            _dict['tester'] = self.tester.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BetaFeedbackCrashSubmissionRelationships from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "crashLog": AnalyticsReportInstanceRelationshipsSegments.from_dict(obj["crashLog"]) if obj.get("crashLog") is not None else None,
            "build": AppStoreVersionCreateRequestDataRelationshipsBuild.from_dict(obj["build"]) if obj.get("build") is not None else None,
            "tester": BetaFeedbackCrashSubmissionRelationshipsTester.from_dict(obj["tester"]) if obj.get("tester") is not None else None
        })
        return _obj


