# coding: utf-8

"""
    App Store Connect API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.capability_option import CapabilityOption
from typing import Optional, Set
from typing_extensions import Self

class CapabilitySetting(BaseModel):
    """
    CapabilitySetting
    """ # noqa: E501
    key: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    enabled_by_default: Optional[StrictBool] = Field(default=None, alias="enabledByDefault")
    visible: Optional[StrictBool] = None
    allowed_instances: Optional[StrictStr] = Field(default=None, alias="allowedInstances")
    min_instances: Optional[StrictInt] = Field(default=None, alias="minInstances")
    options: Optional[List[CapabilityOption]] = None
    __properties: ClassVar[List[str]] = ["key", "name", "description", "enabledByDefault", "visible", "allowedInstances", "minInstances", "options"]

    @field_validator('key')
    def key_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ICLOUD_VERSION', 'DATA_PROTECTION_PERMISSION_LEVEL', 'APPLE_ID_AUTH_APP_CONSENT']):
            raise ValueError("must be one of enum values ('ICLOUD_VERSION', 'DATA_PROTECTION_PERMISSION_LEVEL', 'APPLE_ID_AUTH_APP_CONSENT')")
        return value

    @field_validator('allowed_instances')
    def allowed_instances_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ENTRY', 'SINGLE', 'MULTIPLE']):
            raise ValueError("must be one of enum values ('ENTRY', 'SINGLE', 'MULTIPLE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CapabilitySetting from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in options (list)
        _items = []
        if self.options:
            for _item_options in self.options:
                if _item_options:
                    _items.append(_item_options.to_dict())
            _dict['options'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CapabilitySetting from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "key": obj.get("key"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "enabledByDefault": obj.get("enabledByDefault"),
            "visible": obj.get("visible"),
            "allowedInstances": obj.get("allowedInstances"),
            "minInstances": obj.get("minInstances"),
            "options": [CapabilityOption.from_dict(_item) for _item in obj["options"]] if obj.get("options") is not None else None
        })
        return _obj


