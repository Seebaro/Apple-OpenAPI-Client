# coding: utf-8

"""
    App Store Connect API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from openapi_client.models.promoted_purchase import PromotedPurchase
from openapi_client.models.subscription_app_store_review_screenshot import SubscriptionAppStoreReviewScreenshot
from openapi_client.models.subscription_availability import SubscriptionAvailability
from openapi_client.models.subscription_group import SubscriptionGroup
from openapi_client.models.subscription_image import SubscriptionImage
from openapi_client.models.subscription_introductory_offer import SubscriptionIntroductoryOffer
from openapi_client.models.subscription_localization import SubscriptionLocalization
from openapi_client.models.subscription_offer_code import SubscriptionOfferCode
from openapi_client.models.subscription_price import SubscriptionPrice
from openapi_client.models.subscription_promotional_offer import SubscriptionPromotionalOffer
from openapi_client.models.win_back_offer import WinBackOffer
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

SUBSCRIPTIONSRESPONSEINCLUDEDINNER_ONE_OF_SCHEMAS = ["PromotedPurchase", "SubscriptionAppStoreReviewScreenshot", "SubscriptionAvailability", "SubscriptionGroup", "SubscriptionImage", "SubscriptionIntroductoryOffer", "SubscriptionLocalization", "SubscriptionOfferCode", "SubscriptionPrice", "SubscriptionPromotionalOffer", "WinBackOffer"]

class SubscriptionsResponseIncludedInner(BaseModel):
    """
    SubscriptionsResponseIncludedInner
    """
    # data type: SubscriptionLocalization
    oneof_schema_1_validator: Optional[SubscriptionLocalization] = None
    # data type: SubscriptionAppStoreReviewScreenshot
    oneof_schema_2_validator: Optional[SubscriptionAppStoreReviewScreenshot] = None
    # data type: SubscriptionGroup
    oneof_schema_3_validator: Optional[SubscriptionGroup] = None
    # data type: SubscriptionIntroductoryOffer
    oneof_schema_4_validator: Optional[SubscriptionIntroductoryOffer] = None
    # data type: SubscriptionPromotionalOffer
    oneof_schema_5_validator: Optional[SubscriptionPromotionalOffer] = None
    # data type: SubscriptionOfferCode
    oneof_schema_6_validator: Optional[SubscriptionOfferCode] = None
    # data type: SubscriptionPrice
    oneof_schema_7_validator: Optional[SubscriptionPrice] = None
    # data type: PromotedPurchase
    oneof_schema_8_validator: Optional[PromotedPurchase] = None
    # data type: SubscriptionAvailability
    oneof_schema_9_validator: Optional[SubscriptionAvailability] = None
    # data type: WinBackOffer
    oneof_schema_10_validator: Optional[WinBackOffer] = None
    # data type: SubscriptionImage
    oneof_schema_11_validator: Optional[SubscriptionImage] = None
    actual_instance: Optional[Union[PromotedPurchase, SubscriptionAppStoreReviewScreenshot, SubscriptionAvailability, SubscriptionGroup, SubscriptionImage, SubscriptionIntroductoryOffer, SubscriptionLocalization, SubscriptionOfferCode, SubscriptionPrice, SubscriptionPromotionalOffer, WinBackOffer]] = None
    one_of_schemas: Set[str] = { "PromotedPurchase", "SubscriptionAppStoreReviewScreenshot", "SubscriptionAvailability", "SubscriptionGroup", "SubscriptionImage", "SubscriptionIntroductoryOffer", "SubscriptionLocalization", "SubscriptionOfferCode", "SubscriptionPrice", "SubscriptionPromotionalOffer", "WinBackOffer" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = SubscriptionsResponseIncludedInner.model_construct()
        error_messages = []
        match = 0
        # validate data type: SubscriptionLocalization
        if not isinstance(v, SubscriptionLocalization):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SubscriptionLocalization`")
        else:
            match += 1
        # validate data type: SubscriptionAppStoreReviewScreenshot
        if not isinstance(v, SubscriptionAppStoreReviewScreenshot):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SubscriptionAppStoreReviewScreenshot`")
        else:
            match += 1
        # validate data type: SubscriptionGroup
        if not isinstance(v, SubscriptionGroup):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SubscriptionGroup`")
        else:
            match += 1
        # validate data type: SubscriptionIntroductoryOffer
        if not isinstance(v, SubscriptionIntroductoryOffer):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SubscriptionIntroductoryOffer`")
        else:
            match += 1
        # validate data type: SubscriptionPromotionalOffer
        if not isinstance(v, SubscriptionPromotionalOffer):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SubscriptionPromotionalOffer`")
        else:
            match += 1
        # validate data type: SubscriptionOfferCode
        if not isinstance(v, SubscriptionOfferCode):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SubscriptionOfferCode`")
        else:
            match += 1
        # validate data type: SubscriptionPrice
        if not isinstance(v, SubscriptionPrice):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SubscriptionPrice`")
        else:
            match += 1
        # validate data type: PromotedPurchase
        if not isinstance(v, PromotedPurchase):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PromotedPurchase`")
        else:
            match += 1
        # validate data type: SubscriptionAvailability
        if not isinstance(v, SubscriptionAvailability):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SubscriptionAvailability`")
        else:
            match += 1
        # validate data type: WinBackOffer
        if not isinstance(v, WinBackOffer):
            error_messages.append(f"Error! Input type `{type(v)}` is not `WinBackOffer`")
        else:
            match += 1
        # validate data type: SubscriptionImage
        if not isinstance(v, SubscriptionImage):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SubscriptionImage`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in SubscriptionsResponseIncludedInner with oneOf schemas: PromotedPurchase, SubscriptionAppStoreReviewScreenshot, SubscriptionAvailability, SubscriptionGroup, SubscriptionImage, SubscriptionIntroductoryOffer, SubscriptionLocalization, SubscriptionOfferCode, SubscriptionPrice, SubscriptionPromotionalOffer, WinBackOffer. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in SubscriptionsResponseIncludedInner with oneOf schemas: PromotedPurchase, SubscriptionAppStoreReviewScreenshot, SubscriptionAvailability, SubscriptionGroup, SubscriptionImage, SubscriptionIntroductoryOffer, SubscriptionLocalization, SubscriptionOfferCode, SubscriptionPrice, SubscriptionPromotionalOffer, WinBackOffer. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into SubscriptionLocalization
        try:
            instance.actual_instance = SubscriptionLocalization.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SubscriptionAppStoreReviewScreenshot
        try:
            instance.actual_instance = SubscriptionAppStoreReviewScreenshot.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SubscriptionGroup
        try:
            instance.actual_instance = SubscriptionGroup.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SubscriptionIntroductoryOffer
        try:
            instance.actual_instance = SubscriptionIntroductoryOffer.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SubscriptionPromotionalOffer
        try:
            instance.actual_instance = SubscriptionPromotionalOffer.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SubscriptionOfferCode
        try:
            instance.actual_instance = SubscriptionOfferCode.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SubscriptionPrice
        try:
            instance.actual_instance = SubscriptionPrice.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PromotedPurchase
        try:
            instance.actual_instance = PromotedPurchase.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SubscriptionAvailability
        try:
            instance.actual_instance = SubscriptionAvailability.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into WinBackOffer
        try:
            instance.actual_instance = WinBackOffer.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SubscriptionImage
        try:
            instance.actual_instance = SubscriptionImage.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into SubscriptionsResponseIncludedInner with oneOf schemas: PromotedPurchase, SubscriptionAppStoreReviewScreenshot, SubscriptionAvailability, SubscriptionGroup, SubscriptionImage, SubscriptionIntroductoryOffer, SubscriptionLocalization, SubscriptionOfferCode, SubscriptionPrice, SubscriptionPromotionalOffer, WinBackOffer. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into SubscriptionsResponseIncludedInner with oneOf schemas: PromotedPurchase, SubscriptionAppStoreReviewScreenshot, SubscriptionAvailability, SubscriptionGroup, SubscriptionImage, SubscriptionIntroductoryOffer, SubscriptionLocalization, SubscriptionOfferCode, SubscriptionPrice, SubscriptionPromotionalOffer, WinBackOffer. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], PromotedPurchase, SubscriptionAppStoreReviewScreenshot, SubscriptionAvailability, SubscriptionGroup, SubscriptionImage, SubscriptionIntroductoryOffer, SubscriptionLocalization, SubscriptionOfferCode, SubscriptionPrice, SubscriptionPromotionalOffer, WinBackOffer]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


