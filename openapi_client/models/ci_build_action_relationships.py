# coding: utf-8

"""
    App Store Connect API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.analytics_report_instance_relationships_segments import AnalyticsReportInstanceRelationshipsSegments
from openapi_client.models.ci_build_action_relationships_build_run import CiBuildActionRelationshipsBuildRun
from typing import Optional, Set
from typing_extensions import Self

class CiBuildActionRelationships(BaseModel):
    """
    CiBuildActionRelationships
    """ # noqa: E501
    build_run: Optional[CiBuildActionRelationshipsBuildRun] = Field(default=None, alias="buildRun")
    artifacts: Optional[AnalyticsReportInstanceRelationshipsSegments] = None
    issues: Optional[AnalyticsReportInstanceRelationshipsSegments] = None
    test_results: Optional[AnalyticsReportInstanceRelationshipsSegments] = Field(default=None, alias="testResults")
    __properties: ClassVar[List[str]] = ["buildRun", "artifacts", "issues", "testResults"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CiBuildActionRelationships from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of build_run
        if self.build_run:
            _dict['buildRun'] = self.build_run.to_dict()
        # override the default output from pydantic by calling `to_dict()` of artifacts
        if self.artifacts:
            _dict['artifacts'] = self.artifacts.to_dict()
        # override the default output from pydantic by calling `to_dict()` of issues
        if self.issues:
            _dict['issues'] = self.issues.to_dict()
        # override the default output from pydantic by calling `to_dict()` of test_results
        if self.test_results:
            _dict['testResults'] = self.test_results.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CiBuildActionRelationships from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "buildRun": CiBuildActionRelationshipsBuildRun.from_dict(obj["buildRun"]) if obj.get("buildRun") is not None else None,
            "artifacts": AnalyticsReportInstanceRelationshipsSegments.from_dict(obj["artifacts"]) if obj.get("artifacts") is not None else None,
            "issues": AnalyticsReportInstanceRelationshipsSegments.from_dict(obj["issues"]) if obj.get("issues") is not None else None,
            "testResults": AnalyticsReportInstanceRelationshipsSegments.from_dict(obj["testResults"]) if obj.get("testResults") is not None else None
        })
        return _obj


