# coding: utf-8

"""
    App Store Connect API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List
from openapi_client.models.ci_workflow_create_request_data_relationships_mac_os_version import CiWorkflowCreateRequestDataRelationshipsMacOsVersion
from openapi_client.models.ci_workflow_create_request_data_relationships_product import CiWorkflowCreateRequestDataRelationshipsProduct
from openapi_client.models.ci_workflow_create_request_data_relationships_repository import CiWorkflowCreateRequestDataRelationshipsRepository
from openapi_client.models.ci_workflow_create_request_data_relationships_xcode_version import CiWorkflowCreateRequestDataRelationshipsXcodeVersion
from typing import Optional, Set
from typing_extensions import Self

class CiWorkflowCreateRequestDataRelationships(BaseModel):
    """
    CiWorkflowCreateRequestDataRelationships
    """ # noqa: E501
    product: CiWorkflowCreateRequestDataRelationshipsProduct
    repository: CiWorkflowCreateRequestDataRelationshipsRepository
    xcode_version: CiWorkflowCreateRequestDataRelationshipsXcodeVersion = Field(alias="xcodeVersion")
    mac_os_version: CiWorkflowCreateRequestDataRelationshipsMacOsVersion = Field(alias="macOsVersion")
    __properties: ClassVar[List[str]] = ["product", "repository", "xcodeVersion", "macOsVersion"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CiWorkflowCreateRequestDataRelationships from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of product
        if self.product:
            _dict['product'] = self.product.to_dict()
        # override the default output from pydantic by calling `to_dict()` of repository
        if self.repository:
            _dict['repository'] = self.repository.to_dict()
        # override the default output from pydantic by calling `to_dict()` of xcode_version
        if self.xcode_version:
            _dict['xcodeVersion'] = self.xcode_version.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mac_os_version
        if self.mac_os_version:
            _dict['macOsVersion'] = self.mac_os_version.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CiWorkflowCreateRequestDataRelationships from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "product": CiWorkflowCreateRequestDataRelationshipsProduct.from_dict(obj["product"]) if obj.get("product") is not None else None,
            "repository": CiWorkflowCreateRequestDataRelationshipsRepository.from_dict(obj["repository"]) if obj.get("repository") is not None else None,
            "xcodeVersion": CiWorkflowCreateRequestDataRelationshipsXcodeVersion.from_dict(obj["xcodeVersion"]) if obj.get("xcodeVersion") is not None else None,
            "macOsVersion": CiWorkflowCreateRequestDataRelationshipsMacOsVersion.from_dict(obj["macOsVersion"]) if obj.get("macOsVersion") is not None else None
        })
        return _obj


