# coding: utf-8

"""
    App Store Connect API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.app_price_point_v3_relationships_territory import AppPricePointV3RelationshipsTerritory
from openapi_client.models.subscription_app_store_review_screenshot_create_request_data_relationships_subscription import SubscriptionAppStoreReviewScreenshotCreateRequestDataRelationshipsSubscription
from openapi_client.models.subscription_introductory_offer_relationships_subscription_price_point import SubscriptionIntroductoryOfferRelationshipsSubscriptionPricePoint
from typing import Optional, Set
from typing_extensions import Self

class SubscriptionIntroductoryOfferCreateRequestDataRelationships(BaseModel):
    """
    SubscriptionIntroductoryOfferCreateRequestDataRelationships
    """ # noqa: E501
    subscription: SubscriptionAppStoreReviewScreenshotCreateRequestDataRelationshipsSubscription
    territory: Optional[AppPricePointV3RelationshipsTerritory] = None
    subscription_price_point: Optional[SubscriptionIntroductoryOfferRelationshipsSubscriptionPricePoint] = Field(default=None, alias="subscriptionPricePoint")
    __properties: ClassVar[List[str]] = ["subscription", "territory", "subscriptionPricePoint"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SubscriptionIntroductoryOfferCreateRequestDataRelationships from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of subscription
        if self.subscription:
            _dict['subscription'] = self.subscription.to_dict()
        # override the default output from pydantic by calling `to_dict()` of territory
        if self.territory:
            _dict['territory'] = self.territory.to_dict()
        # override the default output from pydantic by calling `to_dict()` of subscription_price_point
        if self.subscription_price_point:
            _dict['subscriptionPricePoint'] = self.subscription_price_point.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SubscriptionIntroductoryOfferCreateRequestDataRelationships from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "subscription": SubscriptionAppStoreReviewScreenshotCreateRequestDataRelationshipsSubscription.from_dict(obj["subscription"]) if obj.get("subscription") is not None else None,
            "territory": AppPricePointV3RelationshipsTerritory.from_dict(obj["territory"]) if obj.get("territory") is not None else None,
            "subscriptionPricePoint": SubscriptionIntroductoryOfferRelationshipsSubscriptionPricePoint.from_dict(obj["subscriptionPricePoint"]) if obj.get("subscriptionPricePoint") is not None else None
        })
        return _obj


