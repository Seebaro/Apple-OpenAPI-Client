# coding: utf-8

"""
    App Store Connect API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.analytics_report_instance_relationships_segments import AnalyticsReportInstanceRelationshipsSegments
from openapi_client.models.app_relationships_app_clips import AppRelationshipsAppClips
from openapi_client.models.app_relationships_app_custom_product_pages import AppRelationshipsAppCustomProductPages
from openapi_client.models.app_relationships_app_encryption_declarations import AppRelationshipsAppEncryptionDeclarations
from openapi_client.models.app_relationships_app_events import AppRelationshipsAppEvents
from openapi_client.models.app_relationships_app_infos import AppRelationshipsAppInfos
from openapi_client.models.app_relationships_app_store_versions import AppRelationshipsAppStoreVersions
from openapi_client.models.app_relationships_beta_app_localizations import AppRelationshipsBetaAppLocalizations
from openapi_client.models.app_relationships_beta_app_review_detail import AppRelationshipsBetaAppReviewDetail
from openapi_client.models.app_relationships_beta_groups import AppRelationshipsBetaGroups
from openapi_client.models.app_relationships_beta_license_agreement import AppRelationshipsBetaLicenseAgreement
from openapi_client.models.app_relationships_builds import AppRelationshipsBuilds
from openapi_client.models.app_relationships_ci_product import AppRelationshipsCiProduct
from openapi_client.models.app_relationships_end_user_license_agreement import AppRelationshipsEndUserLicenseAgreement
from openapi_client.models.app_relationships_game_center_detail import AppRelationshipsGameCenterDetail
from openapi_client.models.app_relationships_game_center_enabled_versions import AppRelationshipsGameCenterEnabledVersions
from openapi_client.models.app_relationships_in_app_purchases import AppRelationshipsInAppPurchases
from openapi_client.models.app_relationships_in_app_purchases_v2 import AppRelationshipsInAppPurchasesV2
from openapi_client.models.app_relationships_pre_release_versions import AppRelationshipsPreReleaseVersions
from openapi_client.models.app_relationships_promoted_purchases import AppRelationshipsPromotedPurchases
from openapi_client.models.app_relationships_review_submissions import AppRelationshipsReviewSubmissions
from openapi_client.models.app_relationships_subscription_grace_period import AppRelationshipsSubscriptionGracePeriod
from openapi_client.models.app_relationships_subscription_groups import AppRelationshipsSubscriptionGroups
from openapi_client.models.app_store_version_relationships_app_store_version_experiments import AppStoreVersionRelationshipsAppStoreVersionExperiments
from typing import Optional, Set
from typing_extensions import Self

class AppRelationships(BaseModel):
    """
    AppRelationships
    """ # noqa: E501
    accessibility_declarations: Optional[AnalyticsReportInstanceRelationshipsSegments] = Field(default=None, alias="accessibilityDeclarations")
    app_encryption_declarations: Optional[AppRelationshipsAppEncryptionDeclarations] = Field(default=None, alias="appEncryptionDeclarations")
    ci_product: Optional[AppRelationshipsCiProduct] = Field(default=None, alias="ciProduct")
    beta_testers: Optional[AnalyticsReportInstanceRelationshipsSegments] = Field(default=None, alias="betaTesters")
    beta_groups: Optional[AppRelationshipsBetaGroups] = Field(default=None, alias="betaGroups")
    app_store_versions: Optional[AppRelationshipsAppStoreVersions] = Field(default=None, alias="appStoreVersions")
    pre_release_versions: Optional[AppRelationshipsPreReleaseVersions] = Field(default=None, alias="preReleaseVersions")
    beta_app_localizations: Optional[AppRelationshipsBetaAppLocalizations] = Field(default=None, alias="betaAppLocalizations")
    builds: Optional[AppRelationshipsBuilds] = None
    beta_license_agreement: Optional[AppRelationshipsBetaLicenseAgreement] = Field(default=None, alias="betaLicenseAgreement")
    beta_app_review_detail: Optional[AppRelationshipsBetaAppReviewDetail] = Field(default=None, alias="betaAppReviewDetail")
    app_infos: Optional[AppRelationshipsAppInfos] = Field(default=None, alias="appInfos")
    app_clips: Optional[AppRelationshipsAppClips] = Field(default=None, alias="appClips")
    app_price_points: Optional[AnalyticsReportInstanceRelationshipsSegments] = Field(default=None, alias="appPricePoints")
    end_user_license_agreement: Optional[AppRelationshipsEndUserLicenseAgreement] = Field(default=None, alias="endUserLicenseAgreement")
    app_price_schedule: Optional[AnalyticsReportInstanceRelationshipsSegments] = Field(default=None, alias="appPriceSchedule")
    app_availability_v2: Optional[AnalyticsReportInstanceRelationshipsSegments] = Field(default=None, alias="appAvailabilityV2")
    in_app_purchases: Optional[AppRelationshipsInAppPurchases] = Field(default=None, alias="inAppPurchases")
    subscription_groups: Optional[AppRelationshipsSubscriptionGroups] = Field(default=None, alias="subscriptionGroups")
    game_center_enabled_versions: Optional[AppRelationshipsGameCenterEnabledVersions] = Field(default=None, alias="gameCenterEnabledVersions")
    perf_power_metrics: Optional[AnalyticsReportInstanceRelationshipsSegments] = Field(default=None, alias="perfPowerMetrics")
    app_custom_product_pages: Optional[AppRelationshipsAppCustomProductPages] = Field(default=None, alias="appCustomProductPages")
    in_app_purchases_v2: Optional[AppRelationshipsInAppPurchasesV2] = Field(default=None, alias="inAppPurchasesV2")
    promoted_purchases: Optional[AppRelationshipsPromotedPurchases] = Field(default=None, alias="promotedPurchases")
    app_events: Optional[AppRelationshipsAppEvents] = Field(default=None, alias="appEvents")
    review_submissions: Optional[AppRelationshipsReviewSubmissions] = Field(default=None, alias="reviewSubmissions")
    subscription_grace_period: Optional[AppRelationshipsSubscriptionGracePeriod] = Field(default=None, alias="subscriptionGracePeriod")
    customer_reviews: Optional[AnalyticsReportInstanceRelationshipsSegments] = Field(default=None, alias="customerReviews")
    customer_review_summarizations: Optional[AnalyticsReportInstanceRelationshipsSegments] = Field(default=None, alias="customerReviewSummarizations")
    game_center_detail: Optional[AppRelationshipsGameCenterDetail] = Field(default=None, alias="gameCenterDetail")
    app_store_version_experiments_v2: Optional[AppStoreVersionRelationshipsAppStoreVersionExperiments] = Field(default=None, alias="appStoreVersionExperimentsV2")
    alternative_distribution_key: Optional[AnalyticsReportInstanceRelationshipsSegments] = Field(default=None, alias="alternativeDistributionKey")
    analytics_report_requests: Optional[AnalyticsReportInstanceRelationshipsSegments] = Field(default=None, alias="analyticsReportRequests")
    marketplace_search_detail: Optional[AnalyticsReportInstanceRelationshipsSegments] = Field(default=None, alias="marketplaceSearchDetail")
    background_assets: Optional[AnalyticsReportInstanceRelationshipsSegments] = Field(default=None, alias="backgroundAssets")
    beta_feedback_screenshot_submissions: Optional[AnalyticsReportInstanceRelationshipsSegments] = Field(default=None, alias="betaFeedbackScreenshotSubmissions")
    beta_feedback_crash_submissions: Optional[AnalyticsReportInstanceRelationshipsSegments] = Field(default=None, alias="betaFeedbackCrashSubmissions")
    webhooks: Optional[AnalyticsReportInstanceRelationshipsSegments] = None
    __properties: ClassVar[List[str]] = ["accessibilityDeclarations", "appEncryptionDeclarations", "ciProduct", "betaTesters", "betaGroups", "appStoreVersions", "preReleaseVersions", "betaAppLocalizations", "builds", "betaLicenseAgreement", "betaAppReviewDetail", "appInfos", "appClips", "appPricePoints", "endUserLicenseAgreement", "appPriceSchedule", "appAvailabilityV2", "inAppPurchases", "subscriptionGroups", "gameCenterEnabledVersions", "perfPowerMetrics", "appCustomProductPages", "inAppPurchasesV2", "promotedPurchases", "appEvents", "reviewSubmissions", "subscriptionGracePeriod", "customerReviews", "customerReviewSummarizations", "gameCenterDetail", "appStoreVersionExperimentsV2", "alternativeDistributionKey", "analyticsReportRequests", "marketplaceSearchDetail", "backgroundAssets", "betaFeedbackScreenshotSubmissions", "betaFeedbackCrashSubmissions", "webhooks"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AppRelationships from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of accessibility_declarations
        if self.accessibility_declarations:
            _dict['accessibilityDeclarations'] = self.accessibility_declarations.to_dict()
        # override the default output from pydantic by calling `to_dict()` of app_encryption_declarations
        if self.app_encryption_declarations:
            _dict['appEncryptionDeclarations'] = self.app_encryption_declarations.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ci_product
        if self.ci_product:
            _dict['ciProduct'] = self.ci_product.to_dict()
        # override the default output from pydantic by calling `to_dict()` of beta_testers
        if self.beta_testers:
            _dict['betaTesters'] = self.beta_testers.to_dict()
        # override the default output from pydantic by calling `to_dict()` of beta_groups
        if self.beta_groups:
            _dict['betaGroups'] = self.beta_groups.to_dict()
        # override the default output from pydantic by calling `to_dict()` of app_store_versions
        if self.app_store_versions:
            _dict['appStoreVersions'] = self.app_store_versions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pre_release_versions
        if self.pre_release_versions:
            _dict['preReleaseVersions'] = self.pre_release_versions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of beta_app_localizations
        if self.beta_app_localizations:
            _dict['betaAppLocalizations'] = self.beta_app_localizations.to_dict()
        # override the default output from pydantic by calling `to_dict()` of builds
        if self.builds:
            _dict['builds'] = self.builds.to_dict()
        # override the default output from pydantic by calling `to_dict()` of beta_license_agreement
        if self.beta_license_agreement:
            _dict['betaLicenseAgreement'] = self.beta_license_agreement.to_dict()
        # override the default output from pydantic by calling `to_dict()` of beta_app_review_detail
        if self.beta_app_review_detail:
            _dict['betaAppReviewDetail'] = self.beta_app_review_detail.to_dict()
        # override the default output from pydantic by calling `to_dict()` of app_infos
        if self.app_infos:
            _dict['appInfos'] = self.app_infos.to_dict()
        # override the default output from pydantic by calling `to_dict()` of app_clips
        if self.app_clips:
            _dict['appClips'] = self.app_clips.to_dict()
        # override the default output from pydantic by calling `to_dict()` of app_price_points
        if self.app_price_points:
            _dict['appPricePoints'] = self.app_price_points.to_dict()
        # override the default output from pydantic by calling `to_dict()` of end_user_license_agreement
        if self.end_user_license_agreement:
            _dict['endUserLicenseAgreement'] = self.end_user_license_agreement.to_dict()
        # override the default output from pydantic by calling `to_dict()` of app_price_schedule
        if self.app_price_schedule:
            _dict['appPriceSchedule'] = self.app_price_schedule.to_dict()
        # override the default output from pydantic by calling `to_dict()` of app_availability_v2
        if self.app_availability_v2:
            _dict['appAvailabilityV2'] = self.app_availability_v2.to_dict()
        # override the default output from pydantic by calling `to_dict()` of in_app_purchases
        if self.in_app_purchases:
            _dict['inAppPurchases'] = self.in_app_purchases.to_dict()
        # override the default output from pydantic by calling `to_dict()` of subscription_groups
        if self.subscription_groups:
            _dict['subscriptionGroups'] = self.subscription_groups.to_dict()
        # override the default output from pydantic by calling `to_dict()` of game_center_enabled_versions
        if self.game_center_enabled_versions:
            _dict['gameCenterEnabledVersions'] = self.game_center_enabled_versions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of perf_power_metrics
        if self.perf_power_metrics:
            _dict['perfPowerMetrics'] = self.perf_power_metrics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of app_custom_product_pages
        if self.app_custom_product_pages:
            _dict['appCustomProductPages'] = self.app_custom_product_pages.to_dict()
        # override the default output from pydantic by calling `to_dict()` of in_app_purchases_v2
        if self.in_app_purchases_v2:
            _dict['inAppPurchasesV2'] = self.in_app_purchases_v2.to_dict()
        # override the default output from pydantic by calling `to_dict()` of promoted_purchases
        if self.promoted_purchases:
            _dict['promotedPurchases'] = self.promoted_purchases.to_dict()
        # override the default output from pydantic by calling `to_dict()` of app_events
        if self.app_events:
            _dict['appEvents'] = self.app_events.to_dict()
        # override the default output from pydantic by calling `to_dict()` of review_submissions
        if self.review_submissions:
            _dict['reviewSubmissions'] = self.review_submissions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of subscription_grace_period
        if self.subscription_grace_period:
            _dict['subscriptionGracePeriod'] = self.subscription_grace_period.to_dict()
        # override the default output from pydantic by calling `to_dict()` of customer_reviews
        if self.customer_reviews:
            _dict['customerReviews'] = self.customer_reviews.to_dict()
        # override the default output from pydantic by calling `to_dict()` of customer_review_summarizations
        if self.customer_review_summarizations:
            _dict['customerReviewSummarizations'] = self.customer_review_summarizations.to_dict()
        # override the default output from pydantic by calling `to_dict()` of game_center_detail
        if self.game_center_detail:
            _dict['gameCenterDetail'] = self.game_center_detail.to_dict()
        # override the default output from pydantic by calling `to_dict()` of app_store_version_experiments_v2
        if self.app_store_version_experiments_v2:
            _dict['appStoreVersionExperimentsV2'] = self.app_store_version_experiments_v2.to_dict()
        # override the default output from pydantic by calling `to_dict()` of alternative_distribution_key
        if self.alternative_distribution_key:
            _dict['alternativeDistributionKey'] = self.alternative_distribution_key.to_dict()
        # override the default output from pydantic by calling `to_dict()` of analytics_report_requests
        if self.analytics_report_requests:
            _dict['analyticsReportRequests'] = self.analytics_report_requests.to_dict()
        # override the default output from pydantic by calling `to_dict()` of marketplace_search_detail
        if self.marketplace_search_detail:
            _dict['marketplaceSearchDetail'] = self.marketplace_search_detail.to_dict()
        # override the default output from pydantic by calling `to_dict()` of background_assets
        if self.background_assets:
            _dict['backgroundAssets'] = self.background_assets.to_dict()
        # override the default output from pydantic by calling `to_dict()` of beta_feedback_screenshot_submissions
        if self.beta_feedback_screenshot_submissions:
            _dict['betaFeedbackScreenshotSubmissions'] = self.beta_feedback_screenshot_submissions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of beta_feedback_crash_submissions
        if self.beta_feedback_crash_submissions:
            _dict['betaFeedbackCrashSubmissions'] = self.beta_feedback_crash_submissions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of webhooks
        if self.webhooks:
            _dict['webhooks'] = self.webhooks.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AppRelationships from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accessibilityDeclarations": AnalyticsReportInstanceRelationshipsSegments.from_dict(obj["accessibilityDeclarations"]) if obj.get("accessibilityDeclarations") is not None else None,
            "appEncryptionDeclarations": AppRelationshipsAppEncryptionDeclarations.from_dict(obj["appEncryptionDeclarations"]) if obj.get("appEncryptionDeclarations") is not None else None,
            "ciProduct": AppRelationshipsCiProduct.from_dict(obj["ciProduct"]) if obj.get("ciProduct") is not None else None,
            "betaTesters": AnalyticsReportInstanceRelationshipsSegments.from_dict(obj["betaTesters"]) if obj.get("betaTesters") is not None else None,
            "betaGroups": AppRelationshipsBetaGroups.from_dict(obj["betaGroups"]) if obj.get("betaGroups") is not None else None,
            "appStoreVersions": AppRelationshipsAppStoreVersions.from_dict(obj["appStoreVersions"]) if obj.get("appStoreVersions") is not None else None,
            "preReleaseVersions": AppRelationshipsPreReleaseVersions.from_dict(obj["preReleaseVersions"]) if obj.get("preReleaseVersions") is not None else None,
            "betaAppLocalizations": AppRelationshipsBetaAppLocalizations.from_dict(obj["betaAppLocalizations"]) if obj.get("betaAppLocalizations") is not None else None,
            "builds": AppRelationshipsBuilds.from_dict(obj["builds"]) if obj.get("builds") is not None else None,
            "betaLicenseAgreement": AppRelationshipsBetaLicenseAgreement.from_dict(obj["betaLicenseAgreement"]) if obj.get("betaLicenseAgreement") is not None else None,
            "betaAppReviewDetail": AppRelationshipsBetaAppReviewDetail.from_dict(obj["betaAppReviewDetail"]) if obj.get("betaAppReviewDetail") is not None else None,
            "appInfos": AppRelationshipsAppInfos.from_dict(obj["appInfos"]) if obj.get("appInfos") is not None else None,
            "appClips": AppRelationshipsAppClips.from_dict(obj["appClips"]) if obj.get("appClips") is not None else None,
            "appPricePoints": AnalyticsReportInstanceRelationshipsSegments.from_dict(obj["appPricePoints"]) if obj.get("appPricePoints") is not None else None,
            "endUserLicenseAgreement": AppRelationshipsEndUserLicenseAgreement.from_dict(obj["endUserLicenseAgreement"]) if obj.get("endUserLicenseAgreement") is not None else None,
            "appPriceSchedule": AnalyticsReportInstanceRelationshipsSegments.from_dict(obj["appPriceSchedule"]) if obj.get("appPriceSchedule") is not None else None,
            "appAvailabilityV2": AnalyticsReportInstanceRelationshipsSegments.from_dict(obj["appAvailabilityV2"]) if obj.get("appAvailabilityV2") is not None else None,
            "inAppPurchases": AppRelationshipsInAppPurchases.from_dict(obj["inAppPurchases"]) if obj.get("inAppPurchases") is not None else None,
            "subscriptionGroups": AppRelationshipsSubscriptionGroups.from_dict(obj["subscriptionGroups"]) if obj.get("subscriptionGroups") is not None else None,
            "gameCenterEnabledVersions": AppRelationshipsGameCenterEnabledVersions.from_dict(obj["gameCenterEnabledVersions"]) if obj.get("gameCenterEnabledVersions") is not None else None,
            "perfPowerMetrics": AnalyticsReportInstanceRelationshipsSegments.from_dict(obj["perfPowerMetrics"]) if obj.get("perfPowerMetrics") is not None else None,
            "appCustomProductPages": AppRelationshipsAppCustomProductPages.from_dict(obj["appCustomProductPages"]) if obj.get("appCustomProductPages") is not None else None,
            "inAppPurchasesV2": AppRelationshipsInAppPurchasesV2.from_dict(obj["inAppPurchasesV2"]) if obj.get("inAppPurchasesV2") is not None else None,
            "promotedPurchases": AppRelationshipsPromotedPurchases.from_dict(obj["promotedPurchases"]) if obj.get("promotedPurchases") is not None else None,
            "appEvents": AppRelationshipsAppEvents.from_dict(obj["appEvents"]) if obj.get("appEvents") is not None else None,
            "reviewSubmissions": AppRelationshipsReviewSubmissions.from_dict(obj["reviewSubmissions"]) if obj.get("reviewSubmissions") is not None else None,
            "subscriptionGracePeriod": AppRelationshipsSubscriptionGracePeriod.from_dict(obj["subscriptionGracePeriod"]) if obj.get("subscriptionGracePeriod") is not None else None,
            "customerReviews": AnalyticsReportInstanceRelationshipsSegments.from_dict(obj["customerReviews"]) if obj.get("customerReviews") is not None else None,
            "customerReviewSummarizations": AnalyticsReportInstanceRelationshipsSegments.from_dict(obj["customerReviewSummarizations"]) if obj.get("customerReviewSummarizations") is not None else None,
            "gameCenterDetail": AppRelationshipsGameCenterDetail.from_dict(obj["gameCenterDetail"]) if obj.get("gameCenterDetail") is not None else None,
            "appStoreVersionExperimentsV2": AppStoreVersionRelationshipsAppStoreVersionExperiments.from_dict(obj["appStoreVersionExperimentsV2"]) if obj.get("appStoreVersionExperimentsV2") is not None else None,
            "alternativeDistributionKey": AnalyticsReportInstanceRelationshipsSegments.from_dict(obj["alternativeDistributionKey"]) if obj.get("alternativeDistributionKey") is not None else None,
            "analyticsReportRequests": AnalyticsReportInstanceRelationshipsSegments.from_dict(obj["analyticsReportRequests"]) if obj.get("analyticsReportRequests") is not None else None,
            "marketplaceSearchDetail": AnalyticsReportInstanceRelationshipsSegments.from_dict(obj["marketplaceSearchDetail"]) if obj.get("marketplaceSearchDetail") is not None else None,
            "backgroundAssets": AnalyticsReportInstanceRelationshipsSegments.from_dict(obj["backgroundAssets"]) if obj.get("backgroundAssets") is not None else None,
            "betaFeedbackScreenshotSubmissions": AnalyticsReportInstanceRelationshipsSegments.from_dict(obj["betaFeedbackScreenshotSubmissions"]) if obj.get("betaFeedbackScreenshotSubmissions") is not None else None,
            "betaFeedbackCrashSubmissions": AnalyticsReportInstanceRelationshipsSegments.from_dict(obj["betaFeedbackCrashSubmissions"]) if obj.get("betaFeedbackCrashSubmissions") is not None else None,
            "webhooks": AnalyticsReportInstanceRelationshipsSegments.from_dict(obj["webhooks"]) if obj.get("webhooks") is not None else None
        })
        return _obj


