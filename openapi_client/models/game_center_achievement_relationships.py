# coding: utf-8

"""
    App Store Connect API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.game_center_achievement_relationships_activity import GameCenterAchievementRelationshipsActivity
from openapi_client.models.game_center_achievement_relationships_game_center_group import GameCenterAchievementRelationshipsGameCenterGroup
from openapi_client.models.game_center_achievement_relationships_group_achievement import GameCenterAchievementRelationshipsGroupAchievement
from openapi_client.models.game_center_achievement_relationships_localizations import GameCenterAchievementRelationshipsLocalizations
from openapi_client.models.game_center_achievement_relationships_releases import GameCenterAchievementRelationshipsReleases
from openapi_client.models.game_center_achievement_release_relationships_game_center_detail import GameCenterAchievementReleaseRelationshipsGameCenterDetail
from typing import Optional, Set
from typing_extensions import Self

class GameCenterAchievementRelationships(BaseModel):
    """
    GameCenterAchievementRelationships
    """ # noqa: E501
    game_center_detail: Optional[GameCenterAchievementReleaseRelationshipsGameCenterDetail] = Field(default=None, alias="gameCenterDetail")
    game_center_group: Optional[GameCenterAchievementRelationshipsGameCenterGroup] = Field(default=None, alias="gameCenterGroup")
    group_achievement: Optional[GameCenterAchievementRelationshipsGroupAchievement] = Field(default=None, alias="groupAchievement")
    localizations: Optional[GameCenterAchievementRelationshipsLocalizations] = None
    releases: Optional[GameCenterAchievementRelationshipsReleases] = None
    activity: Optional[GameCenterAchievementRelationshipsActivity] = None
    __properties: ClassVar[List[str]] = ["gameCenterDetail", "gameCenterGroup", "groupAchievement", "localizations", "releases", "activity"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GameCenterAchievementRelationships from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of game_center_detail
        if self.game_center_detail:
            _dict['gameCenterDetail'] = self.game_center_detail.to_dict()
        # override the default output from pydantic by calling `to_dict()` of game_center_group
        if self.game_center_group:
            _dict['gameCenterGroup'] = self.game_center_group.to_dict()
        # override the default output from pydantic by calling `to_dict()` of group_achievement
        if self.group_achievement:
            _dict['groupAchievement'] = self.group_achievement.to_dict()
        # override the default output from pydantic by calling `to_dict()` of localizations
        if self.localizations:
            _dict['localizations'] = self.localizations.to_dict()
        # override the default output from pydantic by calling `to_dict()` of releases
        if self.releases:
            _dict['releases'] = self.releases.to_dict()
        # override the default output from pydantic by calling `to_dict()` of activity
        if self.activity:
            _dict['activity'] = self.activity.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GameCenterAchievementRelationships from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "gameCenterDetail": GameCenterAchievementReleaseRelationshipsGameCenterDetail.from_dict(obj["gameCenterDetail"]) if obj.get("gameCenterDetail") is not None else None,
            "gameCenterGroup": GameCenterAchievementRelationshipsGameCenterGroup.from_dict(obj["gameCenterGroup"]) if obj.get("gameCenterGroup") is not None else None,
            "groupAchievement": GameCenterAchievementRelationshipsGroupAchievement.from_dict(obj["groupAchievement"]) if obj.get("groupAchievement") is not None else None,
            "localizations": GameCenterAchievementRelationshipsLocalizations.from_dict(obj["localizations"]) if obj.get("localizations") is not None else None,
            "releases": GameCenterAchievementRelationshipsReleases.from_dict(obj["releases"]) if obj.get("releases") is not None else None,
            "activity": GameCenterAchievementRelationshipsActivity.from_dict(obj["activity"]) if obj.get("activity") is not None else None
        })
        return _obj


