# coding: utf-8

"""
    App Store Connect API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.analytics_report_instance_relationships_segments import AnalyticsReportInstanceRelationshipsSegments
from openapi_client.models.app_clip_default_experience_relationships_release_with_app_store_version import AppClipDefaultExperienceRelationshipsReleaseWithAppStoreVersion
from openapi_client.models.app_relationships_beta_groups import AppRelationshipsBetaGroups
from openapi_client.models.beta_app_localization_relationships_app import BetaAppLocalizationRelationshipsApp
from openapi_client.models.beta_group_relationships_beta_testers import BetaGroupRelationshipsBetaTesters
from openapi_client.models.build_relationships_app_encryption_declaration import BuildRelationshipsAppEncryptionDeclaration
from openapi_client.models.build_relationships_beta_app_review_submission import BuildRelationshipsBetaAppReviewSubmission
from openapi_client.models.build_relationships_beta_build_localizations import BuildRelationshipsBetaBuildLocalizations
from openapi_client.models.build_relationships_build_beta_detail import BuildRelationshipsBuildBetaDetail
from openapi_client.models.build_relationships_build_bundles import BuildRelationshipsBuildBundles
from openapi_client.models.build_relationships_icons import BuildRelationshipsIcons
from openapi_client.models.build_relationships_pre_release_version import BuildRelationshipsPreReleaseVersion
from typing import Optional, Set
from typing_extensions import Self

class BuildRelationships(BaseModel):
    """
    BuildRelationships
    """ # noqa: E501
    pre_release_version: Optional[BuildRelationshipsPreReleaseVersion] = Field(default=None, alias="preReleaseVersion")
    individual_testers: Optional[BetaGroupRelationshipsBetaTesters] = Field(default=None, alias="individualTesters")
    beta_groups: Optional[AppRelationshipsBetaGroups] = Field(default=None, alias="betaGroups")
    beta_build_localizations: Optional[BuildRelationshipsBetaBuildLocalizations] = Field(default=None, alias="betaBuildLocalizations")
    app_encryption_declaration: Optional[BuildRelationshipsAppEncryptionDeclaration] = Field(default=None, alias="appEncryptionDeclaration")
    beta_app_review_submission: Optional[BuildRelationshipsBetaAppReviewSubmission] = Field(default=None, alias="betaAppReviewSubmission")
    app: Optional[BetaAppLocalizationRelationshipsApp] = None
    build_beta_detail: Optional[BuildRelationshipsBuildBetaDetail] = Field(default=None, alias="buildBetaDetail")
    app_store_version: Optional[AppClipDefaultExperienceRelationshipsReleaseWithAppStoreVersion] = Field(default=None, alias="appStoreVersion")
    icons: Optional[BuildRelationshipsIcons] = None
    build_bundles: Optional[BuildRelationshipsBuildBundles] = Field(default=None, alias="buildBundles")
    perf_power_metrics: Optional[AnalyticsReportInstanceRelationshipsSegments] = Field(default=None, alias="perfPowerMetrics")
    diagnostic_signatures: Optional[AnalyticsReportInstanceRelationshipsSegments] = Field(default=None, alias="diagnosticSignatures")
    __properties: ClassVar[List[str]] = ["preReleaseVersion", "individualTesters", "betaGroups", "betaBuildLocalizations", "appEncryptionDeclaration", "betaAppReviewSubmission", "app", "buildBetaDetail", "appStoreVersion", "icons", "buildBundles", "perfPowerMetrics", "diagnosticSignatures"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BuildRelationships from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of pre_release_version
        if self.pre_release_version:
            _dict['preReleaseVersion'] = self.pre_release_version.to_dict()
        # override the default output from pydantic by calling `to_dict()` of individual_testers
        if self.individual_testers:
            _dict['individualTesters'] = self.individual_testers.to_dict()
        # override the default output from pydantic by calling `to_dict()` of beta_groups
        if self.beta_groups:
            _dict['betaGroups'] = self.beta_groups.to_dict()
        # override the default output from pydantic by calling `to_dict()` of beta_build_localizations
        if self.beta_build_localizations:
            _dict['betaBuildLocalizations'] = self.beta_build_localizations.to_dict()
        # override the default output from pydantic by calling `to_dict()` of app_encryption_declaration
        if self.app_encryption_declaration:
            _dict['appEncryptionDeclaration'] = self.app_encryption_declaration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of beta_app_review_submission
        if self.beta_app_review_submission:
            _dict['betaAppReviewSubmission'] = self.beta_app_review_submission.to_dict()
        # override the default output from pydantic by calling `to_dict()` of app
        if self.app:
            _dict['app'] = self.app.to_dict()
        # override the default output from pydantic by calling `to_dict()` of build_beta_detail
        if self.build_beta_detail:
            _dict['buildBetaDetail'] = self.build_beta_detail.to_dict()
        # override the default output from pydantic by calling `to_dict()` of app_store_version
        if self.app_store_version:
            _dict['appStoreVersion'] = self.app_store_version.to_dict()
        # override the default output from pydantic by calling `to_dict()` of icons
        if self.icons:
            _dict['icons'] = self.icons.to_dict()
        # override the default output from pydantic by calling `to_dict()` of build_bundles
        if self.build_bundles:
            _dict['buildBundles'] = self.build_bundles.to_dict()
        # override the default output from pydantic by calling `to_dict()` of perf_power_metrics
        if self.perf_power_metrics:
            _dict['perfPowerMetrics'] = self.perf_power_metrics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of diagnostic_signatures
        if self.diagnostic_signatures:
            _dict['diagnosticSignatures'] = self.diagnostic_signatures.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BuildRelationships from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "preReleaseVersion": BuildRelationshipsPreReleaseVersion.from_dict(obj["preReleaseVersion"]) if obj.get("preReleaseVersion") is not None else None,
            "individualTesters": BetaGroupRelationshipsBetaTesters.from_dict(obj["individualTesters"]) if obj.get("individualTesters") is not None else None,
            "betaGroups": AppRelationshipsBetaGroups.from_dict(obj["betaGroups"]) if obj.get("betaGroups") is not None else None,
            "betaBuildLocalizations": BuildRelationshipsBetaBuildLocalizations.from_dict(obj["betaBuildLocalizations"]) if obj.get("betaBuildLocalizations") is not None else None,
            "appEncryptionDeclaration": BuildRelationshipsAppEncryptionDeclaration.from_dict(obj["appEncryptionDeclaration"]) if obj.get("appEncryptionDeclaration") is not None else None,
            "betaAppReviewSubmission": BuildRelationshipsBetaAppReviewSubmission.from_dict(obj["betaAppReviewSubmission"]) if obj.get("betaAppReviewSubmission") is not None else None,
            "app": BetaAppLocalizationRelationshipsApp.from_dict(obj["app"]) if obj.get("app") is not None else None,
            "buildBetaDetail": BuildRelationshipsBuildBetaDetail.from_dict(obj["buildBetaDetail"]) if obj.get("buildBetaDetail") is not None else None,
            "appStoreVersion": AppClipDefaultExperienceRelationshipsReleaseWithAppStoreVersion.from_dict(obj["appStoreVersion"]) if obj.get("appStoreVersion") is not None else None,
            "icons": BuildRelationshipsIcons.from_dict(obj["icons"]) if obj.get("icons") is not None else None,
            "buildBundles": BuildRelationshipsBuildBundles.from_dict(obj["buildBundles"]) if obj.get("buildBundles") is not None else None,
            "perfPowerMetrics": AnalyticsReportInstanceRelationshipsSegments.from_dict(obj["perfPowerMetrics"]) if obj.get("perfPowerMetrics") is not None else None,
            "diagnosticSignatures": AnalyticsReportInstanceRelationshipsSegments.from_dict(obj["diagnosticSignatures"]) if obj.get("diagnosticSignatures") is not None else None
        })
        return _obj


