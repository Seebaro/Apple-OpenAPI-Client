# coding: utf-8

"""
    App Store Connect API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.build_bundle_relationships_app_clip_domain_cache_status import BuildBundleRelationshipsAppClipDomainCacheStatus
from openapi_client.models.build_bundle_relationships_beta_app_clip_invocations import BuildBundleRelationshipsBetaAppClipInvocations
from openapi_client.models.build_bundle_relationships_build_bundle_file_sizes import BuildBundleRelationshipsBuildBundleFileSizes
from typing import Optional, Set
from typing_extensions import Self

class BuildBundleRelationships(BaseModel):
    """
    BuildBundleRelationships
    """ # noqa: E501
    app_clip_domain_cache_status: Optional[BuildBundleRelationshipsAppClipDomainCacheStatus] = Field(default=None, alias="appClipDomainCacheStatus")
    app_clip_domain_debug_status: Optional[BuildBundleRelationshipsAppClipDomainCacheStatus] = Field(default=None, alias="appClipDomainDebugStatus")
    beta_app_clip_invocations: Optional[BuildBundleRelationshipsBetaAppClipInvocations] = Field(default=None, alias="betaAppClipInvocations")
    build_bundle_file_sizes: Optional[BuildBundleRelationshipsBuildBundleFileSizes] = Field(default=None, alias="buildBundleFileSizes")
    __properties: ClassVar[List[str]] = ["appClipDomainCacheStatus", "appClipDomainDebugStatus", "betaAppClipInvocations", "buildBundleFileSizes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BuildBundleRelationships from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of app_clip_domain_cache_status
        if self.app_clip_domain_cache_status:
            _dict['appClipDomainCacheStatus'] = self.app_clip_domain_cache_status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of app_clip_domain_debug_status
        if self.app_clip_domain_debug_status:
            _dict['appClipDomainDebugStatus'] = self.app_clip_domain_debug_status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of beta_app_clip_invocations
        if self.beta_app_clip_invocations:
            _dict['betaAppClipInvocations'] = self.beta_app_clip_invocations.to_dict()
        # override the default output from pydantic by calling `to_dict()` of build_bundle_file_sizes
        if self.build_bundle_file_sizes:
            _dict['buildBundleFileSizes'] = self.build_bundle_file_sizes.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BuildBundleRelationships from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "appClipDomainCacheStatus": BuildBundleRelationshipsAppClipDomainCacheStatus.from_dict(obj["appClipDomainCacheStatus"]) if obj.get("appClipDomainCacheStatus") is not None else None,
            "appClipDomainDebugStatus": BuildBundleRelationshipsAppClipDomainCacheStatus.from_dict(obj["appClipDomainDebugStatus"]) if obj.get("appClipDomainDebugStatus") is not None else None,
            "betaAppClipInvocations": BuildBundleRelationshipsBetaAppClipInvocations.from_dict(obj["betaAppClipInvocations"]) if obj.get("betaAppClipInvocations") is not None else None,
            "buildBundleFileSizes": BuildBundleRelationshipsBuildBundleFileSizes.from_dict(obj["buildBundleFileSizes"]) if obj.get("buildBundleFileSizes") is not None else None
        })
        return _obj


