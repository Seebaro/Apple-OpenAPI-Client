# coding: utf-8

"""
    App Store Connect API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.game_center_activity_relationships_achievements import GameCenterActivityRelationshipsAchievements
from openapi_client.models.game_center_activity_relationships_leaderboards import GameCenterActivityRelationshipsLeaderboards
from openapi_client.models.game_center_detail_relationships_game_center_activities import GameCenterDetailRelationshipsGameCenterActivities
from openapi_client.models.game_center_detail_relationships_game_center_challenges import GameCenterDetailRelationshipsGameCenterChallenges
from openapi_client.models.game_center_detail_relationships_game_center_leaderboard_sets import GameCenterDetailRelationshipsGameCenterLeaderboardSets
from openapi_client.models.game_center_group_relationships_game_center_details import GameCenterGroupRelationshipsGameCenterDetails
from typing import Optional, Set
from typing_extensions import Self

class GameCenterGroupRelationships(BaseModel):
    """
    GameCenterGroupRelationships
    """ # noqa: E501
    game_center_details: Optional[GameCenterGroupRelationshipsGameCenterDetails] = Field(default=None, alias="gameCenterDetails")
    game_center_leaderboards: Optional[GameCenterActivityRelationshipsLeaderboards] = Field(default=None, alias="gameCenterLeaderboards")
    game_center_leaderboard_sets: Optional[GameCenterDetailRelationshipsGameCenterLeaderboardSets] = Field(default=None, alias="gameCenterLeaderboardSets")
    game_center_achievements: Optional[GameCenterActivityRelationshipsAchievements] = Field(default=None, alias="gameCenterAchievements")
    game_center_activities: Optional[GameCenterDetailRelationshipsGameCenterActivities] = Field(default=None, alias="gameCenterActivities")
    game_center_challenges: Optional[GameCenterDetailRelationshipsGameCenterChallenges] = Field(default=None, alias="gameCenterChallenges")
    __properties: ClassVar[List[str]] = ["gameCenterDetails", "gameCenterLeaderboards", "gameCenterLeaderboardSets", "gameCenterAchievements", "gameCenterActivities", "gameCenterChallenges"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GameCenterGroupRelationships from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of game_center_details
        if self.game_center_details:
            _dict['gameCenterDetails'] = self.game_center_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of game_center_leaderboards
        if self.game_center_leaderboards:
            _dict['gameCenterLeaderboards'] = self.game_center_leaderboards.to_dict()
        # override the default output from pydantic by calling `to_dict()` of game_center_leaderboard_sets
        if self.game_center_leaderboard_sets:
            _dict['gameCenterLeaderboardSets'] = self.game_center_leaderboard_sets.to_dict()
        # override the default output from pydantic by calling `to_dict()` of game_center_achievements
        if self.game_center_achievements:
            _dict['gameCenterAchievements'] = self.game_center_achievements.to_dict()
        # override the default output from pydantic by calling `to_dict()` of game_center_activities
        if self.game_center_activities:
            _dict['gameCenterActivities'] = self.game_center_activities.to_dict()
        # override the default output from pydantic by calling `to_dict()` of game_center_challenges
        if self.game_center_challenges:
            _dict['gameCenterChallenges'] = self.game_center_challenges.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GameCenterGroupRelationships from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "gameCenterDetails": GameCenterGroupRelationshipsGameCenterDetails.from_dict(obj["gameCenterDetails"]) if obj.get("gameCenterDetails") is not None else None,
            "gameCenterLeaderboards": GameCenterActivityRelationshipsLeaderboards.from_dict(obj["gameCenterLeaderboards"]) if obj.get("gameCenterLeaderboards") is not None else None,
            "gameCenterLeaderboardSets": GameCenterDetailRelationshipsGameCenterLeaderboardSets.from_dict(obj["gameCenterLeaderboardSets"]) if obj.get("gameCenterLeaderboardSets") is not None else None,
            "gameCenterAchievements": GameCenterActivityRelationshipsAchievements.from_dict(obj["gameCenterAchievements"]) if obj.get("gameCenterAchievements") is not None else None,
            "gameCenterActivities": GameCenterDetailRelationshipsGameCenterActivities.from_dict(obj["gameCenterActivities"]) if obj.get("gameCenterActivities") is not None else None,
            "gameCenterChallenges": GameCenterDetailRelationshipsGameCenterChallenges.from_dict(obj["gameCenterChallenges"]) if obj.get("gameCenterChallenges") is not None else None
        })
        return _obj


