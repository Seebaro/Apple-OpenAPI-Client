# coding: utf-8

"""
    App Store Connect API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.analytics_report_instance_relationships_segments import AnalyticsReportInstanceRelationshipsSegments
from openapi_client.models.background_asset_version_relationships_asset_file import BackgroundAssetVersionRelationshipsAssetFile
from openapi_client.models.background_asset_version_relationships_internal_beta_release import BackgroundAssetVersionRelationshipsInternalBetaRelease
from typing import Optional, Set
from typing_extensions import Self

class BackgroundAssetVersionRelationships(BaseModel):
    """
    BackgroundAssetVersionRelationships
    """ # noqa: E501
    internal_beta_release: Optional[BackgroundAssetVersionRelationshipsInternalBetaRelease] = Field(default=None, alias="internalBetaRelease")
    asset_file: Optional[BackgroundAssetVersionRelationshipsAssetFile] = Field(default=None, alias="assetFile")
    manifest_file: Optional[BackgroundAssetVersionRelationshipsAssetFile] = Field(default=None, alias="manifestFile")
    background_asset_upload_files: Optional[AnalyticsReportInstanceRelationshipsSegments] = Field(default=None, alias="backgroundAssetUploadFiles")
    __properties: ClassVar[List[str]] = ["internalBetaRelease", "assetFile", "manifestFile", "backgroundAssetUploadFiles"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BackgroundAssetVersionRelationships from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of internal_beta_release
        if self.internal_beta_release:
            _dict['internalBetaRelease'] = self.internal_beta_release.to_dict()
        # override the default output from pydantic by calling `to_dict()` of asset_file
        if self.asset_file:
            _dict['assetFile'] = self.asset_file.to_dict()
        # override the default output from pydantic by calling `to_dict()` of manifest_file
        if self.manifest_file:
            _dict['manifestFile'] = self.manifest_file.to_dict()
        # override the default output from pydantic by calling `to_dict()` of background_asset_upload_files
        if self.background_asset_upload_files:
            _dict['backgroundAssetUploadFiles'] = self.background_asset_upload_files.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BackgroundAssetVersionRelationships from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "internalBetaRelease": BackgroundAssetVersionRelationshipsInternalBetaRelease.from_dict(obj["internalBetaRelease"]) if obj.get("internalBetaRelease") is not None else None,
            "assetFile": BackgroundAssetVersionRelationshipsAssetFile.from_dict(obj["assetFile"]) if obj.get("assetFile") is not None else None,
            "manifestFile": BackgroundAssetVersionRelationshipsAssetFile.from_dict(obj["manifestFile"]) if obj.get("manifestFile") is not None else None,
            "backgroundAssetUploadFiles": AnalyticsReportInstanceRelationshipsSegments.from_dict(obj["backgroundAssetUploadFiles"]) if obj.get("backgroundAssetUploadFiles") is not None else None
        })
        return _obj


