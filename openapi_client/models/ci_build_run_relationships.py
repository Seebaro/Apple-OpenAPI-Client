# coding: utf-8

"""
    App Store Connect API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.analytics_report_instance_relationships_segments import AnalyticsReportInstanceRelationshipsSegments
from openapi_client.models.app_relationships_builds import AppRelationshipsBuilds
from openapi_client.models.ci_build_run_relationships_product import CiBuildRunRelationshipsProduct
from openapi_client.models.ci_build_run_relationships_pull_request import CiBuildRunRelationshipsPullRequest
from openapi_client.models.ci_build_run_relationships_source_branch_or_tag import CiBuildRunRelationshipsSourceBranchOrTag
from openapi_client.models.ci_build_run_relationships_workflow import CiBuildRunRelationshipsWorkflow
from typing import Optional, Set
from typing_extensions import Self

class CiBuildRunRelationships(BaseModel):
    """
    CiBuildRunRelationships
    """ # noqa: E501
    builds: Optional[AppRelationshipsBuilds] = None
    workflow: Optional[CiBuildRunRelationshipsWorkflow] = None
    product: Optional[CiBuildRunRelationshipsProduct] = None
    source_branch_or_tag: Optional[CiBuildRunRelationshipsSourceBranchOrTag] = Field(default=None, alias="sourceBranchOrTag")
    destination_branch: Optional[CiBuildRunRelationshipsSourceBranchOrTag] = Field(default=None, alias="destinationBranch")
    actions: Optional[AnalyticsReportInstanceRelationshipsSegments] = None
    pull_request: Optional[CiBuildRunRelationshipsPullRequest] = Field(default=None, alias="pullRequest")
    __properties: ClassVar[List[str]] = ["builds", "workflow", "product", "sourceBranchOrTag", "destinationBranch", "actions", "pullRequest"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CiBuildRunRelationships from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of builds
        if self.builds:
            _dict['builds'] = self.builds.to_dict()
        # override the default output from pydantic by calling `to_dict()` of workflow
        if self.workflow:
            _dict['workflow'] = self.workflow.to_dict()
        # override the default output from pydantic by calling `to_dict()` of product
        if self.product:
            _dict['product'] = self.product.to_dict()
        # override the default output from pydantic by calling `to_dict()` of source_branch_or_tag
        if self.source_branch_or_tag:
            _dict['sourceBranchOrTag'] = self.source_branch_or_tag.to_dict()
        # override the default output from pydantic by calling `to_dict()` of destination_branch
        if self.destination_branch:
            _dict['destinationBranch'] = self.destination_branch.to_dict()
        # override the default output from pydantic by calling `to_dict()` of actions
        if self.actions:
            _dict['actions'] = self.actions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pull_request
        if self.pull_request:
            _dict['pullRequest'] = self.pull_request.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CiBuildRunRelationships from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "builds": AppRelationshipsBuilds.from_dict(obj["builds"]) if obj.get("builds") is not None else None,
            "workflow": CiBuildRunRelationshipsWorkflow.from_dict(obj["workflow"]) if obj.get("workflow") is not None else None,
            "product": CiBuildRunRelationshipsProduct.from_dict(obj["product"]) if obj.get("product") is not None else None,
            "sourceBranchOrTag": CiBuildRunRelationshipsSourceBranchOrTag.from_dict(obj["sourceBranchOrTag"]) if obj.get("sourceBranchOrTag") is not None else None,
            "destinationBranch": CiBuildRunRelationshipsSourceBranchOrTag.from_dict(obj["destinationBranch"]) if obj.get("destinationBranch") is not None else None,
            "actions": AnalyticsReportInstanceRelationshipsSegments.from_dict(obj["actions"]) if obj.get("actions") is not None else None,
            "pullRequest": CiBuildRunRelationshipsPullRequest.from_dict(obj["pullRequest"]) if obj.get("pullRequest") is not None else None
        })
        return _obj


