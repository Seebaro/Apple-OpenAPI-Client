# coding: utf-8

"""
    App Store Connect API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.in_app_purchase_v2_relationships_app_store_review_screenshot import InAppPurchaseV2RelationshipsAppStoreReviewScreenshot
from openapi_client.models.in_app_purchase_v2_relationships_content import InAppPurchaseV2RelationshipsContent
from openapi_client.models.in_app_purchase_v2_relationships_iap_price_schedule import InAppPurchaseV2RelationshipsIapPriceSchedule
from openapi_client.models.in_app_purchase_v2_relationships_images import InAppPurchaseV2RelationshipsImages
from openapi_client.models.in_app_purchase_v2_relationships_in_app_purchase_availability import InAppPurchaseV2RelationshipsInAppPurchaseAvailability
from openapi_client.models.in_app_purchase_v2_relationships_in_app_purchase_localizations import InAppPurchaseV2RelationshipsInAppPurchaseLocalizations
from openapi_client.models.in_app_purchase_v2_relationships_price_points import InAppPurchaseV2RelationshipsPricePoints
from openapi_client.models.in_app_purchase_v2_relationships_promoted_purchase import InAppPurchaseV2RelationshipsPromotedPurchase
from typing import Optional, Set
from typing_extensions import Self

class InAppPurchaseV2Relationships(BaseModel):
    """
    InAppPurchaseV2Relationships
    """ # noqa: E501
    in_app_purchase_localizations: Optional[InAppPurchaseV2RelationshipsInAppPurchaseLocalizations] = Field(default=None, alias="inAppPurchaseLocalizations")
    price_points: Optional[InAppPurchaseV2RelationshipsPricePoints] = Field(default=None, alias="pricePoints")
    content: Optional[InAppPurchaseV2RelationshipsContent] = None
    app_store_review_screenshot: Optional[InAppPurchaseV2RelationshipsAppStoreReviewScreenshot] = Field(default=None, alias="appStoreReviewScreenshot")
    promoted_purchase: Optional[InAppPurchaseV2RelationshipsPromotedPurchase] = Field(default=None, alias="promotedPurchase")
    iap_price_schedule: Optional[InAppPurchaseV2RelationshipsIapPriceSchedule] = Field(default=None, alias="iapPriceSchedule")
    in_app_purchase_availability: Optional[InAppPurchaseV2RelationshipsInAppPurchaseAvailability] = Field(default=None, alias="inAppPurchaseAvailability")
    images: Optional[InAppPurchaseV2RelationshipsImages] = None
    __properties: ClassVar[List[str]] = ["inAppPurchaseLocalizations", "pricePoints", "content", "appStoreReviewScreenshot", "promotedPurchase", "iapPriceSchedule", "inAppPurchaseAvailability", "images"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InAppPurchaseV2Relationships from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of in_app_purchase_localizations
        if self.in_app_purchase_localizations:
            _dict['inAppPurchaseLocalizations'] = self.in_app_purchase_localizations.to_dict()
        # override the default output from pydantic by calling `to_dict()` of price_points
        if self.price_points:
            _dict['pricePoints'] = self.price_points.to_dict()
        # override the default output from pydantic by calling `to_dict()` of content
        if self.content:
            _dict['content'] = self.content.to_dict()
        # override the default output from pydantic by calling `to_dict()` of app_store_review_screenshot
        if self.app_store_review_screenshot:
            _dict['appStoreReviewScreenshot'] = self.app_store_review_screenshot.to_dict()
        # override the default output from pydantic by calling `to_dict()` of promoted_purchase
        if self.promoted_purchase:
            _dict['promotedPurchase'] = self.promoted_purchase.to_dict()
        # override the default output from pydantic by calling `to_dict()` of iap_price_schedule
        if self.iap_price_schedule:
            _dict['iapPriceSchedule'] = self.iap_price_schedule.to_dict()
        # override the default output from pydantic by calling `to_dict()` of in_app_purchase_availability
        if self.in_app_purchase_availability:
            _dict['inAppPurchaseAvailability'] = self.in_app_purchase_availability.to_dict()
        # override the default output from pydantic by calling `to_dict()` of images
        if self.images:
            _dict['images'] = self.images.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InAppPurchaseV2Relationships from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "inAppPurchaseLocalizations": InAppPurchaseV2RelationshipsInAppPurchaseLocalizations.from_dict(obj["inAppPurchaseLocalizations"]) if obj.get("inAppPurchaseLocalizations") is not None else None,
            "pricePoints": InAppPurchaseV2RelationshipsPricePoints.from_dict(obj["pricePoints"]) if obj.get("pricePoints") is not None else None,
            "content": InAppPurchaseV2RelationshipsContent.from_dict(obj["content"]) if obj.get("content") is not None else None,
            "appStoreReviewScreenshot": InAppPurchaseV2RelationshipsAppStoreReviewScreenshot.from_dict(obj["appStoreReviewScreenshot"]) if obj.get("appStoreReviewScreenshot") is not None else None,
            "promotedPurchase": InAppPurchaseV2RelationshipsPromotedPurchase.from_dict(obj["promotedPurchase"]) if obj.get("promotedPurchase") is not None else None,
            "iapPriceSchedule": InAppPurchaseV2RelationshipsIapPriceSchedule.from_dict(obj["iapPriceSchedule"]) if obj.get("iapPriceSchedule") is not None else None,
            "inAppPurchaseAvailability": InAppPurchaseV2RelationshipsInAppPurchaseAvailability.from_dict(obj["inAppPurchaseAvailability"]) if obj.get("inAppPurchaseAvailability") is not None else None,
            "images": InAppPurchaseV2RelationshipsImages.from_dict(obj["images"]) if obj.get("images") is not None else None
        })
        return _obj


