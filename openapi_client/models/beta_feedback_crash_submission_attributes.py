# coding: utf-8

"""
    App Store Connect API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.device_connection_type import DeviceConnectionType
from openapi_client.models.device_family import DeviceFamily
from openapi_client.models.platform import Platform
from typing import Optional, Set
from typing_extensions import Self

class BetaFeedbackCrashSubmissionAttributes(BaseModel):
    """
    BetaFeedbackCrashSubmissionAttributes
    """ # noqa: E501
    created_date: Optional[datetime] = Field(default=None, alias="createdDate")
    comment: Optional[StrictStr] = None
    email: Optional[StrictStr] = None
    device_model: Optional[StrictStr] = Field(default=None, alias="deviceModel")
    os_version: Optional[StrictStr] = Field(default=None, alias="osVersion")
    locale: Optional[StrictStr] = None
    time_zone: Optional[StrictStr] = Field(default=None, alias="timeZone")
    architecture: Optional[StrictStr] = None
    connection_type: Optional[DeviceConnectionType] = Field(default=None, alias="connectionType")
    paired_apple_watch: Optional[StrictStr] = Field(default=None, alias="pairedAppleWatch")
    app_uptime_in_milliseconds: Optional[Annotated[int, Field(le=9007199254740991, strict=True, ge=0)]] = Field(default=None, alias="appUptimeInMilliseconds")
    disk_bytes_available: Optional[Annotated[int, Field(le=9007199254740991, strict=True, ge=0)]] = Field(default=None, alias="diskBytesAvailable")
    disk_bytes_total: Optional[Annotated[int, Field(le=9007199254740991, strict=True, ge=0)]] = Field(default=None, alias="diskBytesTotal")
    battery_percentage: Optional[StrictInt] = Field(default=None, alias="batteryPercentage")
    screen_width_in_points: Optional[StrictInt] = Field(default=None, alias="screenWidthInPoints")
    screen_height_in_points: Optional[StrictInt] = Field(default=None, alias="screenHeightInPoints")
    app_platform: Optional[Platform] = Field(default=None, alias="appPlatform")
    device_platform: Optional[Platform] = Field(default=None, alias="devicePlatform")
    device_family: Optional[DeviceFamily] = Field(default=None, alias="deviceFamily")
    build_bundle_id: Optional[StrictStr] = Field(default=None, alias="buildBundleId")
    __properties: ClassVar[List[str]] = ["createdDate", "comment", "email", "deviceModel", "osVersion", "locale", "timeZone", "architecture", "connectionType", "pairedAppleWatch", "appUptimeInMilliseconds", "diskBytesAvailable", "diskBytesTotal", "batteryPercentage", "screenWidthInPoints", "screenHeightInPoints", "appPlatform", "devicePlatform", "deviceFamily", "buildBundleId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BetaFeedbackCrashSubmissionAttributes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BetaFeedbackCrashSubmissionAttributes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createdDate": obj.get("createdDate"),
            "comment": obj.get("comment"),
            "email": obj.get("email"),
            "deviceModel": obj.get("deviceModel"),
            "osVersion": obj.get("osVersion"),
            "locale": obj.get("locale"),
            "timeZone": obj.get("timeZone"),
            "architecture": obj.get("architecture"),
            "connectionType": obj.get("connectionType"),
            "pairedAppleWatch": obj.get("pairedAppleWatch"),
            "appUptimeInMilliseconds": obj.get("appUptimeInMilliseconds"),
            "diskBytesAvailable": obj.get("diskBytesAvailable"),
            "diskBytesTotal": obj.get("diskBytesTotal"),
            "batteryPercentage": obj.get("batteryPercentage"),
            "screenWidthInPoints": obj.get("screenWidthInPoints"),
            "screenHeightInPoints": obj.get("screenHeightInPoints"),
            "appPlatform": obj.get("appPlatform"),
            "devicePlatform": obj.get("devicePlatform"),
            "deviceFamily": obj.get("deviceFamily"),
            "buildBundleId": obj.get("buildBundleId")
        })
        return _obj


