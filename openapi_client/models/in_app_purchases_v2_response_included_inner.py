# coding: utf-8

"""
    App Store Connect API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from openapi_client.models.in_app_purchase_app_store_review_screenshot import InAppPurchaseAppStoreReviewScreenshot
from openapi_client.models.in_app_purchase_availability import InAppPurchaseAvailability
from openapi_client.models.in_app_purchase_content import InAppPurchaseContent
from openapi_client.models.in_app_purchase_image import InAppPurchaseImage
from openapi_client.models.in_app_purchase_localization import InAppPurchaseLocalization
from openapi_client.models.in_app_purchase_price_point import InAppPurchasePricePoint
from openapi_client.models.in_app_purchase_price_schedule import InAppPurchasePriceSchedule
from openapi_client.models.promoted_purchase import PromotedPurchase
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

INAPPPURCHASESV2RESPONSEINCLUDEDINNER_ONE_OF_SCHEMAS = ["InAppPurchaseAppStoreReviewScreenshot", "InAppPurchaseAvailability", "InAppPurchaseContent", "InAppPurchaseImage", "InAppPurchaseLocalization", "InAppPurchasePricePoint", "InAppPurchasePriceSchedule", "PromotedPurchase"]

class InAppPurchasesV2ResponseIncludedInner(BaseModel):
    """
    InAppPurchasesV2ResponseIncludedInner
    """
    # data type: InAppPurchaseLocalization
    oneof_schema_1_validator: Optional[InAppPurchaseLocalization] = None
    # data type: InAppPurchasePricePoint
    oneof_schema_2_validator: Optional[InAppPurchasePricePoint] = None
    # data type: InAppPurchaseContent
    oneof_schema_3_validator: Optional[InAppPurchaseContent] = None
    # data type: InAppPurchaseAppStoreReviewScreenshot
    oneof_schema_4_validator: Optional[InAppPurchaseAppStoreReviewScreenshot] = None
    # data type: PromotedPurchase
    oneof_schema_5_validator: Optional[PromotedPurchase] = None
    # data type: InAppPurchasePriceSchedule
    oneof_schema_6_validator: Optional[InAppPurchasePriceSchedule] = None
    # data type: InAppPurchaseAvailability
    oneof_schema_7_validator: Optional[InAppPurchaseAvailability] = None
    # data type: InAppPurchaseImage
    oneof_schema_8_validator: Optional[InAppPurchaseImage] = None
    actual_instance: Optional[Union[InAppPurchaseAppStoreReviewScreenshot, InAppPurchaseAvailability, InAppPurchaseContent, InAppPurchaseImage, InAppPurchaseLocalization, InAppPurchasePricePoint, InAppPurchasePriceSchedule, PromotedPurchase]] = None
    one_of_schemas: Set[str] = { "InAppPurchaseAppStoreReviewScreenshot", "InAppPurchaseAvailability", "InAppPurchaseContent", "InAppPurchaseImage", "InAppPurchaseLocalization", "InAppPurchasePricePoint", "InAppPurchasePriceSchedule", "PromotedPurchase" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = InAppPurchasesV2ResponseIncludedInner.model_construct()
        error_messages = []
        match = 0
        # validate data type: InAppPurchaseLocalization
        if not isinstance(v, InAppPurchaseLocalization):
            error_messages.append(f"Error! Input type `{type(v)}` is not `InAppPurchaseLocalization`")
        else:
            match += 1
        # validate data type: InAppPurchasePricePoint
        if not isinstance(v, InAppPurchasePricePoint):
            error_messages.append(f"Error! Input type `{type(v)}` is not `InAppPurchasePricePoint`")
        else:
            match += 1
        # validate data type: InAppPurchaseContent
        if not isinstance(v, InAppPurchaseContent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `InAppPurchaseContent`")
        else:
            match += 1
        # validate data type: InAppPurchaseAppStoreReviewScreenshot
        if not isinstance(v, InAppPurchaseAppStoreReviewScreenshot):
            error_messages.append(f"Error! Input type `{type(v)}` is not `InAppPurchaseAppStoreReviewScreenshot`")
        else:
            match += 1
        # validate data type: PromotedPurchase
        if not isinstance(v, PromotedPurchase):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PromotedPurchase`")
        else:
            match += 1
        # validate data type: InAppPurchasePriceSchedule
        if not isinstance(v, InAppPurchasePriceSchedule):
            error_messages.append(f"Error! Input type `{type(v)}` is not `InAppPurchasePriceSchedule`")
        else:
            match += 1
        # validate data type: InAppPurchaseAvailability
        if not isinstance(v, InAppPurchaseAvailability):
            error_messages.append(f"Error! Input type `{type(v)}` is not `InAppPurchaseAvailability`")
        else:
            match += 1
        # validate data type: InAppPurchaseImage
        if not isinstance(v, InAppPurchaseImage):
            error_messages.append(f"Error! Input type `{type(v)}` is not `InAppPurchaseImage`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in InAppPurchasesV2ResponseIncludedInner with oneOf schemas: InAppPurchaseAppStoreReviewScreenshot, InAppPurchaseAvailability, InAppPurchaseContent, InAppPurchaseImage, InAppPurchaseLocalization, InAppPurchasePricePoint, InAppPurchasePriceSchedule, PromotedPurchase. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in InAppPurchasesV2ResponseIncludedInner with oneOf schemas: InAppPurchaseAppStoreReviewScreenshot, InAppPurchaseAvailability, InAppPurchaseContent, InAppPurchaseImage, InAppPurchaseLocalization, InAppPurchasePricePoint, InAppPurchasePriceSchedule, PromotedPurchase. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into InAppPurchaseLocalization
        try:
            instance.actual_instance = InAppPurchaseLocalization.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into InAppPurchasePricePoint
        try:
            instance.actual_instance = InAppPurchasePricePoint.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into InAppPurchaseContent
        try:
            instance.actual_instance = InAppPurchaseContent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into InAppPurchaseAppStoreReviewScreenshot
        try:
            instance.actual_instance = InAppPurchaseAppStoreReviewScreenshot.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PromotedPurchase
        try:
            instance.actual_instance = PromotedPurchase.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into InAppPurchasePriceSchedule
        try:
            instance.actual_instance = InAppPurchasePriceSchedule.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into InAppPurchaseAvailability
        try:
            instance.actual_instance = InAppPurchaseAvailability.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into InAppPurchaseImage
        try:
            instance.actual_instance = InAppPurchaseImage.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into InAppPurchasesV2ResponseIncludedInner with oneOf schemas: InAppPurchaseAppStoreReviewScreenshot, InAppPurchaseAvailability, InAppPurchaseContent, InAppPurchaseImage, InAppPurchaseLocalization, InAppPurchasePricePoint, InAppPurchasePriceSchedule, PromotedPurchase. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into InAppPurchasesV2ResponseIncludedInner with oneOf schemas: InAppPurchaseAppStoreReviewScreenshot, InAppPurchaseAvailability, InAppPurchaseContent, InAppPurchaseImage, InAppPurchaseLocalization, InAppPurchasePricePoint, InAppPurchasePriceSchedule, PromotedPurchase. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], InAppPurchaseAppStoreReviewScreenshot, InAppPurchaseAvailability, InAppPurchaseContent, InAppPurchaseImage, InAppPurchaseLocalization, InAppPurchasePricePoint, InAppPurchasePriceSchedule, PromotedPurchase]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


