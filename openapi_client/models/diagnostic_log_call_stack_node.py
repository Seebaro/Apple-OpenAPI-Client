# coding: utf-8

"""
    App Store Connect API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DiagnosticLogCallStackNode(BaseModel):
    """
    DiagnosticLogCallStackNode
    """ # noqa: E501
    sample_count: Optional[StrictInt] = Field(default=None, alias="sampleCount")
    is_blame_frame: Optional[StrictBool] = Field(default=None, alias="isBlameFrame")
    symbol_name: Optional[StrictStr] = Field(default=None, alias="symbolName")
    insights_category: Optional[StrictStr] = Field(default=None, alias="insightsCategory")
    offset_into_symbol: Optional[StrictStr] = Field(default=None, alias="offsetIntoSymbol")
    binary_name: Optional[StrictStr] = Field(default=None, alias="binaryName")
    file_name: Optional[StrictStr] = Field(default=None, alias="fileName")
    binary_uuid: Optional[StrictStr] = Field(default=None, alias="binaryUUID")
    line_number: Optional[StrictStr] = Field(default=None, alias="lineNumber")
    address: Optional[StrictStr] = None
    offset_into_binary_text_segment: Optional[StrictStr] = Field(default=None, alias="offsetIntoBinaryTextSegment")
    raw_frame: Optional[StrictStr] = Field(default=None, alias="rawFrame")
    sub_frames: Optional[List[DiagnosticLogCallStackNode]] = Field(default=None, alias="subFrames")
    __properties: ClassVar[List[str]] = ["sampleCount", "isBlameFrame", "symbolName", "insightsCategory", "offsetIntoSymbol", "binaryName", "fileName", "binaryUUID", "lineNumber", "address", "offsetIntoBinaryTextSegment", "rawFrame", "subFrames"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DiagnosticLogCallStackNode from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in sub_frames (list)
        _items = []
        if self.sub_frames:
            for _item_sub_frames in self.sub_frames:
                if _item_sub_frames:
                    _items.append(_item_sub_frames.to_dict())
            _dict['subFrames'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DiagnosticLogCallStackNode from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "sampleCount": obj.get("sampleCount"),
            "isBlameFrame": obj.get("isBlameFrame"),
            "symbolName": obj.get("symbolName"),
            "insightsCategory": obj.get("insightsCategory"),
            "offsetIntoSymbol": obj.get("offsetIntoSymbol"),
            "binaryName": obj.get("binaryName"),
            "fileName": obj.get("fileName"),
            "binaryUUID": obj.get("binaryUUID"),
            "lineNumber": obj.get("lineNumber"),
            "address": obj.get("address"),
            "offsetIntoBinaryTextSegment": obj.get("offsetIntoBinaryTextSegment"),
            "rawFrame": obj.get("rawFrame"),
            "subFrames": [DiagnosticLogCallStackNode.from_dict(_item) for _item in obj["subFrames"]] if obj.get("subFrames") is not None else None
        })
        return _obj

# TODO: Rewrite to not use raise_errors
DiagnosticLogCallStackNode.model_rebuild(raise_errors=False)

