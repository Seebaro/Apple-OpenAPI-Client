# coding: utf-8

"""
    App Store Connect API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.build_audience_type import BuildAudienceType
from openapi_client.models.ci_action_test_configuration import CiActionTestConfiguration
from openapi_client.models.ci_action_type import CiActionType
from typing import Optional, Set
from typing_extensions import Self

class CiAction(BaseModel):
    """
    CiAction
    """ # noqa: E501
    name: Optional[StrictStr] = None
    action_type: Optional[CiActionType] = Field(default=None, alias="actionType")
    destination: Optional[StrictStr] = None
    build_distribution_audience: Optional[BuildAudienceType] = Field(default=None, alias="buildDistributionAudience")
    test_configuration: Optional[CiActionTestConfiguration] = Field(default=None, alias="testConfiguration")
    scheme: Optional[StrictStr] = None
    platform: Optional[StrictStr] = None
    is_required_to_pass: Optional[StrictBool] = Field(default=None, alias="isRequiredToPass")
    __properties: ClassVar[List[str]] = ["name", "actionType", "destination", "buildDistributionAudience", "testConfiguration", "scheme", "platform", "isRequiredToPass"]

    @field_validator('destination')
    def destination_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ANY_IOS_DEVICE', 'ANY_IOS_SIMULATOR', 'ANY_TVOS_DEVICE', 'ANY_TVOS_SIMULATOR', 'ANY_WATCHOS_DEVICE', 'ANY_WATCHOS_SIMULATOR', 'ANY_MAC', 'ANY_MAC_CATALYST', 'ANY_VISIONOS_DEVICE', 'ANY_VISIONOS_SIMULATOR']):
            raise ValueError("must be one of enum values ('ANY_IOS_DEVICE', 'ANY_IOS_SIMULATOR', 'ANY_TVOS_DEVICE', 'ANY_TVOS_SIMULATOR', 'ANY_WATCHOS_DEVICE', 'ANY_WATCHOS_SIMULATOR', 'ANY_MAC', 'ANY_MAC_CATALYST', 'ANY_VISIONOS_DEVICE', 'ANY_VISIONOS_SIMULATOR')")
        return value

    @field_validator('platform')
    def platform_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['MACOS', 'IOS', 'TVOS', 'WATCHOS', 'VISIONOS']):
            raise ValueError("must be one of enum values ('MACOS', 'IOS', 'TVOS', 'WATCHOS', 'VISIONOS')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CiAction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of test_configuration
        if self.test_configuration:
            _dict['testConfiguration'] = self.test_configuration.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CiAction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "actionType": obj.get("actionType"),
            "destination": obj.get("destination"),
            "buildDistributionAudience": obj.get("buildDistributionAudience"),
            "testConfiguration": CiActionTestConfiguration.from_dict(obj["testConfiguration"]) if obj.get("testConfiguration") is not None else None,
            "scheme": obj.get("scheme"),
            "platform": obj.get("platform"),
            "isRequiredToPass": obj.get("isRequiredToPass")
        })
        return _obj


