# coding: utf-8

"""
    App Store Connect API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.alternative_distribution_key_create_request_data_relationships_app import AlternativeDistributionKeyCreateRequestDataRelationshipsApp
from openapi_client.models.app_relationships_app_store_versions import AppRelationshipsAppStoreVersions
from openapi_client.models.game_center_achievement_relationships_releases import GameCenterAchievementRelationshipsReleases
from openapi_client.models.game_center_activity_relationships_achievements import GameCenterActivityRelationshipsAchievements
from openapi_client.models.game_center_activity_relationships_leaderboards import GameCenterActivityRelationshipsLeaderboards
from openapi_client.models.game_center_app_version_relationships_compatibility_versions import GameCenterAppVersionRelationshipsCompatibilityVersions
from openapi_client.models.game_center_challenge_create_request_data_relationships_leaderboard import GameCenterChallengeCreateRequestDataRelationshipsLeaderboard
from openapi_client.models.game_center_detail_relationships_activity_releases import GameCenterDetailRelationshipsActivityReleases
from openapi_client.models.game_center_detail_relationships_challenge_releases import GameCenterDetailRelationshipsChallengeReleases
from openapi_client.models.game_center_detail_relationships_game_center_activities import GameCenterDetailRelationshipsGameCenterActivities
from openapi_client.models.game_center_detail_relationships_game_center_challenges import GameCenterDetailRelationshipsGameCenterChallenges
from openapi_client.models.game_center_detail_relationships_game_center_group import GameCenterDetailRelationshipsGameCenterGroup
from openapi_client.models.game_center_detail_relationships_game_center_leaderboard_sets import GameCenterDetailRelationshipsGameCenterLeaderboardSets
from openapi_client.models.game_center_detail_relationships_leaderboard_releases import GameCenterDetailRelationshipsLeaderboardReleases
from openapi_client.models.game_center_detail_relationships_leaderboard_set_releases import GameCenterDetailRelationshipsLeaderboardSetReleases
from typing import Optional, Set
from typing_extensions import Self

class GameCenterDetailRelationships(BaseModel):
    """
    GameCenterDetailRelationships
    """ # noqa: E501
    app: Optional[AlternativeDistributionKeyCreateRequestDataRelationshipsApp] = None
    game_center_app_versions: Optional[GameCenterAppVersionRelationshipsCompatibilityVersions] = Field(default=None, alias="gameCenterAppVersions")
    game_center_group: Optional[GameCenterDetailRelationshipsGameCenterGroup] = Field(default=None, alias="gameCenterGroup")
    game_center_leaderboards: Optional[GameCenterActivityRelationshipsLeaderboards] = Field(default=None, alias="gameCenterLeaderboards")
    game_center_leaderboard_sets: Optional[GameCenterDetailRelationshipsGameCenterLeaderboardSets] = Field(default=None, alias="gameCenterLeaderboardSets")
    game_center_achievements: Optional[GameCenterActivityRelationshipsAchievements] = Field(default=None, alias="gameCenterAchievements")
    game_center_activities: Optional[GameCenterDetailRelationshipsGameCenterActivities] = Field(default=None, alias="gameCenterActivities")
    game_center_challenges: Optional[GameCenterDetailRelationshipsGameCenterChallenges] = Field(default=None, alias="gameCenterChallenges")
    default_leaderboard: Optional[GameCenterChallengeCreateRequestDataRelationshipsLeaderboard] = Field(default=None, alias="defaultLeaderboard")
    default_group_leaderboard: Optional[GameCenterChallengeCreateRequestDataRelationshipsLeaderboard] = Field(default=None, alias="defaultGroupLeaderboard")
    achievement_releases: Optional[GameCenterAchievementRelationshipsReleases] = Field(default=None, alias="achievementReleases")
    activity_releases: Optional[GameCenterDetailRelationshipsActivityReleases] = Field(default=None, alias="activityReleases")
    challenge_releases: Optional[GameCenterDetailRelationshipsChallengeReleases] = Field(default=None, alias="challengeReleases")
    leaderboard_releases: Optional[GameCenterDetailRelationshipsLeaderboardReleases] = Field(default=None, alias="leaderboardReleases")
    leaderboard_set_releases: Optional[GameCenterDetailRelationshipsLeaderboardSetReleases] = Field(default=None, alias="leaderboardSetReleases")
    challenges_minimum_platform_versions: Optional[AppRelationshipsAppStoreVersions] = Field(default=None, alias="challengesMinimumPlatformVersions")
    __properties: ClassVar[List[str]] = ["app", "gameCenterAppVersions", "gameCenterGroup", "gameCenterLeaderboards", "gameCenterLeaderboardSets", "gameCenterAchievements", "gameCenterActivities", "gameCenterChallenges", "defaultLeaderboard", "defaultGroupLeaderboard", "achievementReleases", "activityReleases", "challengeReleases", "leaderboardReleases", "leaderboardSetReleases", "challengesMinimumPlatformVersions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GameCenterDetailRelationships from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of app
        if self.app:
            _dict['app'] = self.app.to_dict()
        # override the default output from pydantic by calling `to_dict()` of game_center_app_versions
        if self.game_center_app_versions:
            _dict['gameCenterAppVersions'] = self.game_center_app_versions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of game_center_group
        if self.game_center_group:
            _dict['gameCenterGroup'] = self.game_center_group.to_dict()
        # override the default output from pydantic by calling `to_dict()` of game_center_leaderboards
        if self.game_center_leaderboards:
            _dict['gameCenterLeaderboards'] = self.game_center_leaderboards.to_dict()
        # override the default output from pydantic by calling `to_dict()` of game_center_leaderboard_sets
        if self.game_center_leaderboard_sets:
            _dict['gameCenterLeaderboardSets'] = self.game_center_leaderboard_sets.to_dict()
        # override the default output from pydantic by calling `to_dict()` of game_center_achievements
        if self.game_center_achievements:
            _dict['gameCenterAchievements'] = self.game_center_achievements.to_dict()
        # override the default output from pydantic by calling `to_dict()` of game_center_activities
        if self.game_center_activities:
            _dict['gameCenterActivities'] = self.game_center_activities.to_dict()
        # override the default output from pydantic by calling `to_dict()` of game_center_challenges
        if self.game_center_challenges:
            _dict['gameCenterChallenges'] = self.game_center_challenges.to_dict()
        # override the default output from pydantic by calling `to_dict()` of default_leaderboard
        if self.default_leaderboard:
            _dict['defaultLeaderboard'] = self.default_leaderboard.to_dict()
        # override the default output from pydantic by calling `to_dict()` of default_group_leaderboard
        if self.default_group_leaderboard:
            _dict['defaultGroupLeaderboard'] = self.default_group_leaderboard.to_dict()
        # override the default output from pydantic by calling `to_dict()` of achievement_releases
        if self.achievement_releases:
            _dict['achievementReleases'] = self.achievement_releases.to_dict()
        # override the default output from pydantic by calling `to_dict()` of activity_releases
        if self.activity_releases:
            _dict['activityReleases'] = self.activity_releases.to_dict()
        # override the default output from pydantic by calling `to_dict()` of challenge_releases
        if self.challenge_releases:
            _dict['challengeReleases'] = self.challenge_releases.to_dict()
        # override the default output from pydantic by calling `to_dict()` of leaderboard_releases
        if self.leaderboard_releases:
            _dict['leaderboardReleases'] = self.leaderboard_releases.to_dict()
        # override the default output from pydantic by calling `to_dict()` of leaderboard_set_releases
        if self.leaderboard_set_releases:
            _dict['leaderboardSetReleases'] = self.leaderboard_set_releases.to_dict()
        # override the default output from pydantic by calling `to_dict()` of challenges_minimum_platform_versions
        if self.challenges_minimum_platform_versions:
            _dict['challengesMinimumPlatformVersions'] = self.challenges_minimum_platform_versions.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GameCenterDetailRelationships from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "app": AlternativeDistributionKeyCreateRequestDataRelationshipsApp.from_dict(obj["app"]) if obj.get("app") is not None else None,
            "gameCenterAppVersions": GameCenterAppVersionRelationshipsCompatibilityVersions.from_dict(obj["gameCenterAppVersions"]) if obj.get("gameCenterAppVersions") is not None else None,
            "gameCenterGroup": GameCenterDetailRelationshipsGameCenterGroup.from_dict(obj["gameCenterGroup"]) if obj.get("gameCenterGroup") is not None else None,
            "gameCenterLeaderboards": GameCenterActivityRelationshipsLeaderboards.from_dict(obj["gameCenterLeaderboards"]) if obj.get("gameCenterLeaderboards") is not None else None,
            "gameCenterLeaderboardSets": GameCenterDetailRelationshipsGameCenterLeaderboardSets.from_dict(obj["gameCenterLeaderboardSets"]) if obj.get("gameCenterLeaderboardSets") is not None else None,
            "gameCenterAchievements": GameCenterActivityRelationshipsAchievements.from_dict(obj["gameCenterAchievements"]) if obj.get("gameCenterAchievements") is not None else None,
            "gameCenterActivities": GameCenterDetailRelationshipsGameCenterActivities.from_dict(obj["gameCenterActivities"]) if obj.get("gameCenterActivities") is not None else None,
            "gameCenterChallenges": GameCenterDetailRelationshipsGameCenterChallenges.from_dict(obj["gameCenterChallenges"]) if obj.get("gameCenterChallenges") is not None else None,
            "defaultLeaderboard": GameCenterChallengeCreateRequestDataRelationshipsLeaderboard.from_dict(obj["defaultLeaderboard"]) if obj.get("defaultLeaderboard") is not None else None,
            "defaultGroupLeaderboard": GameCenterChallengeCreateRequestDataRelationshipsLeaderboard.from_dict(obj["defaultGroupLeaderboard"]) if obj.get("defaultGroupLeaderboard") is not None else None,
            "achievementReleases": GameCenterAchievementRelationshipsReleases.from_dict(obj["achievementReleases"]) if obj.get("achievementReleases") is not None else None,
            "activityReleases": GameCenterDetailRelationshipsActivityReleases.from_dict(obj["activityReleases"]) if obj.get("activityReleases") is not None else None,
            "challengeReleases": GameCenterDetailRelationshipsChallengeReleases.from_dict(obj["challengeReleases"]) if obj.get("challengeReleases") is not None else None,
            "leaderboardReleases": GameCenterDetailRelationshipsLeaderboardReleases.from_dict(obj["leaderboardReleases"]) if obj.get("leaderboardReleases") is not None else None,
            "leaderboardSetReleases": GameCenterDetailRelationshipsLeaderboardSetReleases.from_dict(obj["leaderboardSetReleases"]) if obj.get("leaderboardSetReleases") is not None else None,
            "challengesMinimumPlatformVersions": AppRelationshipsAppStoreVersions.from_dict(obj["challengesMinimumPlatformVersions"]) if obj.get("challengesMinimumPlatformVersions") is not None else None
        })
        return _obj


