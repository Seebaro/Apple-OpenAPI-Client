# coding: utf-8

"""
    App Store Connect API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.device_family import DeviceFamily
from typing import Optional, Set
from typing_extensions import Self

class NominationCreateRequestDataAttributes(BaseModel):
    """
    NominationCreateRequestDataAttributes
    """ # noqa: E501
    name: StrictStr
    type: StrictStr
    description: StrictStr
    submitted: StrictBool
    publish_start_date: datetime = Field(alias="publishStartDate")
    publish_end_date: Optional[datetime] = Field(default=None, alias="publishEndDate")
    device_families: Optional[List[DeviceFamily]] = Field(default=None, alias="deviceFamilies")
    locales: Optional[List[StrictStr]] = None
    supplemental_materials_uris: Optional[List[StrictStr]] = Field(default=None, alias="supplementalMaterialsUris")
    has_in_app_events: Optional[StrictBool] = Field(default=None, alias="hasInAppEvents")
    launch_in_select_markets_first: Optional[StrictBool] = Field(default=None, alias="launchInSelectMarketsFirst")
    notes: Optional[StrictStr] = None
    pre_order_enabled: Optional[StrictBool] = Field(default=None, alias="preOrderEnabled")
    __properties: ClassVar[List[str]] = ["name", "type", "description", "submitted", "publishStartDate", "publishEndDate", "deviceFamilies", "locales", "supplementalMaterialsUris", "hasInAppEvents", "launchInSelectMarketsFirst", "notes", "preOrderEnabled"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['APP_LAUNCH', 'APP_ENHANCEMENTS', 'NEW_CONTENT']):
            raise ValueError("must be one of enum values ('APP_LAUNCH', 'APP_ENHANCEMENTS', 'NEW_CONTENT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NominationCreateRequestDataAttributes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NominationCreateRequestDataAttributes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "type": obj.get("type"),
            "description": obj.get("description"),
            "submitted": obj.get("submitted"),
            "publishStartDate": obj.get("publishStartDate"),
            "publishEndDate": obj.get("publishEndDate"),
            "deviceFamilies": obj.get("deviceFamilies"),
            "locales": obj.get("locales"),
            "supplementalMaterialsUris": obj.get("supplementalMaterialsUris"),
            "hasInAppEvents": obj.get("hasInAppEvents"),
            "launchInSelectMarketsFirst": obj.get("launchInSelectMarketsFirst"),
            "notes": obj.get("notes"),
            "preOrderEnabled": obj.get("preOrderEnabled")
        })
        return _obj


