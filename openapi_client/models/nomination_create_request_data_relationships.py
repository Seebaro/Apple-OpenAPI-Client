# coding: utf-8

"""
    App Store Connect API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.end_user_license_agreement_update_request_data_relationships_territories import EndUserLicenseAgreementUpdateRequestDataRelationshipsTerritories
from openapi_client.models.nomination_create_request_data_relationships_in_app_events import NominationCreateRequestDataRelationshipsInAppEvents
from openapi_client.models.nomination_create_request_data_relationships_related_apps import NominationCreateRequestDataRelationshipsRelatedApps
from typing import Optional, Set
from typing_extensions import Self

class NominationCreateRequestDataRelationships(BaseModel):
    """
    NominationCreateRequestDataRelationships
    """ # noqa: E501
    related_apps: NominationCreateRequestDataRelationshipsRelatedApps = Field(alias="relatedApps")
    in_app_events: Optional[NominationCreateRequestDataRelationshipsInAppEvents] = Field(default=None, alias="inAppEvents")
    supported_territories: Optional[EndUserLicenseAgreementUpdateRequestDataRelationshipsTerritories] = Field(default=None, alias="supportedTerritories")
    __properties: ClassVar[List[str]] = ["relatedApps", "inAppEvents", "supportedTerritories"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NominationCreateRequestDataRelationships from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of related_apps
        if self.related_apps:
            _dict['relatedApps'] = self.related_apps.to_dict()
        # override the default output from pydantic by calling `to_dict()` of in_app_events
        if self.in_app_events:
            _dict['inAppEvents'] = self.in_app_events.to_dict()
        # override the default output from pydantic by calling `to_dict()` of supported_territories
        if self.supported_territories:
            _dict['supportedTerritories'] = self.supported_territories.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NominationCreateRequestDataRelationships from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "relatedApps": NominationCreateRequestDataRelationshipsRelatedApps.from_dict(obj["relatedApps"]) if obj.get("relatedApps") is not None else None,
            "inAppEvents": NominationCreateRequestDataRelationshipsInAppEvents.from_dict(obj["inAppEvents"]) if obj.get("inAppEvents") is not None else None,
            "supportedTerritories": EndUserLicenseAgreementUpdateRequestDataRelationshipsTerritories.from_dict(obj["supportedTerritories"]) if obj.get("supportedTerritories") is not None else None
        })
        return _obj


