# coding: utf-8

"""
    App Store Connect API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class TerritoryAvailabilityAttributes(BaseModel):
    """
    TerritoryAvailabilityAttributes
    """ # noqa: E501
    available: Optional[StrictBool] = None
    release_date: Optional[date] = Field(default=None, alias="releaseDate")
    pre_order_enabled: Optional[StrictBool] = Field(default=None, alias="preOrderEnabled")
    pre_order_publish_date: Optional[date] = Field(default=None, alias="preOrderPublishDate")
    content_statuses: Optional[List[StrictStr]] = Field(default=None, alias="contentStatuses")
    __properties: ClassVar[List[str]] = ["available", "releaseDate", "preOrderEnabled", "preOrderPublishDate", "contentStatuses"]

    @field_validator('content_statuses')
    def content_statuses_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['AVAILABLE', 'AVAILABLE_FOR_PREORDER_ON_DATE', 'PROCESSING_TO_NOT_AVAILABLE', 'PROCESSING_TO_AVAILABLE', 'PROCESSING_TO_PRE_ORDER', 'AVAILABLE_FOR_SALE_UNRELEASED_APP', 'PREORDER_ON_UNRELEASED_APP', 'AVAILABLE_FOR_PREORDER', 'MISSING_RATING', 'CANNOT_SELL_RESTRICTED_RATING', 'BRAZIL_REQUIRED_TAX_ID', 'MISSING_GRN', 'UNVERIFIED_GRN', 'ICP_NUMBER_INVALID', 'ICP_NUMBER_MISSING', 'TRADER_STATUS_NOT_PROVIDED', 'TRADER_STATUS_VERIFICATION_FAILED', 'TRADER_STATUS_VERIFICATION_STATUS_MISSING', 'CANNOT_SELL_SEVENTEEN_PLUS_APPS', 'CANNOT_SELL_SEXUALLY_EXPLICIT', 'CANNOT_SELL_NON_IOS_GAMES', 'CANNOT_SELL_SEVENTEEN_PLUS_GAMES', 'CANNOT_SELL_CASINO', 'CANNOT_SELL_CASINO_WITHOUT_GRAC', 'CANNOT_SELL_CASINO_WITHOUT_AGE_VERIFICATION', 'CANNOT_SELL_ADULT_ONLY', 'CANNOT_SELL_GAMBLING_CONTESTS', 'CANNOT_SELL_GAMBLING', 'CANNOT_SELL_CONTESTS', 'CANNOT_SELL']):
                raise ValueError("each list item must be one of ('AVAILABLE', 'AVAILABLE_FOR_PREORDER_ON_DATE', 'PROCESSING_TO_NOT_AVAILABLE', 'PROCESSING_TO_AVAILABLE', 'PROCESSING_TO_PRE_ORDER', 'AVAILABLE_FOR_SALE_UNRELEASED_APP', 'PREORDER_ON_UNRELEASED_APP', 'AVAILABLE_FOR_PREORDER', 'MISSING_RATING', 'CANNOT_SELL_RESTRICTED_RATING', 'BRAZIL_REQUIRED_TAX_ID', 'MISSING_GRN', 'UNVERIFIED_GRN', 'ICP_NUMBER_INVALID', 'ICP_NUMBER_MISSING', 'TRADER_STATUS_NOT_PROVIDED', 'TRADER_STATUS_VERIFICATION_FAILED', 'TRADER_STATUS_VERIFICATION_STATUS_MISSING', 'CANNOT_SELL_SEVENTEEN_PLUS_APPS', 'CANNOT_SELL_SEXUALLY_EXPLICIT', 'CANNOT_SELL_NON_IOS_GAMES', 'CANNOT_SELL_SEVENTEEN_PLUS_GAMES', 'CANNOT_SELL_CASINO', 'CANNOT_SELL_CASINO_WITHOUT_GRAC', 'CANNOT_SELL_CASINO_WITHOUT_AGE_VERIFICATION', 'CANNOT_SELL_ADULT_ONLY', 'CANNOT_SELL_GAMBLING_CONTESTS', 'CANNOT_SELL_GAMBLING', 'CANNOT_SELL_CONTESTS', 'CANNOT_SELL')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TerritoryAvailabilityAttributes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TerritoryAvailabilityAttributes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "available": obj.get("available"),
            "releaseDate": obj.get("releaseDate"),
            "preOrderEnabled": obj.get("preOrderEnabled"),
            "preOrderPublishDate": obj.get("preOrderPublishDate"),
            "contentStatuses": obj.get("contentStatuses")
        })
        return _obj


