# coding: utf-8

"""
    App Store Connect API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.location import Location
from openapi_client.models.platform import Platform
from typing import Optional, Set
from typing_extensions import Self

class GameCenterMatchmakingTestRequestInlineCreateAttributes(BaseModel):
    """
    GameCenterMatchmakingTestRequestInlineCreateAttributes
    """ # noqa: E501
    request_name: StrictStr = Field(alias="requestName")
    seconds_in_queue: StrictInt = Field(alias="secondsInQueue")
    locale: Optional[StrictStr] = None
    location: Optional[Location] = None
    min_players: Optional[StrictInt] = Field(default=None, alias="minPlayers")
    max_players: Optional[StrictInt] = Field(default=None, alias="maxPlayers")
    player_count: Optional[StrictInt] = Field(default=None, alias="playerCount")
    bundle_id: StrictStr = Field(alias="bundleId")
    platform: Platform
    app_version: StrictStr = Field(alias="appVersion")
    __properties: ClassVar[List[str]] = ["requestName", "secondsInQueue", "locale", "location", "minPlayers", "maxPlayers", "playerCount", "bundleId", "platform", "appVersion"]

    @field_validator('locale')
    def locale_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['AR-SA', 'CA-ES', 'CS-CZ', 'DA-DK', 'DE-DE', 'EL-GR', 'EN-AU', 'EN-GB', 'EN-US', 'EN-KY', 'ES-ES', 'ES-MX', 'FI-FI', 'FR-CA', 'FR-FR', 'HI-IN', 'HR-HR', 'HU-HU', 'ID-ID', 'IT-IT', 'IW-IL', 'JA-JP', 'KO-KR', 'MS-MY', 'NL-NL', 'NO-NO', 'PL-PL', 'PT-BR', 'PT-PT', 'RO-RO', 'RU-RU', 'SK-SK', 'SV-SE', 'TH-TH', 'TR-TR', 'UK-UA', 'ZH-CN', 'ZH-TW', 'ZH-HK']):
            raise ValueError("must be one of enum values ('AR-SA', 'CA-ES', 'CS-CZ', 'DA-DK', 'DE-DE', 'EL-GR', 'EN-AU', 'EN-GB', 'EN-US', 'EN-KY', 'ES-ES', 'ES-MX', 'FI-FI', 'FR-CA', 'FR-FR', 'HI-IN', 'HR-HR', 'HU-HU', 'ID-ID', 'IT-IT', 'IW-IL', 'JA-JP', 'KO-KR', 'MS-MY', 'NL-NL', 'NO-NO', 'PL-PL', 'PT-BR', 'PT-PT', 'RO-RO', 'RU-RU', 'SK-SK', 'SV-SE', 'TH-TH', 'TR-TR', 'UK-UA', 'ZH-CN', 'ZH-TW', 'ZH-HK')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GameCenterMatchmakingTestRequestInlineCreateAttributes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location:
            _dict['location'] = self.location.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GameCenterMatchmakingTestRequestInlineCreateAttributes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "requestName": obj.get("requestName"),
            "secondsInQueue": obj.get("secondsInQueue"),
            "locale": obj.get("locale"),
            "location": Location.from_dict(obj["location"]) if obj.get("location") is not None else None,
            "minPlayers": obj.get("minPlayers"),
            "maxPlayers": obj.get("maxPlayers"),
            "playerCount": obj.get("playerCount"),
            "bundleId": obj.get("bundleId"),
            "platform": obj.get("platform"),
            "appVersion": obj.get("appVersion")
        })
        return _obj


