# coding: utf-8

"""
    App Store Connect API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.analytics_report_instance_relationships_segments import AnalyticsReportInstanceRelationshipsSegments
from openapi_client.models.beta_app_localization_relationships_app import BetaAppLocalizationRelationshipsApp
from openapi_client.models.ci_product_relationships_bundle_id import CiProductRelationshipsBundleId
from openapi_client.models.ci_product_relationships_primary_repositories import CiProductRelationshipsPrimaryRepositories
from typing import Optional, Set
from typing_extensions import Self

class CiProductRelationships(BaseModel):
    """
    CiProductRelationships
    """ # noqa: E501
    app: Optional[BetaAppLocalizationRelationshipsApp] = None
    bundle_id: Optional[CiProductRelationshipsBundleId] = Field(default=None, alias="bundleId")
    workflows: Optional[AnalyticsReportInstanceRelationshipsSegments] = None
    primary_repositories: Optional[CiProductRelationshipsPrimaryRepositories] = Field(default=None, alias="primaryRepositories")
    additional_repositories: Optional[AnalyticsReportInstanceRelationshipsSegments] = Field(default=None, alias="additionalRepositories")
    build_runs: Optional[AnalyticsReportInstanceRelationshipsSegments] = Field(default=None, alias="buildRuns")
    __properties: ClassVar[List[str]] = ["app", "bundleId", "workflows", "primaryRepositories", "additionalRepositories", "buildRuns"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CiProductRelationships from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of app
        if self.app:
            _dict['app'] = self.app.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bundle_id
        if self.bundle_id:
            _dict['bundleId'] = self.bundle_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of workflows
        if self.workflows:
            _dict['workflows'] = self.workflows.to_dict()
        # override the default output from pydantic by calling `to_dict()` of primary_repositories
        if self.primary_repositories:
            _dict['primaryRepositories'] = self.primary_repositories.to_dict()
        # override the default output from pydantic by calling `to_dict()` of additional_repositories
        if self.additional_repositories:
            _dict['additionalRepositories'] = self.additional_repositories.to_dict()
        # override the default output from pydantic by calling `to_dict()` of build_runs
        if self.build_runs:
            _dict['buildRuns'] = self.build_runs.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CiProductRelationships from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "app": BetaAppLocalizationRelationshipsApp.from_dict(obj["app"]) if obj.get("app") is not None else None,
            "bundleId": CiProductRelationshipsBundleId.from_dict(obj["bundleId"]) if obj.get("bundleId") is not None else None,
            "workflows": AnalyticsReportInstanceRelationshipsSegments.from_dict(obj["workflows"]) if obj.get("workflows") is not None else None,
            "primaryRepositories": CiProductRelationshipsPrimaryRepositories.from_dict(obj["primaryRepositories"]) if obj.get("primaryRepositories") is not None else None,
            "additionalRepositories": AnalyticsReportInstanceRelationshipsSegments.from_dict(obj["additionalRepositories"]) if obj.get("additionalRepositories") is not None else None,
            "buildRuns": AnalyticsReportInstanceRelationshipsSegments.from_dict(obj["buildRuns"]) if obj.get("buildRuns") is not None else None
        })
        return _obj


