# coding: utf-8

"""
    App Store Connect API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.kids_age_band import KidsAgeBand
from typing import Optional, Set
from typing_extensions import Self

class AgeRatingDeclarationAttributes(BaseModel):
    """
    AgeRatingDeclarationAttributes
    """ # noqa: E501
    alcohol_tobacco_or_drug_use_or_references: Optional[StrictStr] = Field(default=None, alias="alcoholTobaccoOrDrugUseOrReferences")
    contests: Optional[StrictStr] = None
    gambling: Optional[StrictBool] = None
    gambling_simulated: Optional[StrictStr] = Field(default=None, alias="gamblingSimulated")
    kids_age_band: Optional[KidsAgeBand] = Field(default=None, alias="kidsAgeBand")
    loot_box: Optional[StrictBool] = Field(default=None, alias="lootBox")
    medical_or_treatment_information: Optional[StrictStr] = Field(default=None, alias="medicalOrTreatmentInformation")
    profanity_or_crude_humor: Optional[StrictStr] = Field(default=None, alias="profanityOrCrudeHumor")
    sexual_content_graphic_and_nudity: Optional[StrictStr] = Field(default=None, alias="sexualContentGraphicAndNudity")
    sexual_content_or_nudity: Optional[StrictStr] = Field(default=None, alias="sexualContentOrNudity")
    horror_or_fear_themes: Optional[StrictStr] = Field(default=None, alias="horrorOrFearThemes")
    mature_or_suggestive_themes: Optional[StrictStr] = Field(default=None, alias="matureOrSuggestiveThemes")
    unrestricted_web_access: Optional[StrictBool] = Field(default=None, alias="unrestrictedWebAccess")
    violence_cartoon_or_fantasy: Optional[StrictStr] = Field(default=None, alias="violenceCartoonOrFantasy")
    violence_realistic_prolonged_graphic_or_sadistic: Optional[StrictStr] = Field(default=None, alias="violenceRealisticProlongedGraphicOrSadistic")
    violence_realistic: Optional[StrictStr] = Field(default=None, alias="violenceRealistic")
    korea_age_rating_override: Optional[StrictStr] = Field(default=None, alias="koreaAgeRatingOverride")
    __properties: ClassVar[List[str]] = ["alcoholTobaccoOrDrugUseOrReferences", "contests", "gambling", "gamblingSimulated", "kidsAgeBand", "lootBox", "medicalOrTreatmentInformation", "profanityOrCrudeHumor", "sexualContentGraphicAndNudity", "sexualContentOrNudity", "horrorOrFearThemes", "matureOrSuggestiveThemes", "unrestrictedWebAccess", "violenceCartoonOrFantasy", "violenceRealisticProlongedGraphicOrSadistic", "violenceRealistic", "koreaAgeRatingOverride"]

    @field_validator('alcohol_tobacco_or_drug_use_or_references')
    def alcohol_tobacco_or_drug_use_or_references_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NONE']):
            raise ValueError("must be one of enum values ('NONE')")
        return value

    @field_validator('contests')
    def contests_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NONE']):
            raise ValueError("must be one of enum values ('NONE')")
        return value

    @field_validator('gambling_simulated')
    def gambling_simulated_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NONE']):
            raise ValueError("must be one of enum values ('NONE')")
        return value

    @field_validator('medical_or_treatment_information')
    def medical_or_treatment_information_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NONE']):
            raise ValueError("must be one of enum values ('NONE')")
        return value

    @field_validator('profanity_or_crude_humor')
    def profanity_or_crude_humor_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NONE']):
            raise ValueError("must be one of enum values ('NONE')")
        return value

    @field_validator('sexual_content_graphic_and_nudity')
    def sexual_content_graphic_and_nudity_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NONE']):
            raise ValueError("must be one of enum values ('NONE')")
        return value

    @field_validator('sexual_content_or_nudity')
    def sexual_content_or_nudity_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NONE']):
            raise ValueError("must be one of enum values ('NONE')")
        return value

    @field_validator('horror_or_fear_themes')
    def horror_or_fear_themes_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NONE']):
            raise ValueError("must be one of enum values ('NONE')")
        return value

    @field_validator('mature_or_suggestive_themes')
    def mature_or_suggestive_themes_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NONE']):
            raise ValueError("must be one of enum values ('NONE')")
        return value

    @field_validator('violence_cartoon_or_fantasy')
    def violence_cartoon_or_fantasy_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NONE']):
            raise ValueError("must be one of enum values ('NONE')")
        return value

    @field_validator('violence_realistic_prolonged_graphic_or_sadistic')
    def violence_realistic_prolonged_graphic_or_sadistic_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NONE']):
            raise ValueError("must be one of enum values ('NONE')")
        return value

    @field_validator('violence_realistic')
    def violence_realistic_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NONE']):
            raise ValueError("must be one of enum values ('NONE')")
        return value

    @field_validator('korea_age_rating_override')
    def korea_age_rating_override_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NONE', 'FIFTEEN_PLUS', 'NINETEEN_PLUS']):
            raise ValueError("must be one of enum values ('NONE', 'FIFTEEN_PLUS', 'NINETEEN_PLUS')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AgeRatingDeclarationAttributes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AgeRatingDeclarationAttributes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "alcoholTobaccoOrDrugUseOrReferences": obj.get("alcoholTobaccoOrDrugUseOrReferences"),
            "contests": obj.get("contests"),
            "gambling": obj.get("gambling"),
            "gamblingSimulated": obj.get("gamblingSimulated"),
            "kidsAgeBand": obj.get("kidsAgeBand"),
            "lootBox": obj.get("lootBox"),
            "medicalOrTreatmentInformation": obj.get("medicalOrTreatmentInformation"),
            "profanityOrCrudeHumor": obj.get("profanityOrCrudeHumor"),
            "sexualContentGraphicAndNudity": obj.get("sexualContentGraphicAndNudity"),
            "sexualContentOrNudity": obj.get("sexualContentOrNudity"),
            "horrorOrFearThemes": obj.get("horrorOrFearThemes"),
            "matureOrSuggestiveThemes": obj.get("matureOrSuggestiveThemes"),
            "unrestrictedWebAccess": obj.get("unrestrictedWebAccess"),
            "violenceCartoonOrFantasy": obj.get("violenceCartoonOrFantasy"),
            "violenceRealisticProlongedGraphicOrSadistic": obj.get("violenceRealisticProlongedGraphicOrSadistic"),
            "violenceRealistic": obj.get("violenceRealistic"),
            "koreaAgeRatingOverride": obj.get("koreaAgeRatingOverride")
        })
        return _obj


