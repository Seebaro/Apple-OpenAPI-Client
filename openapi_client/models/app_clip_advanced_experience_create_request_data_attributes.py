# coding: utf-8

"""
    App Store Connect API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.app_clip_action import AppClipAction
from openapi_client.models.app_clip_advanced_experience_attributes_place import AppClipAdvancedExperienceAttributesPlace
from openapi_client.models.app_clip_advanced_experience_language import AppClipAdvancedExperienceLanguage
from typing import Optional, Set
from typing_extensions import Self

class AppClipAdvancedExperienceCreateRequestDataAttributes(BaseModel):
    """
    AppClipAdvancedExperienceCreateRequestDataAttributes
    """ # noqa: E501
    link: StrictStr
    action: Optional[AppClipAction] = None
    is_powered_by: StrictBool = Field(alias="isPoweredBy")
    place: Optional[AppClipAdvancedExperienceAttributesPlace] = None
    business_category: Optional[StrictStr] = Field(default=None, alias="businessCategory")
    default_language: AppClipAdvancedExperienceLanguage = Field(alias="defaultLanguage")
    __properties: ClassVar[List[str]] = ["link", "action", "isPoweredBy", "place", "businessCategory", "defaultLanguage"]

    @field_validator('business_category')
    def business_category_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['AUTOMOTIVE', 'BEAUTY', 'BIKES', 'BOOKS', 'CASINO', 'EDUCATION', 'EDUCATION_JAPAN', 'ENTERTAINMENT', 'EV_CHARGER', 'FINANCIAL_USD', 'FINANCIAL_CNY', 'FINANCIAL_GBP', 'FINANCIAL_JPY', 'FINANCIAL_EUR', 'FITNESS', 'FOOD_AND_DRINK', 'GAS', 'GROCERY', 'HEALTH_AND_MEDICAL', 'HOTEL_AND_TRAVEL', 'MUSIC', 'PARKING', 'PET_SERVICES', 'PROFESSIONAL_SERVICES', 'SHOPPING', 'TICKETING', 'TRANSIT']):
            raise ValueError("must be one of enum values ('AUTOMOTIVE', 'BEAUTY', 'BIKES', 'BOOKS', 'CASINO', 'EDUCATION', 'EDUCATION_JAPAN', 'ENTERTAINMENT', 'EV_CHARGER', 'FINANCIAL_USD', 'FINANCIAL_CNY', 'FINANCIAL_GBP', 'FINANCIAL_JPY', 'FINANCIAL_EUR', 'FITNESS', 'FOOD_AND_DRINK', 'GAS', 'GROCERY', 'HEALTH_AND_MEDICAL', 'HOTEL_AND_TRAVEL', 'MUSIC', 'PARKING', 'PET_SERVICES', 'PROFESSIONAL_SERVICES', 'SHOPPING', 'TICKETING', 'TRANSIT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AppClipAdvancedExperienceCreateRequestDataAttributes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of place
        if self.place:
            _dict['place'] = self.place.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AppClipAdvancedExperienceCreateRequestDataAttributes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "link": obj.get("link"),
            "action": obj.get("action"),
            "isPoweredBy": obj.get("isPoweredBy"),
            "place": AppClipAdvancedExperienceAttributesPlace.from_dict(obj["place"]) if obj.get("place") is not None else None,
            "businessCategory": obj.get("businessCategory"),
            "defaultLanguage": obj.get("defaultLanguage")
        })
        return _obj


