# coding: utf-8

"""
    App Store Connect API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.app_clip_advanced_experience_attributes_place_display_point import AppClipAdvancedExperienceAttributesPlaceDisplayPoint
from openapi_client.models.app_clip_advanced_experience_attributes_place_main_address import AppClipAdvancedExperienceAttributesPlaceMainAddress
from openapi_client.models.app_clip_advanced_experience_attributes_place_phone_number import AppClipAdvancedExperienceAttributesPlacePhoneNumber
from typing import Optional, Set
from typing_extensions import Self

class AppClipAdvancedExperienceAttributesPlace(BaseModel):
    """
    AppClipAdvancedExperienceAttributesPlace
    """ # noqa: E501
    place_id: Optional[StrictStr] = Field(default=None, alias="placeId")
    names: Optional[List[StrictStr]] = None
    main_address: Optional[AppClipAdvancedExperienceAttributesPlaceMainAddress] = Field(default=None, alias="mainAddress")
    display_point: Optional[AppClipAdvancedExperienceAttributesPlaceDisplayPoint] = Field(default=None, alias="displayPoint")
    map_action: Optional[StrictStr] = Field(default=None, alias="mapAction")
    relationship: Optional[StrictStr] = None
    phone_number: Optional[AppClipAdvancedExperienceAttributesPlacePhoneNumber] = Field(default=None, alias="phoneNumber")
    home_page: Optional[StrictStr] = Field(default=None, alias="homePage")
    categories: Optional[List[StrictStr]] = None
    __properties: ClassVar[List[str]] = ["placeId", "names", "mainAddress", "displayPoint", "mapAction", "relationship", "phoneNumber", "homePage", "categories"]

    @field_validator('map_action')
    def map_action_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['BUY_TICKETS', 'VIEW_AVAILABILITY', 'VIEW_PRICING', 'HOTEL_BOOK_ROOM', 'PARKING_RESERVE_PARKING', 'RESTAURANT_JOIN_WAITLIST', 'RESTAURANT_ORDER_DELIVERY', 'RESTAURANT_ORDER_FOOD', 'RESTAURANT_ORDER_TAKEOUT', 'RESTAURANT_RESERVATION', 'SCHEDULE_APPOINTMENT', 'RESTAURANT_VIEW_MENU', 'THEATER_NOW_PLAYING', 'AIRLINE_BOOK_TRAVEL', 'AIRLINE_CHECK_IN', 'AIRLINE_FLIGHT_STATUS', 'APPLY', 'BOOK', 'BOOK_ACTIVITIES', 'BOOK_RIDES', 'BOOK_TEETIMES', 'BOOK_TOURS', 'CAREERS', 'CHARGE_EV', 'COUPONS', 'DONATE', 'EVENTS', 'EVENTS_SHOWS', 'EVENTS_SPORTS', 'GIFT_CARD', 'HOTEL_AMENITIES', 'JOIN', 'PARKING_AVAILABLE', 'RESTAURANT_PICKUP', 'RETAIL_SERVICE_QUOTE', 'RETAIL_STORE_DELIVERY', 'RETAIL_STORE_PICKUP', 'RETAIL_STORE_SHOP', 'SERVICES', 'SUPPORT']):
            raise ValueError("must be one of enum values ('BUY_TICKETS', 'VIEW_AVAILABILITY', 'VIEW_PRICING', 'HOTEL_BOOK_ROOM', 'PARKING_RESERVE_PARKING', 'RESTAURANT_JOIN_WAITLIST', 'RESTAURANT_ORDER_DELIVERY', 'RESTAURANT_ORDER_FOOD', 'RESTAURANT_ORDER_TAKEOUT', 'RESTAURANT_RESERVATION', 'SCHEDULE_APPOINTMENT', 'RESTAURANT_VIEW_MENU', 'THEATER_NOW_PLAYING', 'AIRLINE_BOOK_TRAVEL', 'AIRLINE_CHECK_IN', 'AIRLINE_FLIGHT_STATUS', 'APPLY', 'BOOK', 'BOOK_ACTIVITIES', 'BOOK_RIDES', 'BOOK_TEETIMES', 'BOOK_TOURS', 'CAREERS', 'CHARGE_EV', 'COUPONS', 'DONATE', 'EVENTS', 'EVENTS_SHOWS', 'EVENTS_SPORTS', 'GIFT_CARD', 'HOTEL_AMENITIES', 'JOIN', 'PARKING_AVAILABLE', 'RESTAURANT_PICKUP', 'RETAIL_SERVICE_QUOTE', 'RETAIL_STORE_DELIVERY', 'RETAIL_STORE_PICKUP', 'RETAIL_STORE_SHOP', 'SERVICES', 'SUPPORT')")
        return value

    @field_validator('relationship')
    def relationship_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['OWNER', 'AUTHORIZED', 'OTHER']):
            raise ValueError("must be one of enum values ('OWNER', 'AUTHORIZED', 'OTHER')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AppClipAdvancedExperienceAttributesPlace from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of main_address
        if self.main_address:
            _dict['mainAddress'] = self.main_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of display_point
        if self.display_point:
            _dict['displayPoint'] = self.display_point.to_dict()
        # override the default output from pydantic by calling `to_dict()` of phone_number
        if self.phone_number:
            _dict['phoneNumber'] = self.phone_number.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AppClipAdvancedExperienceAttributesPlace from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "placeId": obj.get("placeId"),
            "names": obj.get("names"),
            "mainAddress": AppClipAdvancedExperienceAttributesPlaceMainAddress.from_dict(obj["mainAddress"]) if obj.get("mainAddress") is not None else None,
            "displayPoint": AppClipAdvancedExperienceAttributesPlaceDisplayPoint.from_dict(obj["displayPoint"]) if obj.get("displayPoint") is not None else None,
            "mapAction": obj.get("mapAction"),
            "relationship": obj.get("relationship"),
            "phoneNumber": AppClipAdvancedExperienceAttributesPlacePhoneNumber.from_dict(obj["phoneNumber"]) if obj.get("phoneNumber") is not None else None,
            "homePage": obj.get("homePage"),
            "categories": obj.get("categories")
        })
        return _obj


