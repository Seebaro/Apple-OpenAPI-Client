# coding: utf-8

"""
    App Store Connect API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.build_bundle_type import BuildBundleType
from typing import Optional, Set
from typing_extensions import Self

class BuildBundleAttributes(BaseModel):
    """
    BuildBundleAttributes
    """ # noqa: E501
    bundle_id: Optional[StrictStr] = Field(default=None, alias="bundleId")
    bundle_type: Optional[BuildBundleType] = Field(default=None, alias="bundleType")
    sdk_build: Optional[StrictStr] = Field(default=None, alias="sdkBuild")
    platform_build: Optional[StrictStr] = Field(default=None, alias="platformBuild")
    file_name: Optional[StrictStr] = Field(default=None, alias="fileName")
    has_sirikit: Optional[StrictBool] = Field(default=None, alias="hasSirikit")
    has_on_demand_resources: Optional[StrictBool] = Field(default=None, alias="hasOnDemandResources")
    has_prerendered_icon: Optional[StrictBool] = Field(default=None, alias="hasPrerenderedIcon")
    uses_location_services: Optional[StrictBool] = Field(default=None, alias="usesLocationServices")
    is_ios_build_mac_app_store_compatible: Optional[StrictBool] = Field(default=None, alias="isIosBuildMacAppStoreCompatible")
    includes_symbols: Optional[StrictBool] = Field(default=None, alias="includesSymbols")
    d_sym_url: Optional[StrictStr] = Field(default=None, alias="dSYMUrl")
    supported_architectures: Optional[List[StrictStr]] = Field(default=None, alias="supportedArchitectures")
    required_capabilities: Optional[List[StrictStr]] = Field(default=None, alias="requiredCapabilities")
    device_protocols: Optional[List[StrictStr]] = Field(default=None, alias="deviceProtocols")
    locales: Optional[List[StrictStr]] = None
    entitlements: Optional[Dict[str, Dict[str, StrictStr]]] = None
    ba_download_allowance: Optional[StrictInt] = Field(default=None, alias="baDownloadAllowance")
    ba_max_install_size: Optional[StrictInt] = Field(default=None, alias="baMaxInstallSize")
    __properties: ClassVar[List[str]] = ["bundleId", "bundleType", "sdkBuild", "platformBuild", "fileName", "hasSirikit", "hasOnDemandResources", "hasPrerenderedIcon", "usesLocationServices", "isIosBuildMacAppStoreCompatible", "includesSymbols", "dSYMUrl", "supportedArchitectures", "requiredCapabilities", "deviceProtocols", "locales", "entitlements", "baDownloadAllowance", "baMaxInstallSize"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BuildBundleAttributes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BuildBundleAttributes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bundleId": obj.get("bundleId"),
            "bundleType": obj.get("bundleType"),
            "sdkBuild": obj.get("sdkBuild"),
            "platformBuild": obj.get("platformBuild"),
            "fileName": obj.get("fileName"),
            "hasSirikit": obj.get("hasSirikit"),
            "hasOnDemandResources": obj.get("hasOnDemandResources"),
            "hasPrerenderedIcon": obj.get("hasPrerenderedIcon"),
            "usesLocationServices": obj.get("usesLocationServices"),
            "isIosBuildMacAppStoreCompatible": obj.get("isIosBuildMacAppStoreCompatible"),
            "includesSymbols": obj.get("includesSymbols"),
            "dSYMUrl": obj.get("dSYMUrl"),
            "supportedArchitectures": obj.get("supportedArchitectures"),
            "requiredCapabilities": obj.get("requiredCapabilities"),
            "deviceProtocols": obj.get("deviceProtocols"),
            "locales": obj.get("locales"),
            "entitlements": obj.get("entitlements"),
            "baDownloadAllowance": obj.get("baDownloadAllowance"),
            "baMaxInstallSize": obj.get("baMaxInstallSize")
        })
        return _obj


