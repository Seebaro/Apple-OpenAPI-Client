# coding: utf-8

"""
    App Store Connect API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.app_event_attributes_territory_schedules_inner import AppEventAttributesTerritorySchedulesInner
from typing import Optional, Set
from typing_extensions import Self

class AppEventAttributes(BaseModel):
    """
    AppEventAttributes
    """ # noqa: E501
    reference_name: Optional[StrictStr] = Field(default=None, alias="referenceName")
    badge: Optional[StrictStr] = None
    event_state: Optional[StrictStr] = Field(default=None, alias="eventState")
    deep_link: Optional[StrictStr] = Field(default=None, alias="deepLink")
    purchase_requirement: Optional[StrictStr] = Field(default=None, alias="purchaseRequirement")
    primary_locale: Optional[StrictStr] = Field(default=None, alias="primaryLocale")
    priority: Optional[StrictStr] = None
    purpose: Optional[StrictStr] = None
    territory_schedules: Optional[List[AppEventAttributesTerritorySchedulesInner]] = Field(default=None, alias="territorySchedules")
    archived_territory_schedules: Optional[List[AppEventAttributesTerritorySchedulesInner]] = Field(default=None, alias="archivedTerritorySchedules")
    __properties: ClassVar[List[str]] = ["referenceName", "badge", "eventState", "deepLink", "purchaseRequirement", "primaryLocale", "priority", "purpose", "territorySchedules", "archivedTerritorySchedules"]

    @field_validator('badge')
    def badge_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['LIVE_EVENT', 'PREMIERE', 'CHALLENGE', 'COMPETITION', 'NEW_SEASON', 'MAJOR_UPDATE', 'SPECIAL_EVENT']):
            raise ValueError("must be one of enum values ('LIVE_EVENT', 'PREMIERE', 'CHALLENGE', 'COMPETITION', 'NEW_SEASON', 'MAJOR_UPDATE', 'SPECIAL_EVENT')")
        return value

    @field_validator('event_state')
    def event_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DRAFT', 'READY_FOR_REVIEW', 'WAITING_FOR_REVIEW', 'IN_REVIEW', 'REJECTED', 'ACCEPTED', 'APPROVED', 'PUBLISHED', 'PAST', 'ARCHIVED']):
            raise ValueError("must be one of enum values ('DRAFT', 'READY_FOR_REVIEW', 'WAITING_FOR_REVIEW', 'IN_REVIEW', 'REJECTED', 'ACCEPTED', 'APPROVED', 'PUBLISHED', 'PAST', 'ARCHIVED')")
        return value

    @field_validator('priority')
    def priority_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['HIGH', 'NORMAL']):
            raise ValueError("must be one of enum values ('HIGH', 'NORMAL')")
        return value

    @field_validator('purpose')
    def purpose_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['APPROPRIATE_FOR_ALL_USERS', 'ATTRACT_NEW_USERS', 'KEEP_ACTIVE_USERS_INFORMED', 'BRING_BACK_LAPSED_USERS']):
            raise ValueError("must be one of enum values ('APPROPRIATE_FOR_ALL_USERS', 'ATTRACT_NEW_USERS', 'KEEP_ACTIVE_USERS_INFORMED', 'BRING_BACK_LAPSED_USERS')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AppEventAttributes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in territory_schedules (list)
        _items = []
        if self.territory_schedules:
            for _item_territory_schedules in self.territory_schedules:
                if _item_territory_schedules:
                    _items.append(_item_territory_schedules.to_dict())
            _dict['territorySchedules'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in archived_territory_schedules (list)
        _items = []
        if self.archived_territory_schedules:
            for _item_archived_territory_schedules in self.archived_territory_schedules:
                if _item_archived_territory_schedules:
                    _items.append(_item_archived_territory_schedules.to_dict())
            _dict['archivedTerritorySchedules'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AppEventAttributes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "referenceName": obj.get("referenceName"),
            "badge": obj.get("badge"),
            "eventState": obj.get("eventState"),
            "deepLink": obj.get("deepLink"),
            "purchaseRequirement": obj.get("purchaseRequirement"),
            "primaryLocale": obj.get("primaryLocale"),
            "priority": obj.get("priority"),
            "purpose": obj.get("purpose"),
            "territorySchedules": [AppEventAttributesTerritorySchedulesInner.from_dict(_item) for _item in obj["territorySchedules"]] if obj.get("territorySchedules") is not None else None,
            "archivedTerritorySchedules": [AppEventAttributesTerritorySchedulesInner.from_dict(_item) for _item in obj["archivedTerritorySchedules"]] if obj.get("archivedTerritorySchedules") is not None else None
        })
        return _obj


