# coding: utf-8

"""
    App Store Connect API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictStr, field_validator
from typing import List, Optional
from typing_extensions import Annotated
from openapi_client.models.app_clip_advanced_experiences_response import AppClipAdvancedExperiencesResponse
from openapi_client.models.app_clip_app_clip_advanced_experiences_linkages_response import AppClipAppClipAdvancedExperiencesLinkagesResponse
from openapi_client.models.app_clip_app_clip_default_experiences_linkages_response import AppClipAppClipDefaultExperiencesLinkagesResponse
from openapi_client.models.app_clip_default_experiences_response import AppClipDefaultExperiencesResponse
from openapi_client.models.app_clip_response import AppClipResponse

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class AppClipsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def app_clips_app_clip_advanced_experiences_get_to_many_related(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        filter_status: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'status'")] = None,
        filter_place_status: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'placeStatus'")] = None,
        filter_action: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'action'")] = None,
        fields_app_clip_advanced_experiences: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appClipAdvancedExperiences")] = None,
        fields_app_clips: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appClips")] = None,
        fields_app_clip_advanced_experience_images: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appClipAdvancedExperienceImages")] = None,
        fields_app_clip_advanced_experience_localizations: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appClipAdvancedExperienceLocalizations")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        include: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of relationships to include")] = None,
        limit_localizations: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related localizations returned (when they are included)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AppClipAdvancedExperiencesResponse:
        """app_clips_app_clip_advanced_experiences_get_to_many_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param filter_status: filter by attribute 'status'
        :type filter_status: List[str]
        :param filter_place_status: filter by attribute 'placeStatus'
        :type filter_place_status: List[str]
        :param filter_action: filter by attribute 'action'
        :type filter_action: List[str]
        :param fields_app_clip_advanced_experiences: the fields to include for returned resources of type appClipAdvancedExperiences
        :type fields_app_clip_advanced_experiences: List[str]
        :param fields_app_clips: the fields to include for returned resources of type appClips
        :type fields_app_clips: List[str]
        :param fields_app_clip_advanced_experience_images: the fields to include for returned resources of type appClipAdvancedExperienceImages
        :type fields_app_clip_advanced_experience_images: List[str]
        :param fields_app_clip_advanced_experience_localizations: the fields to include for returned resources of type appClipAdvancedExperienceLocalizations
        :type fields_app_clip_advanced_experience_localizations: List[str]
        :param limit: maximum resources per page
        :type limit: int
        :param include: comma-separated list of relationships to include
        :type include: List[str]
        :param limit_localizations: maximum number of related localizations returned (when they are included)
        :type limit_localizations: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._app_clips_app_clip_advanced_experiences_get_to_many_related_serialize(
            id=id,
            filter_status=filter_status,
            filter_place_status=filter_place_status,
            filter_action=filter_action,
            fields_app_clip_advanced_experiences=fields_app_clip_advanced_experiences,
            fields_app_clips=fields_app_clips,
            fields_app_clip_advanced_experience_images=fields_app_clip_advanced_experience_images,
            fields_app_clip_advanced_experience_localizations=fields_app_clip_advanced_experience_localizations,
            limit=limit,
            include=include,
            limit_localizations=limit_localizations,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '200': "AppClipAdvancedExperiencesResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def app_clips_app_clip_advanced_experiences_get_to_many_related_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        filter_status: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'status'")] = None,
        filter_place_status: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'placeStatus'")] = None,
        filter_action: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'action'")] = None,
        fields_app_clip_advanced_experiences: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appClipAdvancedExperiences")] = None,
        fields_app_clips: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appClips")] = None,
        fields_app_clip_advanced_experience_images: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appClipAdvancedExperienceImages")] = None,
        fields_app_clip_advanced_experience_localizations: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appClipAdvancedExperienceLocalizations")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        include: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of relationships to include")] = None,
        limit_localizations: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related localizations returned (when they are included)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AppClipAdvancedExperiencesResponse]:
        """app_clips_app_clip_advanced_experiences_get_to_many_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param filter_status: filter by attribute 'status'
        :type filter_status: List[str]
        :param filter_place_status: filter by attribute 'placeStatus'
        :type filter_place_status: List[str]
        :param filter_action: filter by attribute 'action'
        :type filter_action: List[str]
        :param fields_app_clip_advanced_experiences: the fields to include for returned resources of type appClipAdvancedExperiences
        :type fields_app_clip_advanced_experiences: List[str]
        :param fields_app_clips: the fields to include for returned resources of type appClips
        :type fields_app_clips: List[str]
        :param fields_app_clip_advanced_experience_images: the fields to include for returned resources of type appClipAdvancedExperienceImages
        :type fields_app_clip_advanced_experience_images: List[str]
        :param fields_app_clip_advanced_experience_localizations: the fields to include for returned resources of type appClipAdvancedExperienceLocalizations
        :type fields_app_clip_advanced_experience_localizations: List[str]
        :param limit: maximum resources per page
        :type limit: int
        :param include: comma-separated list of relationships to include
        :type include: List[str]
        :param limit_localizations: maximum number of related localizations returned (when they are included)
        :type limit_localizations: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._app_clips_app_clip_advanced_experiences_get_to_many_related_serialize(
            id=id,
            filter_status=filter_status,
            filter_place_status=filter_place_status,
            filter_action=filter_action,
            fields_app_clip_advanced_experiences=fields_app_clip_advanced_experiences,
            fields_app_clips=fields_app_clips,
            fields_app_clip_advanced_experience_images=fields_app_clip_advanced_experience_images,
            fields_app_clip_advanced_experience_localizations=fields_app_clip_advanced_experience_localizations,
            limit=limit,
            include=include,
            limit_localizations=limit_localizations,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '200': "AppClipAdvancedExperiencesResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def app_clips_app_clip_advanced_experiences_get_to_many_related_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        filter_status: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'status'")] = None,
        filter_place_status: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'placeStatus'")] = None,
        filter_action: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'action'")] = None,
        fields_app_clip_advanced_experiences: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appClipAdvancedExperiences")] = None,
        fields_app_clips: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appClips")] = None,
        fields_app_clip_advanced_experience_images: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appClipAdvancedExperienceImages")] = None,
        fields_app_clip_advanced_experience_localizations: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appClipAdvancedExperienceLocalizations")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        include: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of relationships to include")] = None,
        limit_localizations: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related localizations returned (when they are included)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """app_clips_app_clip_advanced_experiences_get_to_many_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param filter_status: filter by attribute 'status'
        :type filter_status: List[str]
        :param filter_place_status: filter by attribute 'placeStatus'
        :type filter_place_status: List[str]
        :param filter_action: filter by attribute 'action'
        :type filter_action: List[str]
        :param fields_app_clip_advanced_experiences: the fields to include for returned resources of type appClipAdvancedExperiences
        :type fields_app_clip_advanced_experiences: List[str]
        :param fields_app_clips: the fields to include for returned resources of type appClips
        :type fields_app_clips: List[str]
        :param fields_app_clip_advanced_experience_images: the fields to include for returned resources of type appClipAdvancedExperienceImages
        :type fields_app_clip_advanced_experience_images: List[str]
        :param fields_app_clip_advanced_experience_localizations: the fields to include for returned resources of type appClipAdvancedExperienceLocalizations
        :type fields_app_clip_advanced_experience_localizations: List[str]
        :param limit: maximum resources per page
        :type limit: int
        :param include: comma-separated list of relationships to include
        :type include: List[str]
        :param limit_localizations: maximum number of related localizations returned (when they are included)
        :type limit_localizations: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._app_clips_app_clip_advanced_experiences_get_to_many_related_serialize(
            id=id,
            filter_status=filter_status,
            filter_place_status=filter_place_status,
            filter_action=filter_action,
            fields_app_clip_advanced_experiences=fields_app_clip_advanced_experiences,
            fields_app_clips=fields_app_clips,
            fields_app_clip_advanced_experience_images=fields_app_clip_advanced_experience_images,
            fields_app_clip_advanced_experience_localizations=fields_app_clip_advanced_experience_localizations,
            limit=limit,
            include=include,
            limit_localizations=limit_localizations,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '200': "AppClipAdvancedExperiencesResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _app_clips_app_clip_advanced_experiences_get_to_many_related_serialize(
        self,
        id,
        filter_status,
        filter_place_status,
        filter_action,
        fields_app_clip_advanced_experiences,
        fields_app_clips,
        fields_app_clip_advanced_experience_images,
        fields_app_clip_advanced_experience_localizations,
        limit,
        include,
        limit_localizations,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'filter[status]': 'csv',
            'filter[placeStatus]': 'csv',
            'filter[action]': 'csv',
            'fields[appClipAdvancedExperiences]': 'csv',
            'fields[appClips]': 'csv',
            'fields[appClipAdvancedExperienceImages]': 'csv',
            'fields[appClipAdvancedExperienceLocalizations]': 'csv',
            'include': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if filter_status is not None:
            
            _query_params.append(('filter[status]', filter_status))
            
        if filter_place_status is not None:
            
            _query_params.append(('filter[placeStatus]', filter_place_status))
            
        if filter_action is not None:
            
            _query_params.append(('filter[action]', filter_action))
            
        if fields_app_clip_advanced_experiences is not None:
            
            _query_params.append(('fields[appClipAdvancedExperiences]', fields_app_clip_advanced_experiences))
            
        if fields_app_clips is not None:
            
            _query_params.append(('fields[appClips]', fields_app_clips))
            
        if fields_app_clip_advanced_experience_images is not None:
            
            _query_params.append(('fields[appClipAdvancedExperienceImages]', fields_app_clip_advanced_experience_images))
            
        if fields_app_clip_advanced_experience_localizations is not None:
            
            _query_params.append(('fields[appClipAdvancedExperienceLocalizations]', fields_app_clip_advanced_experience_localizations))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if include is not None:
            
            _query_params.append(('include', include))
            
        if limit_localizations is not None:
            
            _query_params.append(('limit[localizations]', limit_localizations))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'itc-bearer-token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/appClips/{id}/appClipAdvancedExperiences',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def app_clips_app_clip_advanced_experiences_get_to_many_relationship(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AppClipAppClipAdvancedExperiencesLinkagesResponse:
        """app_clips_app_clip_advanced_experiences_get_to_many_relationship


        :param id: the id of the requested resource (required)
        :type id: str
        :param limit: maximum resources per page
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._app_clips_app_clip_advanced_experiences_get_to_many_relationship_serialize(
            id=id,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '200': "AppClipAppClipAdvancedExperiencesLinkagesResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def app_clips_app_clip_advanced_experiences_get_to_many_relationship_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AppClipAppClipAdvancedExperiencesLinkagesResponse]:
        """app_clips_app_clip_advanced_experiences_get_to_many_relationship


        :param id: the id of the requested resource (required)
        :type id: str
        :param limit: maximum resources per page
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._app_clips_app_clip_advanced_experiences_get_to_many_relationship_serialize(
            id=id,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '200': "AppClipAppClipAdvancedExperiencesLinkagesResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def app_clips_app_clip_advanced_experiences_get_to_many_relationship_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """app_clips_app_clip_advanced_experiences_get_to_many_relationship


        :param id: the id of the requested resource (required)
        :type id: str
        :param limit: maximum resources per page
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._app_clips_app_clip_advanced_experiences_get_to_many_relationship_serialize(
            id=id,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '200': "AppClipAppClipAdvancedExperiencesLinkagesResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _app_clips_app_clip_advanced_experiences_get_to_many_relationship_serialize(
        self,
        id,
        limit,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'itc-bearer-token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/appClips/{id}/relationships/appClipAdvancedExperiences',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def app_clips_app_clip_default_experiences_get_to_many_related(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        exists_release_with_app_store_version: Annotated[Optional[StrictBool], Field(description="filter by existence or non-existence of related 'releaseWithAppStoreVersion'")] = None,
        fields_app_clip_default_experiences: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appClipDefaultExperiences")] = None,
        fields_app_clips: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appClips")] = None,
        fields_app_store_versions: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appStoreVersions")] = None,
        fields_app_clip_default_experience_localizations: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appClipDefaultExperienceLocalizations")] = None,
        fields_app_clip_app_store_review_details: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appClipAppStoreReviewDetails")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        include: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of relationships to include")] = None,
        limit_app_clip_default_experience_localizations: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related appClipDefaultExperienceLocalizations returned (when they are included)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AppClipDefaultExperiencesResponse:
        """app_clips_app_clip_default_experiences_get_to_many_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param exists_release_with_app_store_version: filter by existence or non-existence of related 'releaseWithAppStoreVersion'
        :type exists_release_with_app_store_version: bool
        :param fields_app_clip_default_experiences: the fields to include for returned resources of type appClipDefaultExperiences
        :type fields_app_clip_default_experiences: List[str]
        :param fields_app_clips: the fields to include for returned resources of type appClips
        :type fields_app_clips: List[str]
        :param fields_app_store_versions: the fields to include for returned resources of type appStoreVersions
        :type fields_app_store_versions: List[str]
        :param fields_app_clip_default_experience_localizations: the fields to include for returned resources of type appClipDefaultExperienceLocalizations
        :type fields_app_clip_default_experience_localizations: List[str]
        :param fields_app_clip_app_store_review_details: the fields to include for returned resources of type appClipAppStoreReviewDetails
        :type fields_app_clip_app_store_review_details: List[str]
        :param limit: maximum resources per page
        :type limit: int
        :param include: comma-separated list of relationships to include
        :type include: List[str]
        :param limit_app_clip_default_experience_localizations: maximum number of related appClipDefaultExperienceLocalizations returned (when they are included)
        :type limit_app_clip_default_experience_localizations: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._app_clips_app_clip_default_experiences_get_to_many_related_serialize(
            id=id,
            exists_release_with_app_store_version=exists_release_with_app_store_version,
            fields_app_clip_default_experiences=fields_app_clip_default_experiences,
            fields_app_clips=fields_app_clips,
            fields_app_store_versions=fields_app_store_versions,
            fields_app_clip_default_experience_localizations=fields_app_clip_default_experience_localizations,
            fields_app_clip_app_store_review_details=fields_app_clip_app_store_review_details,
            limit=limit,
            include=include,
            limit_app_clip_default_experience_localizations=limit_app_clip_default_experience_localizations,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '200': "AppClipDefaultExperiencesResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def app_clips_app_clip_default_experiences_get_to_many_related_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        exists_release_with_app_store_version: Annotated[Optional[StrictBool], Field(description="filter by existence or non-existence of related 'releaseWithAppStoreVersion'")] = None,
        fields_app_clip_default_experiences: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appClipDefaultExperiences")] = None,
        fields_app_clips: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appClips")] = None,
        fields_app_store_versions: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appStoreVersions")] = None,
        fields_app_clip_default_experience_localizations: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appClipDefaultExperienceLocalizations")] = None,
        fields_app_clip_app_store_review_details: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appClipAppStoreReviewDetails")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        include: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of relationships to include")] = None,
        limit_app_clip_default_experience_localizations: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related appClipDefaultExperienceLocalizations returned (when they are included)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AppClipDefaultExperiencesResponse]:
        """app_clips_app_clip_default_experiences_get_to_many_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param exists_release_with_app_store_version: filter by existence or non-existence of related 'releaseWithAppStoreVersion'
        :type exists_release_with_app_store_version: bool
        :param fields_app_clip_default_experiences: the fields to include for returned resources of type appClipDefaultExperiences
        :type fields_app_clip_default_experiences: List[str]
        :param fields_app_clips: the fields to include for returned resources of type appClips
        :type fields_app_clips: List[str]
        :param fields_app_store_versions: the fields to include for returned resources of type appStoreVersions
        :type fields_app_store_versions: List[str]
        :param fields_app_clip_default_experience_localizations: the fields to include for returned resources of type appClipDefaultExperienceLocalizations
        :type fields_app_clip_default_experience_localizations: List[str]
        :param fields_app_clip_app_store_review_details: the fields to include for returned resources of type appClipAppStoreReviewDetails
        :type fields_app_clip_app_store_review_details: List[str]
        :param limit: maximum resources per page
        :type limit: int
        :param include: comma-separated list of relationships to include
        :type include: List[str]
        :param limit_app_clip_default_experience_localizations: maximum number of related appClipDefaultExperienceLocalizations returned (when they are included)
        :type limit_app_clip_default_experience_localizations: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._app_clips_app_clip_default_experiences_get_to_many_related_serialize(
            id=id,
            exists_release_with_app_store_version=exists_release_with_app_store_version,
            fields_app_clip_default_experiences=fields_app_clip_default_experiences,
            fields_app_clips=fields_app_clips,
            fields_app_store_versions=fields_app_store_versions,
            fields_app_clip_default_experience_localizations=fields_app_clip_default_experience_localizations,
            fields_app_clip_app_store_review_details=fields_app_clip_app_store_review_details,
            limit=limit,
            include=include,
            limit_app_clip_default_experience_localizations=limit_app_clip_default_experience_localizations,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '200': "AppClipDefaultExperiencesResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def app_clips_app_clip_default_experiences_get_to_many_related_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        exists_release_with_app_store_version: Annotated[Optional[StrictBool], Field(description="filter by existence or non-existence of related 'releaseWithAppStoreVersion'")] = None,
        fields_app_clip_default_experiences: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appClipDefaultExperiences")] = None,
        fields_app_clips: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appClips")] = None,
        fields_app_store_versions: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appStoreVersions")] = None,
        fields_app_clip_default_experience_localizations: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appClipDefaultExperienceLocalizations")] = None,
        fields_app_clip_app_store_review_details: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appClipAppStoreReviewDetails")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        include: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of relationships to include")] = None,
        limit_app_clip_default_experience_localizations: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related appClipDefaultExperienceLocalizations returned (when they are included)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """app_clips_app_clip_default_experiences_get_to_many_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param exists_release_with_app_store_version: filter by existence or non-existence of related 'releaseWithAppStoreVersion'
        :type exists_release_with_app_store_version: bool
        :param fields_app_clip_default_experiences: the fields to include for returned resources of type appClipDefaultExperiences
        :type fields_app_clip_default_experiences: List[str]
        :param fields_app_clips: the fields to include for returned resources of type appClips
        :type fields_app_clips: List[str]
        :param fields_app_store_versions: the fields to include for returned resources of type appStoreVersions
        :type fields_app_store_versions: List[str]
        :param fields_app_clip_default_experience_localizations: the fields to include for returned resources of type appClipDefaultExperienceLocalizations
        :type fields_app_clip_default_experience_localizations: List[str]
        :param fields_app_clip_app_store_review_details: the fields to include for returned resources of type appClipAppStoreReviewDetails
        :type fields_app_clip_app_store_review_details: List[str]
        :param limit: maximum resources per page
        :type limit: int
        :param include: comma-separated list of relationships to include
        :type include: List[str]
        :param limit_app_clip_default_experience_localizations: maximum number of related appClipDefaultExperienceLocalizations returned (when they are included)
        :type limit_app_clip_default_experience_localizations: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._app_clips_app_clip_default_experiences_get_to_many_related_serialize(
            id=id,
            exists_release_with_app_store_version=exists_release_with_app_store_version,
            fields_app_clip_default_experiences=fields_app_clip_default_experiences,
            fields_app_clips=fields_app_clips,
            fields_app_store_versions=fields_app_store_versions,
            fields_app_clip_default_experience_localizations=fields_app_clip_default_experience_localizations,
            fields_app_clip_app_store_review_details=fields_app_clip_app_store_review_details,
            limit=limit,
            include=include,
            limit_app_clip_default_experience_localizations=limit_app_clip_default_experience_localizations,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '200': "AppClipDefaultExperiencesResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _app_clips_app_clip_default_experiences_get_to_many_related_serialize(
        self,
        id,
        exists_release_with_app_store_version,
        fields_app_clip_default_experiences,
        fields_app_clips,
        fields_app_store_versions,
        fields_app_clip_default_experience_localizations,
        fields_app_clip_app_store_review_details,
        limit,
        include,
        limit_app_clip_default_experience_localizations,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'fields[appClipDefaultExperiences]': 'csv',
            'fields[appClips]': 'csv',
            'fields[appStoreVersions]': 'csv',
            'fields[appClipDefaultExperienceLocalizations]': 'csv',
            'fields[appClipAppStoreReviewDetails]': 'csv',
            'include': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if exists_release_with_app_store_version is not None:
            
            _query_params.append(('exists[releaseWithAppStoreVersion]', exists_release_with_app_store_version))
            
        if fields_app_clip_default_experiences is not None:
            
            _query_params.append(('fields[appClipDefaultExperiences]', fields_app_clip_default_experiences))
            
        if fields_app_clips is not None:
            
            _query_params.append(('fields[appClips]', fields_app_clips))
            
        if fields_app_store_versions is not None:
            
            _query_params.append(('fields[appStoreVersions]', fields_app_store_versions))
            
        if fields_app_clip_default_experience_localizations is not None:
            
            _query_params.append(('fields[appClipDefaultExperienceLocalizations]', fields_app_clip_default_experience_localizations))
            
        if fields_app_clip_app_store_review_details is not None:
            
            _query_params.append(('fields[appClipAppStoreReviewDetails]', fields_app_clip_app_store_review_details))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if include is not None:
            
            _query_params.append(('include', include))
            
        if limit_app_clip_default_experience_localizations is not None:
            
            _query_params.append(('limit[appClipDefaultExperienceLocalizations]', limit_app_clip_default_experience_localizations))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'itc-bearer-token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/appClips/{id}/appClipDefaultExperiences',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def app_clips_app_clip_default_experiences_get_to_many_relationship(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AppClipAppClipDefaultExperiencesLinkagesResponse:
        """app_clips_app_clip_default_experiences_get_to_many_relationship


        :param id: the id of the requested resource (required)
        :type id: str
        :param limit: maximum resources per page
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._app_clips_app_clip_default_experiences_get_to_many_relationship_serialize(
            id=id,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '200': "AppClipAppClipDefaultExperiencesLinkagesResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def app_clips_app_clip_default_experiences_get_to_many_relationship_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AppClipAppClipDefaultExperiencesLinkagesResponse]:
        """app_clips_app_clip_default_experiences_get_to_many_relationship


        :param id: the id of the requested resource (required)
        :type id: str
        :param limit: maximum resources per page
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._app_clips_app_clip_default_experiences_get_to_many_relationship_serialize(
            id=id,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '200': "AppClipAppClipDefaultExperiencesLinkagesResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def app_clips_app_clip_default_experiences_get_to_many_relationship_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """app_clips_app_clip_default_experiences_get_to_many_relationship


        :param id: the id of the requested resource (required)
        :type id: str
        :param limit: maximum resources per page
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._app_clips_app_clip_default_experiences_get_to_many_relationship_serialize(
            id=id,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '200': "AppClipAppClipDefaultExperiencesLinkagesResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _app_clips_app_clip_default_experiences_get_to_many_relationship_serialize(
        self,
        id,
        limit,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'itc-bearer-token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/appClips/{id}/relationships/appClipDefaultExperiences',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def app_clips_get_instance(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_app_clips: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appClips")] = None,
        fields_app_clip_default_experiences: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appClipDefaultExperiences")] = None,
        include: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of relationships to include")] = None,
        limit_app_clip_default_experiences: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related appClipDefaultExperiences returned (when they are included)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AppClipResponse:
        """app_clips_get_instance


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_app_clips: the fields to include for returned resources of type appClips
        :type fields_app_clips: List[str]
        :param fields_app_clip_default_experiences: the fields to include for returned resources of type appClipDefaultExperiences
        :type fields_app_clip_default_experiences: List[str]
        :param include: comma-separated list of relationships to include
        :type include: List[str]
        :param limit_app_clip_default_experiences: maximum number of related appClipDefaultExperiences returned (when they are included)
        :type limit_app_clip_default_experiences: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._app_clips_get_instance_serialize(
            id=id,
            fields_app_clips=fields_app_clips,
            fields_app_clip_default_experiences=fields_app_clip_default_experiences,
            include=include,
            limit_app_clip_default_experiences=limit_app_clip_default_experiences,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '200': "AppClipResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def app_clips_get_instance_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_app_clips: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appClips")] = None,
        fields_app_clip_default_experiences: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appClipDefaultExperiences")] = None,
        include: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of relationships to include")] = None,
        limit_app_clip_default_experiences: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related appClipDefaultExperiences returned (when they are included)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AppClipResponse]:
        """app_clips_get_instance


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_app_clips: the fields to include for returned resources of type appClips
        :type fields_app_clips: List[str]
        :param fields_app_clip_default_experiences: the fields to include for returned resources of type appClipDefaultExperiences
        :type fields_app_clip_default_experiences: List[str]
        :param include: comma-separated list of relationships to include
        :type include: List[str]
        :param limit_app_clip_default_experiences: maximum number of related appClipDefaultExperiences returned (when they are included)
        :type limit_app_clip_default_experiences: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._app_clips_get_instance_serialize(
            id=id,
            fields_app_clips=fields_app_clips,
            fields_app_clip_default_experiences=fields_app_clip_default_experiences,
            include=include,
            limit_app_clip_default_experiences=limit_app_clip_default_experiences,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '200': "AppClipResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def app_clips_get_instance_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_app_clips: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appClips")] = None,
        fields_app_clip_default_experiences: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appClipDefaultExperiences")] = None,
        include: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of relationships to include")] = None,
        limit_app_clip_default_experiences: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related appClipDefaultExperiences returned (when they are included)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """app_clips_get_instance


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_app_clips: the fields to include for returned resources of type appClips
        :type fields_app_clips: List[str]
        :param fields_app_clip_default_experiences: the fields to include for returned resources of type appClipDefaultExperiences
        :type fields_app_clip_default_experiences: List[str]
        :param include: comma-separated list of relationships to include
        :type include: List[str]
        :param limit_app_clip_default_experiences: maximum number of related appClipDefaultExperiences returned (when they are included)
        :type limit_app_clip_default_experiences: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._app_clips_get_instance_serialize(
            id=id,
            fields_app_clips=fields_app_clips,
            fields_app_clip_default_experiences=fields_app_clip_default_experiences,
            include=include,
            limit_app_clip_default_experiences=limit_app_clip_default_experiences,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '200': "AppClipResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _app_clips_get_instance_serialize(
        self,
        id,
        fields_app_clips,
        fields_app_clip_default_experiences,
        include,
        limit_app_clip_default_experiences,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'fields[appClips]': 'csv',
            'fields[appClipDefaultExperiences]': 'csv',
            'include': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if fields_app_clips is not None:
            
            _query_params.append(('fields[appClips]', fields_app_clips))
            
        if fields_app_clip_default_experiences is not None:
            
            _query_params.append(('fields[appClipDefaultExperiences]', fields_app_clip_default_experiences))
            
        if include is not None:
            
            _query_params.append(('include', include))
            
        if limit_app_clip_default_experiences is not None:
            
            _query_params.append(('limit[appClipDefaultExperiences]', limit_app_clip_default_experiences))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'itc-bearer-token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/appClips/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


