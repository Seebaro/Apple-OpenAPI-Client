# coding: utf-8

"""
    App Store Connect API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr, field_validator
from typing import List, Optional
from typing_extensions import Annotated
from openapi_client.models.game_center_matchmaking_boolean_rule_results_v1_metric_response import GameCenterMatchmakingBooleanRuleResultsV1MetricResponse
from openapi_client.models.game_center_matchmaking_number_rule_results_v1_metric_response import GameCenterMatchmakingNumberRuleResultsV1MetricResponse
from openapi_client.models.game_center_matchmaking_rule_create_request import GameCenterMatchmakingRuleCreateRequest
from openapi_client.models.game_center_matchmaking_rule_errors_v1_metric_response import GameCenterMatchmakingRuleErrorsV1MetricResponse
from openapi_client.models.game_center_matchmaking_rule_response import GameCenterMatchmakingRuleResponse
from openapi_client.models.game_center_matchmaking_rule_update_request import GameCenterMatchmakingRuleUpdateRequest

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class GameCenterMatchmakingRulesApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def game_center_matchmaking_rules_create_instance(
        self,
        game_center_matchmaking_rule_create_request: Annotated[GameCenterMatchmakingRuleCreateRequest, Field(description="GameCenterMatchmakingRule representation")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GameCenterMatchmakingRuleResponse:
        """game_center_matchmaking_rules_create_instance


        :param game_center_matchmaking_rule_create_request: GameCenterMatchmakingRule representation (required)
        :type game_center_matchmaking_rule_create_request: GameCenterMatchmakingRuleCreateRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._game_center_matchmaking_rules_create_instance_serialize(
            game_center_matchmaking_rule_create_request=game_center_matchmaking_rule_create_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '422': "ErrorResponse",
            '201': "GameCenterMatchmakingRuleResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def game_center_matchmaking_rules_create_instance_with_http_info(
        self,
        game_center_matchmaking_rule_create_request: Annotated[GameCenterMatchmakingRuleCreateRequest, Field(description="GameCenterMatchmakingRule representation")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GameCenterMatchmakingRuleResponse]:
        """game_center_matchmaking_rules_create_instance


        :param game_center_matchmaking_rule_create_request: GameCenterMatchmakingRule representation (required)
        :type game_center_matchmaking_rule_create_request: GameCenterMatchmakingRuleCreateRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._game_center_matchmaking_rules_create_instance_serialize(
            game_center_matchmaking_rule_create_request=game_center_matchmaking_rule_create_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '422': "ErrorResponse",
            '201': "GameCenterMatchmakingRuleResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def game_center_matchmaking_rules_create_instance_without_preload_content(
        self,
        game_center_matchmaking_rule_create_request: Annotated[GameCenterMatchmakingRuleCreateRequest, Field(description="GameCenterMatchmakingRule representation")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """game_center_matchmaking_rules_create_instance


        :param game_center_matchmaking_rule_create_request: GameCenterMatchmakingRule representation (required)
        :type game_center_matchmaking_rule_create_request: GameCenterMatchmakingRuleCreateRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._game_center_matchmaking_rules_create_instance_serialize(
            game_center_matchmaking_rule_create_request=game_center_matchmaking_rule_create_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '422': "ErrorResponse",
            '201': "GameCenterMatchmakingRuleResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _game_center_matchmaking_rules_create_instance_serialize(
        self,
        game_center_matchmaking_rule_create_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if game_center_matchmaking_rule_create_request is not None:
            _body_params = game_center_matchmaking_rule_create_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'itc-bearer-token'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v1/gameCenterMatchmakingRules',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def game_center_matchmaking_rules_delete_instance(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """game_center_matchmaking_rules_delete_instance


        :param id: the id of the requested resource (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._game_center_matchmaking_rules_delete_instance_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '204': None,
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def game_center_matchmaking_rules_delete_instance_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """game_center_matchmaking_rules_delete_instance


        :param id: the id of the requested resource (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._game_center_matchmaking_rules_delete_instance_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '204': None,
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def game_center_matchmaking_rules_delete_instance_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """game_center_matchmaking_rules_delete_instance


        :param id: the id of the requested resource (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._game_center_matchmaking_rules_delete_instance_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '204': None,
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _game_center_matchmaking_rules_delete_instance_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'itc-bearer-token'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/v1/gameCenterMatchmakingRules/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def game_center_matchmaking_rules_matchmaking_boolean_rule_results_get_metrics(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        granularity: Annotated[StrictStr, Field(description="the granularity of the per-group dataset")],
        group_by: Annotated[Optional[List[StrictStr]], Field(description="the dimension by which to group the results")] = None,
        filter_result: Annotated[Optional[StrictStr], Field(description="filter by 'result' attribute dimension")] = None,
        filter_game_center_matchmaking_queue: Annotated[Optional[StrictStr], Field(description="filter by 'gameCenterMatchmakingQueue' relationship dimension")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of sort expressions; metrics will be sorted as specified")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum number of groups to return per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GameCenterMatchmakingBooleanRuleResultsV1MetricResponse:
        """game_center_matchmaking_rules_matchmaking_boolean_rule_results_get_metrics


        :param id: the id of the requested resource (required)
        :type id: str
        :param granularity: the granularity of the per-group dataset (required)
        :type granularity: str
        :param group_by: the dimension by which to group the results
        :type group_by: List[str]
        :param filter_result: filter by 'result' attribute dimension
        :type filter_result: str
        :param filter_game_center_matchmaking_queue: filter by 'gameCenterMatchmakingQueue' relationship dimension
        :type filter_game_center_matchmaking_queue: str
        :param sort: comma-separated list of sort expressions; metrics will be sorted as specified
        :type sort: List[str]
        :param limit: maximum number of groups to return per page
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._game_center_matchmaking_rules_matchmaking_boolean_rule_results_get_metrics_serialize(
            id=id,
            granularity=granularity,
            group_by=group_by,
            filter_result=filter_result,
            filter_game_center_matchmaking_queue=filter_game_center_matchmaking_queue,
            sort=sort,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '200': "GameCenterMatchmakingBooleanRuleResultsV1MetricResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def game_center_matchmaking_rules_matchmaking_boolean_rule_results_get_metrics_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        granularity: Annotated[StrictStr, Field(description="the granularity of the per-group dataset")],
        group_by: Annotated[Optional[List[StrictStr]], Field(description="the dimension by which to group the results")] = None,
        filter_result: Annotated[Optional[StrictStr], Field(description="filter by 'result' attribute dimension")] = None,
        filter_game_center_matchmaking_queue: Annotated[Optional[StrictStr], Field(description="filter by 'gameCenterMatchmakingQueue' relationship dimension")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of sort expressions; metrics will be sorted as specified")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum number of groups to return per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GameCenterMatchmakingBooleanRuleResultsV1MetricResponse]:
        """game_center_matchmaking_rules_matchmaking_boolean_rule_results_get_metrics


        :param id: the id of the requested resource (required)
        :type id: str
        :param granularity: the granularity of the per-group dataset (required)
        :type granularity: str
        :param group_by: the dimension by which to group the results
        :type group_by: List[str]
        :param filter_result: filter by 'result' attribute dimension
        :type filter_result: str
        :param filter_game_center_matchmaking_queue: filter by 'gameCenterMatchmakingQueue' relationship dimension
        :type filter_game_center_matchmaking_queue: str
        :param sort: comma-separated list of sort expressions; metrics will be sorted as specified
        :type sort: List[str]
        :param limit: maximum number of groups to return per page
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._game_center_matchmaking_rules_matchmaking_boolean_rule_results_get_metrics_serialize(
            id=id,
            granularity=granularity,
            group_by=group_by,
            filter_result=filter_result,
            filter_game_center_matchmaking_queue=filter_game_center_matchmaking_queue,
            sort=sort,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '200': "GameCenterMatchmakingBooleanRuleResultsV1MetricResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def game_center_matchmaking_rules_matchmaking_boolean_rule_results_get_metrics_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        granularity: Annotated[StrictStr, Field(description="the granularity of the per-group dataset")],
        group_by: Annotated[Optional[List[StrictStr]], Field(description="the dimension by which to group the results")] = None,
        filter_result: Annotated[Optional[StrictStr], Field(description="filter by 'result' attribute dimension")] = None,
        filter_game_center_matchmaking_queue: Annotated[Optional[StrictStr], Field(description="filter by 'gameCenterMatchmakingQueue' relationship dimension")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of sort expressions; metrics will be sorted as specified")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum number of groups to return per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """game_center_matchmaking_rules_matchmaking_boolean_rule_results_get_metrics


        :param id: the id of the requested resource (required)
        :type id: str
        :param granularity: the granularity of the per-group dataset (required)
        :type granularity: str
        :param group_by: the dimension by which to group the results
        :type group_by: List[str]
        :param filter_result: filter by 'result' attribute dimension
        :type filter_result: str
        :param filter_game_center_matchmaking_queue: filter by 'gameCenterMatchmakingQueue' relationship dimension
        :type filter_game_center_matchmaking_queue: str
        :param sort: comma-separated list of sort expressions; metrics will be sorted as specified
        :type sort: List[str]
        :param limit: maximum number of groups to return per page
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._game_center_matchmaking_rules_matchmaking_boolean_rule_results_get_metrics_serialize(
            id=id,
            granularity=granularity,
            group_by=group_by,
            filter_result=filter_result,
            filter_game_center_matchmaking_queue=filter_game_center_matchmaking_queue,
            sort=sort,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '200': "GameCenterMatchmakingBooleanRuleResultsV1MetricResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _game_center_matchmaking_rules_matchmaking_boolean_rule_results_get_metrics_serialize(
        self,
        id,
        granularity,
        group_by,
        filter_result,
        filter_game_center_matchmaking_queue,
        sort,
        limit,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'groupBy': 'csv',
            'sort': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if granularity is not None:
            
            _query_params.append(('granularity', granularity))
            
        if group_by is not None:
            
            _query_params.append(('groupBy', group_by))
            
        if filter_result is not None:
            
            _query_params.append(('filter[result]', filter_result))
            
        if filter_game_center_matchmaking_queue is not None:
            
            _query_params.append(('filter[gameCenterMatchmakingQueue]', filter_game_center_matchmaking_queue))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'itc-bearer-token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/gameCenterMatchmakingRules/{id}/metrics/matchmakingBooleanRuleResults',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def game_center_matchmaking_rules_matchmaking_number_rule_results_get_metrics(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        granularity: Annotated[StrictStr, Field(description="the granularity of the per-group dataset")],
        group_by: Annotated[Optional[List[StrictStr]], Field(description="the dimension by which to group the results")] = None,
        filter_game_center_matchmaking_queue: Annotated[Optional[StrictStr], Field(description="filter by 'gameCenterMatchmakingQueue' relationship dimension")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of sort expressions; metrics will be sorted as specified")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum number of groups to return per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GameCenterMatchmakingNumberRuleResultsV1MetricResponse:
        """game_center_matchmaking_rules_matchmaking_number_rule_results_get_metrics


        :param id: the id of the requested resource (required)
        :type id: str
        :param granularity: the granularity of the per-group dataset (required)
        :type granularity: str
        :param group_by: the dimension by which to group the results
        :type group_by: List[str]
        :param filter_game_center_matchmaking_queue: filter by 'gameCenterMatchmakingQueue' relationship dimension
        :type filter_game_center_matchmaking_queue: str
        :param sort: comma-separated list of sort expressions; metrics will be sorted as specified
        :type sort: List[str]
        :param limit: maximum number of groups to return per page
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._game_center_matchmaking_rules_matchmaking_number_rule_results_get_metrics_serialize(
            id=id,
            granularity=granularity,
            group_by=group_by,
            filter_game_center_matchmaking_queue=filter_game_center_matchmaking_queue,
            sort=sort,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '200': "GameCenterMatchmakingNumberRuleResultsV1MetricResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def game_center_matchmaking_rules_matchmaking_number_rule_results_get_metrics_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        granularity: Annotated[StrictStr, Field(description="the granularity of the per-group dataset")],
        group_by: Annotated[Optional[List[StrictStr]], Field(description="the dimension by which to group the results")] = None,
        filter_game_center_matchmaking_queue: Annotated[Optional[StrictStr], Field(description="filter by 'gameCenterMatchmakingQueue' relationship dimension")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of sort expressions; metrics will be sorted as specified")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum number of groups to return per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GameCenterMatchmakingNumberRuleResultsV1MetricResponse]:
        """game_center_matchmaking_rules_matchmaking_number_rule_results_get_metrics


        :param id: the id of the requested resource (required)
        :type id: str
        :param granularity: the granularity of the per-group dataset (required)
        :type granularity: str
        :param group_by: the dimension by which to group the results
        :type group_by: List[str]
        :param filter_game_center_matchmaking_queue: filter by 'gameCenterMatchmakingQueue' relationship dimension
        :type filter_game_center_matchmaking_queue: str
        :param sort: comma-separated list of sort expressions; metrics will be sorted as specified
        :type sort: List[str]
        :param limit: maximum number of groups to return per page
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._game_center_matchmaking_rules_matchmaking_number_rule_results_get_metrics_serialize(
            id=id,
            granularity=granularity,
            group_by=group_by,
            filter_game_center_matchmaking_queue=filter_game_center_matchmaking_queue,
            sort=sort,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '200': "GameCenterMatchmakingNumberRuleResultsV1MetricResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def game_center_matchmaking_rules_matchmaking_number_rule_results_get_metrics_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        granularity: Annotated[StrictStr, Field(description="the granularity of the per-group dataset")],
        group_by: Annotated[Optional[List[StrictStr]], Field(description="the dimension by which to group the results")] = None,
        filter_game_center_matchmaking_queue: Annotated[Optional[StrictStr], Field(description="filter by 'gameCenterMatchmakingQueue' relationship dimension")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of sort expressions; metrics will be sorted as specified")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum number of groups to return per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """game_center_matchmaking_rules_matchmaking_number_rule_results_get_metrics


        :param id: the id of the requested resource (required)
        :type id: str
        :param granularity: the granularity of the per-group dataset (required)
        :type granularity: str
        :param group_by: the dimension by which to group the results
        :type group_by: List[str]
        :param filter_game_center_matchmaking_queue: filter by 'gameCenterMatchmakingQueue' relationship dimension
        :type filter_game_center_matchmaking_queue: str
        :param sort: comma-separated list of sort expressions; metrics will be sorted as specified
        :type sort: List[str]
        :param limit: maximum number of groups to return per page
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._game_center_matchmaking_rules_matchmaking_number_rule_results_get_metrics_serialize(
            id=id,
            granularity=granularity,
            group_by=group_by,
            filter_game_center_matchmaking_queue=filter_game_center_matchmaking_queue,
            sort=sort,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '200': "GameCenterMatchmakingNumberRuleResultsV1MetricResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _game_center_matchmaking_rules_matchmaking_number_rule_results_get_metrics_serialize(
        self,
        id,
        granularity,
        group_by,
        filter_game_center_matchmaking_queue,
        sort,
        limit,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'groupBy': 'csv',
            'sort': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if granularity is not None:
            
            _query_params.append(('granularity', granularity))
            
        if group_by is not None:
            
            _query_params.append(('groupBy', group_by))
            
        if filter_game_center_matchmaking_queue is not None:
            
            _query_params.append(('filter[gameCenterMatchmakingQueue]', filter_game_center_matchmaking_queue))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'itc-bearer-token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/gameCenterMatchmakingRules/{id}/metrics/matchmakingNumberRuleResults',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def game_center_matchmaking_rules_matchmaking_rule_errors_get_metrics(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        granularity: Annotated[StrictStr, Field(description="the granularity of the per-group dataset")],
        group_by: Annotated[Optional[List[StrictStr]], Field(description="the dimension by which to group the results")] = None,
        filter_game_center_matchmaking_queue: Annotated[Optional[StrictStr], Field(description="filter by 'gameCenterMatchmakingQueue' relationship dimension")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of sort expressions; metrics will be sorted as specified")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum number of groups to return per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GameCenterMatchmakingRuleErrorsV1MetricResponse:
        """game_center_matchmaking_rules_matchmaking_rule_errors_get_metrics


        :param id: the id of the requested resource (required)
        :type id: str
        :param granularity: the granularity of the per-group dataset (required)
        :type granularity: str
        :param group_by: the dimension by which to group the results
        :type group_by: List[str]
        :param filter_game_center_matchmaking_queue: filter by 'gameCenterMatchmakingQueue' relationship dimension
        :type filter_game_center_matchmaking_queue: str
        :param sort: comma-separated list of sort expressions; metrics will be sorted as specified
        :type sort: List[str]
        :param limit: maximum number of groups to return per page
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._game_center_matchmaking_rules_matchmaking_rule_errors_get_metrics_serialize(
            id=id,
            granularity=granularity,
            group_by=group_by,
            filter_game_center_matchmaking_queue=filter_game_center_matchmaking_queue,
            sort=sort,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '200': "GameCenterMatchmakingRuleErrorsV1MetricResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def game_center_matchmaking_rules_matchmaking_rule_errors_get_metrics_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        granularity: Annotated[StrictStr, Field(description="the granularity of the per-group dataset")],
        group_by: Annotated[Optional[List[StrictStr]], Field(description="the dimension by which to group the results")] = None,
        filter_game_center_matchmaking_queue: Annotated[Optional[StrictStr], Field(description="filter by 'gameCenterMatchmakingQueue' relationship dimension")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of sort expressions; metrics will be sorted as specified")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum number of groups to return per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GameCenterMatchmakingRuleErrorsV1MetricResponse]:
        """game_center_matchmaking_rules_matchmaking_rule_errors_get_metrics


        :param id: the id of the requested resource (required)
        :type id: str
        :param granularity: the granularity of the per-group dataset (required)
        :type granularity: str
        :param group_by: the dimension by which to group the results
        :type group_by: List[str]
        :param filter_game_center_matchmaking_queue: filter by 'gameCenterMatchmakingQueue' relationship dimension
        :type filter_game_center_matchmaking_queue: str
        :param sort: comma-separated list of sort expressions; metrics will be sorted as specified
        :type sort: List[str]
        :param limit: maximum number of groups to return per page
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._game_center_matchmaking_rules_matchmaking_rule_errors_get_metrics_serialize(
            id=id,
            granularity=granularity,
            group_by=group_by,
            filter_game_center_matchmaking_queue=filter_game_center_matchmaking_queue,
            sort=sort,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '200': "GameCenterMatchmakingRuleErrorsV1MetricResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def game_center_matchmaking_rules_matchmaking_rule_errors_get_metrics_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        granularity: Annotated[StrictStr, Field(description="the granularity of the per-group dataset")],
        group_by: Annotated[Optional[List[StrictStr]], Field(description="the dimension by which to group the results")] = None,
        filter_game_center_matchmaking_queue: Annotated[Optional[StrictStr], Field(description="filter by 'gameCenterMatchmakingQueue' relationship dimension")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of sort expressions; metrics will be sorted as specified")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum number of groups to return per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """game_center_matchmaking_rules_matchmaking_rule_errors_get_metrics


        :param id: the id of the requested resource (required)
        :type id: str
        :param granularity: the granularity of the per-group dataset (required)
        :type granularity: str
        :param group_by: the dimension by which to group the results
        :type group_by: List[str]
        :param filter_game_center_matchmaking_queue: filter by 'gameCenterMatchmakingQueue' relationship dimension
        :type filter_game_center_matchmaking_queue: str
        :param sort: comma-separated list of sort expressions; metrics will be sorted as specified
        :type sort: List[str]
        :param limit: maximum number of groups to return per page
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._game_center_matchmaking_rules_matchmaking_rule_errors_get_metrics_serialize(
            id=id,
            granularity=granularity,
            group_by=group_by,
            filter_game_center_matchmaking_queue=filter_game_center_matchmaking_queue,
            sort=sort,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '200': "GameCenterMatchmakingRuleErrorsV1MetricResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _game_center_matchmaking_rules_matchmaking_rule_errors_get_metrics_serialize(
        self,
        id,
        granularity,
        group_by,
        filter_game_center_matchmaking_queue,
        sort,
        limit,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'groupBy': 'csv',
            'sort': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if granularity is not None:
            
            _query_params.append(('granularity', granularity))
            
        if group_by is not None:
            
            _query_params.append(('groupBy', group_by))
            
        if filter_game_center_matchmaking_queue is not None:
            
            _query_params.append(('filter[gameCenterMatchmakingQueue]', filter_game_center_matchmaking_queue))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'itc-bearer-token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/gameCenterMatchmakingRules/{id}/metrics/matchmakingRuleErrors',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def game_center_matchmaking_rules_update_instance(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        game_center_matchmaking_rule_update_request: Annotated[GameCenterMatchmakingRuleUpdateRequest, Field(description="GameCenterMatchmakingRule representation")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GameCenterMatchmakingRuleResponse:
        """game_center_matchmaking_rules_update_instance


        :param id: the id of the requested resource (required)
        :type id: str
        :param game_center_matchmaking_rule_update_request: GameCenterMatchmakingRule representation (required)
        :type game_center_matchmaking_rule_update_request: GameCenterMatchmakingRuleUpdateRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._game_center_matchmaking_rules_update_instance_serialize(
            id=id,
            game_center_matchmaking_rule_update_request=game_center_matchmaking_rule_update_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '422': "ErrorResponse",
            '200': "GameCenterMatchmakingRuleResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def game_center_matchmaking_rules_update_instance_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        game_center_matchmaking_rule_update_request: Annotated[GameCenterMatchmakingRuleUpdateRequest, Field(description="GameCenterMatchmakingRule representation")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GameCenterMatchmakingRuleResponse]:
        """game_center_matchmaking_rules_update_instance


        :param id: the id of the requested resource (required)
        :type id: str
        :param game_center_matchmaking_rule_update_request: GameCenterMatchmakingRule representation (required)
        :type game_center_matchmaking_rule_update_request: GameCenterMatchmakingRuleUpdateRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._game_center_matchmaking_rules_update_instance_serialize(
            id=id,
            game_center_matchmaking_rule_update_request=game_center_matchmaking_rule_update_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '422': "ErrorResponse",
            '200': "GameCenterMatchmakingRuleResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def game_center_matchmaking_rules_update_instance_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        game_center_matchmaking_rule_update_request: Annotated[GameCenterMatchmakingRuleUpdateRequest, Field(description="GameCenterMatchmakingRule representation")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """game_center_matchmaking_rules_update_instance


        :param id: the id of the requested resource (required)
        :type id: str
        :param game_center_matchmaking_rule_update_request: GameCenterMatchmakingRule representation (required)
        :type game_center_matchmaking_rule_update_request: GameCenterMatchmakingRuleUpdateRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._game_center_matchmaking_rules_update_instance_serialize(
            id=id,
            game_center_matchmaking_rule_update_request=game_center_matchmaking_rule_update_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '422': "ErrorResponse",
            '200': "GameCenterMatchmakingRuleResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _game_center_matchmaking_rules_update_instance_serialize(
        self,
        id,
        game_center_matchmaking_rule_update_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if game_center_matchmaking_rule_update_request is not None:
            _body_params = game_center_matchmaking_rule_update_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'itc-bearer-token'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/v1/gameCenterMatchmakingRules/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


