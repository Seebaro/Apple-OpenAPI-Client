# coding: utf-8

"""
    App Store Connect API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr, field_validator
from typing import List, Optional
from typing_extensions import Annotated
from openapi_client.models.subscription_group_create_request import SubscriptionGroupCreateRequest
from openapi_client.models.subscription_group_localizations_response import SubscriptionGroupLocalizationsResponse
from openapi_client.models.subscription_group_response import SubscriptionGroupResponse
from openapi_client.models.subscription_group_subscription_group_localizations_linkages_response import SubscriptionGroupSubscriptionGroupLocalizationsLinkagesResponse
from openapi_client.models.subscription_group_subscriptions_linkages_response import SubscriptionGroupSubscriptionsLinkagesResponse
from openapi_client.models.subscription_group_update_request import SubscriptionGroupUpdateRequest
from openapi_client.models.subscriptions_response import SubscriptionsResponse

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class SubscriptionGroupsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def subscription_groups_create_instance(
        self,
        subscription_group_create_request: Annotated[SubscriptionGroupCreateRequest, Field(description="SubscriptionGroup representation")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SubscriptionGroupResponse:
        """subscription_groups_create_instance


        :param subscription_group_create_request: SubscriptionGroup representation (required)
        :type subscription_group_create_request: SubscriptionGroupCreateRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._subscription_groups_create_instance_serialize(
            subscription_group_create_request=subscription_group_create_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '422': "ErrorResponse",
            '201': "SubscriptionGroupResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def subscription_groups_create_instance_with_http_info(
        self,
        subscription_group_create_request: Annotated[SubscriptionGroupCreateRequest, Field(description="SubscriptionGroup representation")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SubscriptionGroupResponse]:
        """subscription_groups_create_instance


        :param subscription_group_create_request: SubscriptionGroup representation (required)
        :type subscription_group_create_request: SubscriptionGroupCreateRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._subscription_groups_create_instance_serialize(
            subscription_group_create_request=subscription_group_create_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '422': "ErrorResponse",
            '201': "SubscriptionGroupResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def subscription_groups_create_instance_without_preload_content(
        self,
        subscription_group_create_request: Annotated[SubscriptionGroupCreateRequest, Field(description="SubscriptionGroup representation")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """subscription_groups_create_instance


        :param subscription_group_create_request: SubscriptionGroup representation (required)
        :type subscription_group_create_request: SubscriptionGroupCreateRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._subscription_groups_create_instance_serialize(
            subscription_group_create_request=subscription_group_create_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '422': "ErrorResponse",
            '201': "SubscriptionGroupResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _subscription_groups_create_instance_serialize(
        self,
        subscription_group_create_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if subscription_group_create_request is not None:
            _body_params = subscription_group_create_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'itc-bearer-token'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v1/subscriptionGroups',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def subscription_groups_delete_instance(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """subscription_groups_delete_instance


        :param id: the id of the requested resource (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._subscription_groups_delete_instance_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '204': None,
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def subscription_groups_delete_instance_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """subscription_groups_delete_instance


        :param id: the id of the requested resource (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._subscription_groups_delete_instance_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '204': None,
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def subscription_groups_delete_instance_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """subscription_groups_delete_instance


        :param id: the id of the requested resource (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._subscription_groups_delete_instance_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '204': None,
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _subscription_groups_delete_instance_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'itc-bearer-token'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/v1/subscriptionGroups/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def subscription_groups_get_instance(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_subscription_groups: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type subscriptionGroups")] = None,
        fields_subscriptions: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type subscriptions")] = None,
        fields_subscription_group_localizations: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type subscriptionGroupLocalizations")] = None,
        include: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of relationships to include")] = None,
        limit_subscription_group_localizations: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related subscriptionGroupLocalizations returned (when they are included)")] = None,
        limit_subscriptions: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related subscriptions returned (when they are included)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SubscriptionGroupResponse:
        """subscription_groups_get_instance


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_subscription_groups: the fields to include for returned resources of type subscriptionGroups
        :type fields_subscription_groups: List[str]
        :param fields_subscriptions: the fields to include for returned resources of type subscriptions
        :type fields_subscriptions: List[str]
        :param fields_subscription_group_localizations: the fields to include for returned resources of type subscriptionGroupLocalizations
        :type fields_subscription_group_localizations: List[str]
        :param include: comma-separated list of relationships to include
        :type include: List[str]
        :param limit_subscription_group_localizations: maximum number of related subscriptionGroupLocalizations returned (when they are included)
        :type limit_subscription_group_localizations: int
        :param limit_subscriptions: maximum number of related subscriptions returned (when they are included)
        :type limit_subscriptions: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._subscription_groups_get_instance_serialize(
            id=id,
            fields_subscription_groups=fields_subscription_groups,
            fields_subscriptions=fields_subscriptions,
            fields_subscription_group_localizations=fields_subscription_group_localizations,
            include=include,
            limit_subscription_group_localizations=limit_subscription_group_localizations,
            limit_subscriptions=limit_subscriptions,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '200': "SubscriptionGroupResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def subscription_groups_get_instance_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_subscription_groups: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type subscriptionGroups")] = None,
        fields_subscriptions: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type subscriptions")] = None,
        fields_subscription_group_localizations: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type subscriptionGroupLocalizations")] = None,
        include: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of relationships to include")] = None,
        limit_subscription_group_localizations: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related subscriptionGroupLocalizations returned (when they are included)")] = None,
        limit_subscriptions: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related subscriptions returned (when they are included)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SubscriptionGroupResponse]:
        """subscription_groups_get_instance


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_subscription_groups: the fields to include for returned resources of type subscriptionGroups
        :type fields_subscription_groups: List[str]
        :param fields_subscriptions: the fields to include for returned resources of type subscriptions
        :type fields_subscriptions: List[str]
        :param fields_subscription_group_localizations: the fields to include for returned resources of type subscriptionGroupLocalizations
        :type fields_subscription_group_localizations: List[str]
        :param include: comma-separated list of relationships to include
        :type include: List[str]
        :param limit_subscription_group_localizations: maximum number of related subscriptionGroupLocalizations returned (when they are included)
        :type limit_subscription_group_localizations: int
        :param limit_subscriptions: maximum number of related subscriptions returned (when they are included)
        :type limit_subscriptions: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._subscription_groups_get_instance_serialize(
            id=id,
            fields_subscription_groups=fields_subscription_groups,
            fields_subscriptions=fields_subscriptions,
            fields_subscription_group_localizations=fields_subscription_group_localizations,
            include=include,
            limit_subscription_group_localizations=limit_subscription_group_localizations,
            limit_subscriptions=limit_subscriptions,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '200': "SubscriptionGroupResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def subscription_groups_get_instance_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_subscription_groups: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type subscriptionGroups")] = None,
        fields_subscriptions: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type subscriptions")] = None,
        fields_subscription_group_localizations: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type subscriptionGroupLocalizations")] = None,
        include: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of relationships to include")] = None,
        limit_subscription_group_localizations: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related subscriptionGroupLocalizations returned (when they are included)")] = None,
        limit_subscriptions: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related subscriptions returned (when they are included)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """subscription_groups_get_instance


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_subscription_groups: the fields to include for returned resources of type subscriptionGroups
        :type fields_subscription_groups: List[str]
        :param fields_subscriptions: the fields to include for returned resources of type subscriptions
        :type fields_subscriptions: List[str]
        :param fields_subscription_group_localizations: the fields to include for returned resources of type subscriptionGroupLocalizations
        :type fields_subscription_group_localizations: List[str]
        :param include: comma-separated list of relationships to include
        :type include: List[str]
        :param limit_subscription_group_localizations: maximum number of related subscriptionGroupLocalizations returned (when they are included)
        :type limit_subscription_group_localizations: int
        :param limit_subscriptions: maximum number of related subscriptions returned (when they are included)
        :type limit_subscriptions: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._subscription_groups_get_instance_serialize(
            id=id,
            fields_subscription_groups=fields_subscription_groups,
            fields_subscriptions=fields_subscriptions,
            fields_subscription_group_localizations=fields_subscription_group_localizations,
            include=include,
            limit_subscription_group_localizations=limit_subscription_group_localizations,
            limit_subscriptions=limit_subscriptions,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '200': "SubscriptionGroupResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _subscription_groups_get_instance_serialize(
        self,
        id,
        fields_subscription_groups,
        fields_subscriptions,
        fields_subscription_group_localizations,
        include,
        limit_subscription_group_localizations,
        limit_subscriptions,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'fields[subscriptionGroups]': 'csv',
            'fields[subscriptions]': 'csv',
            'fields[subscriptionGroupLocalizations]': 'csv',
            'include': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if fields_subscription_groups is not None:
            
            _query_params.append(('fields[subscriptionGroups]', fields_subscription_groups))
            
        if fields_subscriptions is not None:
            
            _query_params.append(('fields[subscriptions]', fields_subscriptions))
            
        if fields_subscription_group_localizations is not None:
            
            _query_params.append(('fields[subscriptionGroupLocalizations]', fields_subscription_group_localizations))
            
        if include is not None:
            
            _query_params.append(('include', include))
            
        if limit_subscription_group_localizations is not None:
            
            _query_params.append(('limit[subscriptionGroupLocalizations]', limit_subscription_group_localizations))
            
        if limit_subscriptions is not None:
            
            _query_params.append(('limit[subscriptions]', limit_subscriptions))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'itc-bearer-token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/subscriptionGroups/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def subscription_groups_subscription_group_localizations_get_to_many_related(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_subscription_group_localizations: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type subscriptionGroupLocalizations")] = None,
        fields_subscription_groups: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type subscriptionGroups")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        include: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of relationships to include")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SubscriptionGroupLocalizationsResponse:
        """subscription_groups_subscription_group_localizations_get_to_many_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_subscription_group_localizations: the fields to include for returned resources of type subscriptionGroupLocalizations
        :type fields_subscription_group_localizations: List[str]
        :param fields_subscription_groups: the fields to include for returned resources of type subscriptionGroups
        :type fields_subscription_groups: List[str]
        :param limit: maximum resources per page
        :type limit: int
        :param include: comma-separated list of relationships to include
        :type include: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._subscription_groups_subscription_group_localizations_get_to_many_related_serialize(
            id=id,
            fields_subscription_group_localizations=fields_subscription_group_localizations,
            fields_subscription_groups=fields_subscription_groups,
            limit=limit,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '200': "SubscriptionGroupLocalizationsResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def subscription_groups_subscription_group_localizations_get_to_many_related_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_subscription_group_localizations: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type subscriptionGroupLocalizations")] = None,
        fields_subscription_groups: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type subscriptionGroups")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        include: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of relationships to include")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SubscriptionGroupLocalizationsResponse]:
        """subscription_groups_subscription_group_localizations_get_to_many_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_subscription_group_localizations: the fields to include for returned resources of type subscriptionGroupLocalizations
        :type fields_subscription_group_localizations: List[str]
        :param fields_subscription_groups: the fields to include for returned resources of type subscriptionGroups
        :type fields_subscription_groups: List[str]
        :param limit: maximum resources per page
        :type limit: int
        :param include: comma-separated list of relationships to include
        :type include: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._subscription_groups_subscription_group_localizations_get_to_many_related_serialize(
            id=id,
            fields_subscription_group_localizations=fields_subscription_group_localizations,
            fields_subscription_groups=fields_subscription_groups,
            limit=limit,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '200': "SubscriptionGroupLocalizationsResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def subscription_groups_subscription_group_localizations_get_to_many_related_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_subscription_group_localizations: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type subscriptionGroupLocalizations")] = None,
        fields_subscription_groups: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type subscriptionGroups")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        include: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of relationships to include")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """subscription_groups_subscription_group_localizations_get_to_many_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_subscription_group_localizations: the fields to include for returned resources of type subscriptionGroupLocalizations
        :type fields_subscription_group_localizations: List[str]
        :param fields_subscription_groups: the fields to include for returned resources of type subscriptionGroups
        :type fields_subscription_groups: List[str]
        :param limit: maximum resources per page
        :type limit: int
        :param include: comma-separated list of relationships to include
        :type include: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._subscription_groups_subscription_group_localizations_get_to_many_related_serialize(
            id=id,
            fields_subscription_group_localizations=fields_subscription_group_localizations,
            fields_subscription_groups=fields_subscription_groups,
            limit=limit,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '200': "SubscriptionGroupLocalizationsResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _subscription_groups_subscription_group_localizations_get_to_many_related_serialize(
        self,
        id,
        fields_subscription_group_localizations,
        fields_subscription_groups,
        limit,
        include,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'fields[subscriptionGroupLocalizations]': 'csv',
            'fields[subscriptionGroups]': 'csv',
            'include': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if fields_subscription_group_localizations is not None:
            
            _query_params.append(('fields[subscriptionGroupLocalizations]', fields_subscription_group_localizations))
            
        if fields_subscription_groups is not None:
            
            _query_params.append(('fields[subscriptionGroups]', fields_subscription_groups))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if include is not None:
            
            _query_params.append(('include', include))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'itc-bearer-token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/subscriptionGroups/{id}/subscriptionGroupLocalizations',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def subscription_groups_subscription_group_localizations_get_to_many_relationship(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SubscriptionGroupSubscriptionGroupLocalizationsLinkagesResponse:
        """subscription_groups_subscription_group_localizations_get_to_many_relationship


        :param id: the id of the requested resource (required)
        :type id: str
        :param limit: maximum resources per page
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._subscription_groups_subscription_group_localizations_get_to_many_relationship_serialize(
            id=id,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '200': "SubscriptionGroupSubscriptionGroupLocalizationsLinkagesResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def subscription_groups_subscription_group_localizations_get_to_many_relationship_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SubscriptionGroupSubscriptionGroupLocalizationsLinkagesResponse]:
        """subscription_groups_subscription_group_localizations_get_to_many_relationship


        :param id: the id of the requested resource (required)
        :type id: str
        :param limit: maximum resources per page
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._subscription_groups_subscription_group_localizations_get_to_many_relationship_serialize(
            id=id,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '200': "SubscriptionGroupSubscriptionGroupLocalizationsLinkagesResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def subscription_groups_subscription_group_localizations_get_to_many_relationship_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """subscription_groups_subscription_group_localizations_get_to_many_relationship


        :param id: the id of the requested resource (required)
        :type id: str
        :param limit: maximum resources per page
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._subscription_groups_subscription_group_localizations_get_to_many_relationship_serialize(
            id=id,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '200': "SubscriptionGroupSubscriptionGroupLocalizationsLinkagesResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _subscription_groups_subscription_group_localizations_get_to_many_relationship_serialize(
        self,
        id,
        limit,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'itc-bearer-token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/subscriptionGroups/{id}/relationships/subscriptionGroupLocalizations',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def subscription_groups_subscriptions_get_to_many_related(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        filter_product_id: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'productId'")] = None,
        filter_name: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'name'")] = None,
        filter_state: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'state'")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of sort expressions; resources will be sorted as specified")] = None,
        fields_subscriptions: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type subscriptions")] = None,
        fields_subscription_localizations: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type subscriptionLocalizations")] = None,
        fields_subscription_app_store_review_screenshots: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type subscriptionAppStoreReviewScreenshots")] = None,
        fields_subscription_groups: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type subscriptionGroups")] = None,
        fields_subscription_introductory_offers: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type subscriptionIntroductoryOffers")] = None,
        fields_subscription_promotional_offers: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type subscriptionPromotionalOffers")] = None,
        fields_subscription_offer_codes: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type subscriptionOfferCodes")] = None,
        fields_subscription_prices: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type subscriptionPrices")] = None,
        fields_promoted_purchases: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type promotedPurchases")] = None,
        fields_subscription_availabilities: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type subscriptionAvailabilities")] = None,
        fields_win_back_offers: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type winBackOffers")] = None,
        fields_subscription_images: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type subscriptionImages")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        include: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of relationships to include")] = None,
        limit_subscription_localizations: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related subscriptionLocalizations returned (when they are included)")] = None,
        limit_introductory_offers: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related introductoryOffers returned (when they are included)")] = None,
        limit_promotional_offers: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related promotionalOffers returned (when they are included)")] = None,
        limit_offer_codes: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related offerCodes returned (when they are included)")] = None,
        limit_prices: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related prices returned (when they are included)")] = None,
        limit_win_back_offers: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related winBackOffers returned (when they are included)")] = None,
        limit_images: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related images returned (when they are included)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SubscriptionsResponse:
        """subscription_groups_subscriptions_get_to_many_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param filter_product_id: filter by attribute 'productId'
        :type filter_product_id: List[str]
        :param filter_name: filter by attribute 'name'
        :type filter_name: List[str]
        :param filter_state: filter by attribute 'state'
        :type filter_state: List[str]
        :param sort: comma-separated list of sort expressions; resources will be sorted as specified
        :type sort: List[str]
        :param fields_subscriptions: the fields to include for returned resources of type subscriptions
        :type fields_subscriptions: List[str]
        :param fields_subscription_localizations: the fields to include for returned resources of type subscriptionLocalizations
        :type fields_subscription_localizations: List[str]
        :param fields_subscription_app_store_review_screenshots: the fields to include for returned resources of type subscriptionAppStoreReviewScreenshots
        :type fields_subscription_app_store_review_screenshots: List[str]
        :param fields_subscription_groups: the fields to include for returned resources of type subscriptionGroups
        :type fields_subscription_groups: List[str]
        :param fields_subscription_introductory_offers: the fields to include for returned resources of type subscriptionIntroductoryOffers
        :type fields_subscription_introductory_offers: List[str]
        :param fields_subscription_promotional_offers: the fields to include for returned resources of type subscriptionPromotionalOffers
        :type fields_subscription_promotional_offers: List[str]
        :param fields_subscription_offer_codes: the fields to include for returned resources of type subscriptionOfferCodes
        :type fields_subscription_offer_codes: List[str]
        :param fields_subscription_prices: the fields to include for returned resources of type subscriptionPrices
        :type fields_subscription_prices: List[str]
        :param fields_promoted_purchases: the fields to include for returned resources of type promotedPurchases
        :type fields_promoted_purchases: List[str]
        :param fields_subscription_availabilities: the fields to include for returned resources of type subscriptionAvailabilities
        :type fields_subscription_availabilities: List[str]
        :param fields_win_back_offers: the fields to include for returned resources of type winBackOffers
        :type fields_win_back_offers: List[str]
        :param fields_subscription_images: the fields to include for returned resources of type subscriptionImages
        :type fields_subscription_images: List[str]
        :param limit: maximum resources per page
        :type limit: int
        :param include: comma-separated list of relationships to include
        :type include: List[str]
        :param limit_subscription_localizations: maximum number of related subscriptionLocalizations returned (when they are included)
        :type limit_subscription_localizations: int
        :param limit_introductory_offers: maximum number of related introductoryOffers returned (when they are included)
        :type limit_introductory_offers: int
        :param limit_promotional_offers: maximum number of related promotionalOffers returned (when they are included)
        :type limit_promotional_offers: int
        :param limit_offer_codes: maximum number of related offerCodes returned (when they are included)
        :type limit_offer_codes: int
        :param limit_prices: maximum number of related prices returned (when they are included)
        :type limit_prices: int
        :param limit_win_back_offers: maximum number of related winBackOffers returned (when they are included)
        :type limit_win_back_offers: int
        :param limit_images: maximum number of related images returned (when they are included)
        :type limit_images: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._subscription_groups_subscriptions_get_to_many_related_serialize(
            id=id,
            filter_product_id=filter_product_id,
            filter_name=filter_name,
            filter_state=filter_state,
            sort=sort,
            fields_subscriptions=fields_subscriptions,
            fields_subscription_localizations=fields_subscription_localizations,
            fields_subscription_app_store_review_screenshots=fields_subscription_app_store_review_screenshots,
            fields_subscription_groups=fields_subscription_groups,
            fields_subscription_introductory_offers=fields_subscription_introductory_offers,
            fields_subscription_promotional_offers=fields_subscription_promotional_offers,
            fields_subscription_offer_codes=fields_subscription_offer_codes,
            fields_subscription_prices=fields_subscription_prices,
            fields_promoted_purchases=fields_promoted_purchases,
            fields_subscription_availabilities=fields_subscription_availabilities,
            fields_win_back_offers=fields_win_back_offers,
            fields_subscription_images=fields_subscription_images,
            limit=limit,
            include=include,
            limit_subscription_localizations=limit_subscription_localizations,
            limit_introductory_offers=limit_introductory_offers,
            limit_promotional_offers=limit_promotional_offers,
            limit_offer_codes=limit_offer_codes,
            limit_prices=limit_prices,
            limit_win_back_offers=limit_win_back_offers,
            limit_images=limit_images,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '200': "SubscriptionsResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def subscription_groups_subscriptions_get_to_many_related_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        filter_product_id: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'productId'")] = None,
        filter_name: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'name'")] = None,
        filter_state: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'state'")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of sort expressions; resources will be sorted as specified")] = None,
        fields_subscriptions: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type subscriptions")] = None,
        fields_subscription_localizations: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type subscriptionLocalizations")] = None,
        fields_subscription_app_store_review_screenshots: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type subscriptionAppStoreReviewScreenshots")] = None,
        fields_subscription_groups: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type subscriptionGroups")] = None,
        fields_subscription_introductory_offers: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type subscriptionIntroductoryOffers")] = None,
        fields_subscription_promotional_offers: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type subscriptionPromotionalOffers")] = None,
        fields_subscription_offer_codes: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type subscriptionOfferCodes")] = None,
        fields_subscription_prices: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type subscriptionPrices")] = None,
        fields_promoted_purchases: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type promotedPurchases")] = None,
        fields_subscription_availabilities: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type subscriptionAvailabilities")] = None,
        fields_win_back_offers: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type winBackOffers")] = None,
        fields_subscription_images: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type subscriptionImages")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        include: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of relationships to include")] = None,
        limit_subscription_localizations: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related subscriptionLocalizations returned (when they are included)")] = None,
        limit_introductory_offers: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related introductoryOffers returned (when they are included)")] = None,
        limit_promotional_offers: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related promotionalOffers returned (when they are included)")] = None,
        limit_offer_codes: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related offerCodes returned (when they are included)")] = None,
        limit_prices: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related prices returned (when they are included)")] = None,
        limit_win_back_offers: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related winBackOffers returned (when they are included)")] = None,
        limit_images: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related images returned (when they are included)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SubscriptionsResponse]:
        """subscription_groups_subscriptions_get_to_many_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param filter_product_id: filter by attribute 'productId'
        :type filter_product_id: List[str]
        :param filter_name: filter by attribute 'name'
        :type filter_name: List[str]
        :param filter_state: filter by attribute 'state'
        :type filter_state: List[str]
        :param sort: comma-separated list of sort expressions; resources will be sorted as specified
        :type sort: List[str]
        :param fields_subscriptions: the fields to include for returned resources of type subscriptions
        :type fields_subscriptions: List[str]
        :param fields_subscription_localizations: the fields to include for returned resources of type subscriptionLocalizations
        :type fields_subscription_localizations: List[str]
        :param fields_subscription_app_store_review_screenshots: the fields to include for returned resources of type subscriptionAppStoreReviewScreenshots
        :type fields_subscription_app_store_review_screenshots: List[str]
        :param fields_subscription_groups: the fields to include for returned resources of type subscriptionGroups
        :type fields_subscription_groups: List[str]
        :param fields_subscription_introductory_offers: the fields to include for returned resources of type subscriptionIntroductoryOffers
        :type fields_subscription_introductory_offers: List[str]
        :param fields_subscription_promotional_offers: the fields to include for returned resources of type subscriptionPromotionalOffers
        :type fields_subscription_promotional_offers: List[str]
        :param fields_subscription_offer_codes: the fields to include for returned resources of type subscriptionOfferCodes
        :type fields_subscription_offer_codes: List[str]
        :param fields_subscription_prices: the fields to include for returned resources of type subscriptionPrices
        :type fields_subscription_prices: List[str]
        :param fields_promoted_purchases: the fields to include for returned resources of type promotedPurchases
        :type fields_promoted_purchases: List[str]
        :param fields_subscription_availabilities: the fields to include for returned resources of type subscriptionAvailabilities
        :type fields_subscription_availabilities: List[str]
        :param fields_win_back_offers: the fields to include for returned resources of type winBackOffers
        :type fields_win_back_offers: List[str]
        :param fields_subscription_images: the fields to include for returned resources of type subscriptionImages
        :type fields_subscription_images: List[str]
        :param limit: maximum resources per page
        :type limit: int
        :param include: comma-separated list of relationships to include
        :type include: List[str]
        :param limit_subscription_localizations: maximum number of related subscriptionLocalizations returned (when they are included)
        :type limit_subscription_localizations: int
        :param limit_introductory_offers: maximum number of related introductoryOffers returned (when they are included)
        :type limit_introductory_offers: int
        :param limit_promotional_offers: maximum number of related promotionalOffers returned (when they are included)
        :type limit_promotional_offers: int
        :param limit_offer_codes: maximum number of related offerCodes returned (when they are included)
        :type limit_offer_codes: int
        :param limit_prices: maximum number of related prices returned (when they are included)
        :type limit_prices: int
        :param limit_win_back_offers: maximum number of related winBackOffers returned (when they are included)
        :type limit_win_back_offers: int
        :param limit_images: maximum number of related images returned (when they are included)
        :type limit_images: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._subscription_groups_subscriptions_get_to_many_related_serialize(
            id=id,
            filter_product_id=filter_product_id,
            filter_name=filter_name,
            filter_state=filter_state,
            sort=sort,
            fields_subscriptions=fields_subscriptions,
            fields_subscription_localizations=fields_subscription_localizations,
            fields_subscription_app_store_review_screenshots=fields_subscription_app_store_review_screenshots,
            fields_subscription_groups=fields_subscription_groups,
            fields_subscription_introductory_offers=fields_subscription_introductory_offers,
            fields_subscription_promotional_offers=fields_subscription_promotional_offers,
            fields_subscription_offer_codes=fields_subscription_offer_codes,
            fields_subscription_prices=fields_subscription_prices,
            fields_promoted_purchases=fields_promoted_purchases,
            fields_subscription_availabilities=fields_subscription_availabilities,
            fields_win_back_offers=fields_win_back_offers,
            fields_subscription_images=fields_subscription_images,
            limit=limit,
            include=include,
            limit_subscription_localizations=limit_subscription_localizations,
            limit_introductory_offers=limit_introductory_offers,
            limit_promotional_offers=limit_promotional_offers,
            limit_offer_codes=limit_offer_codes,
            limit_prices=limit_prices,
            limit_win_back_offers=limit_win_back_offers,
            limit_images=limit_images,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '200': "SubscriptionsResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def subscription_groups_subscriptions_get_to_many_related_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        filter_product_id: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'productId'")] = None,
        filter_name: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'name'")] = None,
        filter_state: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'state'")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of sort expressions; resources will be sorted as specified")] = None,
        fields_subscriptions: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type subscriptions")] = None,
        fields_subscription_localizations: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type subscriptionLocalizations")] = None,
        fields_subscription_app_store_review_screenshots: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type subscriptionAppStoreReviewScreenshots")] = None,
        fields_subscription_groups: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type subscriptionGroups")] = None,
        fields_subscription_introductory_offers: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type subscriptionIntroductoryOffers")] = None,
        fields_subscription_promotional_offers: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type subscriptionPromotionalOffers")] = None,
        fields_subscription_offer_codes: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type subscriptionOfferCodes")] = None,
        fields_subscription_prices: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type subscriptionPrices")] = None,
        fields_promoted_purchases: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type promotedPurchases")] = None,
        fields_subscription_availabilities: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type subscriptionAvailabilities")] = None,
        fields_win_back_offers: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type winBackOffers")] = None,
        fields_subscription_images: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type subscriptionImages")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        include: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of relationships to include")] = None,
        limit_subscription_localizations: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related subscriptionLocalizations returned (when they are included)")] = None,
        limit_introductory_offers: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related introductoryOffers returned (when they are included)")] = None,
        limit_promotional_offers: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related promotionalOffers returned (when they are included)")] = None,
        limit_offer_codes: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related offerCodes returned (when they are included)")] = None,
        limit_prices: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related prices returned (when they are included)")] = None,
        limit_win_back_offers: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related winBackOffers returned (when they are included)")] = None,
        limit_images: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related images returned (when they are included)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """subscription_groups_subscriptions_get_to_many_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param filter_product_id: filter by attribute 'productId'
        :type filter_product_id: List[str]
        :param filter_name: filter by attribute 'name'
        :type filter_name: List[str]
        :param filter_state: filter by attribute 'state'
        :type filter_state: List[str]
        :param sort: comma-separated list of sort expressions; resources will be sorted as specified
        :type sort: List[str]
        :param fields_subscriptions: the fields to include for returned resources of type subscriptions
        :type fields_subscriptions: List[str]
        :param fields_subscription_localizations: the fields to include for returned resources of type subscriptionLocalizations
        :type fields_subscription_localizations: List[str]
        :param fields_subscription_app_store_review_screenshots: the fields to include for returned resources of type subscriptionAppStoreReviewScreenshots
        :type fields_subscription_app_store_review_screenshots: List[str]
        :param fields_subscription_groups: the fields to include for returned resources of type subscriptionGroups
        :type fields_subscription_groups: List[str]
        :param fields_subscription_introductory_offers: the fields to include for returned resources of type subscriptionIntroductoryOffers
        :type fields_subscription_introductory_offers: List[str]
        :param fields_subscription_promotional_offers: the fields to include for returned resources of type subscriptionPromotionalOffers
        :type fields_subscription_promotional_offers: List[str]
        :param fields_subscription_offer_codes: the fields to include for returned resources of type subscriptionOfferCodes
        :type fields_subscription_offer_codes: List[str]
        :param fields_subscription_prices: the fields to include for returned resources of type subscriptionPrices
        :type fields_subscription_prices: List[str]
        :param fields_promoted_purchases: the fields to include for returned resources of type promotedPurchases
        :type fields_promoted_purchases: List[str]
        :param fields_subscription_availabilities: the fields to include for returned resources of type subscriptionAvailabilities
        :type fields_subscription_availabilities: List[str]
        :param fields_win_back_offers: the fields to include for returned resources of type winBackOffers
        :type fields_win_back_offers: List[str]
        :param fields_subscription_images: the fields to include for returned resources of type subscriptionImages
        :type fields_subscription_images: List[str]
        :param limit: maximum resources per page
        :type limit: int
        :param include: comma-separated list of relationships to include
        :type include: List[str]
        :param limit_subscription_localizations: maximum number of related subscriptionLocalizations returned (when they are included)
        :type limit_subscription_localizations: int
        :param limit_introductory_offers: maximum number of related introductoryOffers returned (when they are included)
        :type limit_introductory_offers: int
        :param limit_promotional_offers: maximum number of related promotionalOffers returned (when they are included)
        :type limit_promotional_offers: int
        :param limit_offer_codes: maximum number of related offerCodes returned (when they are included)
        :type limit_offer_codes: int
        :param limit_prices: maximum number of related prices returned (when they are included)
        :type limit_prices: int
        :param limit_win_back_offers: maximum number of related winBackOffers returned (when they are included)
        :type limit_win_back_offers: int
        :param limit_images: maximum number of related images returned (when they are included)
        :type limit_images: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._subscription_groups_subscriptions_get_to_many_related_serialize(
            id=id,
            filter_product_id=filter_product_id,
            filter_name=filter_name,
            filter_state=filter_state,
            sort=sort,
            fields_subscriptions=fields_subscriptions,
            fields_subscription_localizations=fields_subscription_localizations,
            fields_subscription_app_store_review_screenshots=fields_subscription_app_store_review_screenshots,
            fields_subscription_groups=fields_subscription_groups,
            fields_subscription_introductory_offers=fields_subscription_introductory_offers,
            fields_subscription_promotional_offers=fields_subscription_promotional_offers,
            fields_subscription_offer_codes=fields_subscription_offer_codes,
            fields_subscription_prices=fields_subscription_prices,
            fields_promoted_purchases=fields_promoted_purchases,
            fields_subscription_availabilities=fields_subscription_availabilities,
            fields_win_back_offers=fields_win_back_offers,
            fields_subscription_images=fields_subscription_images,
            limit=limit,
            include=include,
            limit_subscription_localizations=limit_subscription_localizations,
            limit_introductory_offers=limit_introductory_offers,
            limit_promotional_offers=limit_promotional_offers,
            limit_offer_codes=limit_offer_codes,
            limit_prices=limit_prices,
            limit_win_back_offers=limit_win_back_offers,
            limit_images=limit_images,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '200': "SubscriptionsResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _subscription_groups_subscriptions_get_to_many_related_serialize(
        self,
        id,
        filter_product_id,
        filter_name,
        filter_state,
        sort,
        fields_subscriptions,
        fields_subscription_localizations,
        fields_subscription_app_store_review_screenshots,
        fields_subscription_groups,
        fields_subscription_introductory_offers,
        fields_subscription_promotional_offers,
        fields_subscription_offer_codes,
        fields_subscription_prices,
        fields_promoted_purchases,
        fields_subscription_availabilities,
        fields_win_back_offers,
        fields_subscription_images,
        limit,
        include,
        limit_subscription_localizations,
        limit_introductory_offers,
        limit_promotional_offers,
        limit_offer_codes,
        limit_prices,
        limit_win_back_offers,
        limit_images,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'filter[productId]': 'csv',
            'filter[name]': 'csv',
            'filter[state]': 'csv',
            'sort': 'csv',
            'fields[subscriptions]': 'csv',
            'fields[subscriptionLocalizations]': 'csv',
            'fields[subscriptionAppStoreReviewScreenshots]': 'csv',
            'fields[subscriptionGroups]': 'csv',
            'fields[subscriptionIntroductoryOffers]': 'csv',
            'fields[subscriptionPromotionalOffers]': 'csv',
            'fields[subscriptionOfferCodes]': 'csv',
            'fields[subscriptionPrices]': 'csv',
            'fields[promotedPurchases]': 'csv',
            'fields[subscriptionAvailabilities]': 'csv',
            'fields[winBackOffers]': 'csv',
            'fields[subscriptionImages]': 'csv',
            'include': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if filter_product_id is not None:
            
            _query_params.append(('filter[productId]', filter_product_id))
            
        if filter_name is not None:
            
            _query_params.append(('filter[name]', filter_name))
            
        if filter_state is not None:
            
            _query_params.append(('filter[state]', filter_state))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if fields_subscriptions is not None:
            
            _query_params.append(('fields[subscriptions]', fields_subscriptions))
            
        if fields_subscription_localizations is not None:
            
            _query_params.append(('fields[subscriptionLocalizations]', fields_subscription_localizations))
            
        if fields_subscription_app_store_review_screenshots is not None:
            
            _query_params.append(('fields[subscriptionAppStoreReviewScreenshots]', fields_subscription_app_store_review_screenshots))
            
        if fields_subscription_groups is not None:
            
            _query_params.append(('fields[subscriptionGroups]', fields_subscription_groups))
            
        if fields_subscription_introductory_offers is not None:
            
            _query_params.append(('fields[subscriptionIntroductoryOffers]', fields_subscription_introductory_offers))
            
        if fields_subscription_promotional_offers is not None:
            
            _query_params.append(('fields[subscriptionPromotionalOffers]', fields_subscription_promotional_offers))
            
        if fields_subscription_offer_codes is not None:
            
            _query_params.append(('fields[subscriptionOfferCodes]', fields_subscription_offer_codes))
            
        if fields_subscription_prices is not None:
            
            _query_params.append(('fields[subscriptionPrices]', fields_subscription_prices))
            
        if fields_promoted_purchases is not None:
            
            _query_params.append(('fields[promotedPurchases]', fields_promoted_purchases))
            
        if fields_subscription_availabilities is not None:
            
            _query_params.append(('fields[subscriptionAvailabilities]', fields_subscription_availabilities))
            
        if fields_win_back_offers is not None:
            
            _query_params.append(('fields[winBackOffers]', fields_win_back_offers))
            
        if fields_subscription_images is not None:
            
            _query_params.append(('fields[subscriptionImages]', fields_subscription_images))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if include is not None:
            
            _query_params.append(('include', include))
            
        if limit_subscription_localizations is not None:
            
            _query_params.append(('limit[subscriptionLocalizations]', limit_subscription_localizations))
            
        if limit_introductory_offers is not None:
            
            _query_params.append(('limit[introductoryOffers]', limit_introductory_offers))
            
        if limit_promotional_offers is not None:
            
            _query_params.append(('limit[promotionalOffers]', limit_promotional_offers))
            
        if limit_offer_codes is not None:
            
            _query_params.append(('limit[offerCodes]', limit_offer_codes))
            
        if limit_prices is not None:
            
            _query_params.append(('limit[prices]', limit_prices))
            
        if limit_win_back_offers is not None:
            
            _query_params.append(('limit[winBackOffers]', limit_win_back_offers))
            
        if limit_images is not None:
            
            _query_params.append(('limit[images]', limit_images))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'itc-bearer-token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/subscriptionGroups/{id}/subscriptions',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def subscription_groups_subscriptions_get_to_many_relationship(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SubscriptionGroupSubscriptionsLinkagesResponse:
        """subscription_groups_subscriptions_get_to_many_relationship


        :param id: the id of the requested resource (required)
        :type id: str
        :param limit: maximum resources per page
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._subscription_groups_subscriptions_get_to_many_relationship_serialize(
            id=id,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '200': "SubscriptionGroupSubscriptionsLinkagesResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def subscription_groups_subscriptions_get_to_many_relationship_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SubscriptionGroupSubscriptionsLinkagesResponse]:
        """subscription_groups_subscriptions_get_to_many_relationship


        :param id: the id of the requested resource (required)
        :type id: str
        :param limit: maximum resources per page
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._subscription_groups_subscriptions_get_to_many_relationship_serialize(
            id=id,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '200': "SubscriptionGroupSubscriptionsLinkagesResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def subscription_groups_subscriptions_get_to_many_relationship_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """subscription_groups_subscriptions_get_to_many_relationship


        :param id: the id of the requested resource (required)
        :type id: str
        :param limit: maximum resources per page
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._subscription_groups_subscriptions_get_to_many_relationship_serialize(
            id=id,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '200': "SubscriptionGroupSubscriptionsLinkagesResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _subscription_groups_subscriptions_get_to_many_relationship_serialize(
        self,
        id,
        limit,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'itc-bearer-token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/subscriptionGroups/{id}/relationships/subscriptions',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def subscription_groups_update_instance(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        subscription_group_update_request: Annotated[SubscriptionGroupUpdateRequest, Field(description="SubscriptionGroup representation")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SubscriptionGroupResponse:
        """subscription_groups_update_instance


        :param id: the id of the requested resource (required)
        :type id: str
        :param subscription_group_update_request: SubscriptionGroup representation (required)
        :type subscription_group_update_request: SubscriptionGroupUpdateRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._subscription_groups_update_instance_serialize(
            id=id,
            subscription_group_update_request=subscription_group_update_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '422': "ErrorResponse",
            '200': "SubscriptionGroupResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def subscription_groups_update_instance_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        subscription_group_update_request: Annotated[SubscriptionGroupUpdateRequest, Field(description="SubscriptionGroup representation")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SubscriptionGroupResponse]:
        """subscription_groups_update_instance


        :param id: the id of the requested resource (required)
        :type id: str
        :param subscription_group_update_request: SubscriptionGroup representation (required)
        :type subscription_group_update_request: SubscriptionGroupUpdateRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._subscription_groups_update_instance_serialize(
            id=id,
            subscription_group_update_request=subscription_group_update_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '422': "ErrorResponse",
            '200': "SubscriptionGroupResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def subscription_groups_update_instance_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        subscription_group_update_request: Annotated[SubscriptionGroupUpdateRequest, Field(description="SubscriptionGroup representation")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """subscription_groups_update_instance


        :param id: the id of the requested resource (required)
        :type id: str
        :param subscription_group_update_request: SubscriptionGroup representation (required)
        :type subscription_group_update_request: SubscriptionGroupUpdateRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._subscription_groups_update_instance_serialize(
            id=id,
            subscription_group_update_request=subscription_group_update_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '422': "ErrorResponse",
            '200': "SubscriptionGroupResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _subscription_groups_update_instance_serialize(
        self,
        id,
        subscription_group_update_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if subscription_group_update_request is not None:
            _body_params = subscription_group_update_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'itc-bearer-token'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/v1/subscriptionGroups/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


