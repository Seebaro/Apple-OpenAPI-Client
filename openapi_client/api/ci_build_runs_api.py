# coding: utf-8

"""
    App Store Connect API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictStr, field_validator
from typing import List, Optional
from typing_extensions import Annotated
from openapi_client.models.builds_response import BuildsResponse
from openapi_client.models.ci_build_actions_response import CiBuildActionsResponse
from openapi_client.models.ci_build_run_actions_linkages_response import CiBuildRunActionsLinkagesResponse
from openapi_client.models.ci_build_run_builds_linkages_response import CiBuildRunBuildsLinkagesResponse
from openapi_client.models.ci_build_run_create_request import CiBuildRunCreateRequest
from openapi_client.models.ci_build_run_response import CiBuildRunResponse

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class CiBuildRunsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def ci_build_runs_actions_get_to_many_related(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_ci_build_actions: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type ciBuildActions")] = None,
        fields_ci_build_runs: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type ciBuildRuns")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        include: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of relationships to include")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CiBuildActionsResponse:
        """ci_build_runs_actions_get_to_many_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_ci_build_actions: the fields to include for returned resources of type ciBuildActions
        :type fields_ci_build_actions: List[str]
        :param fields_ci_build_runs: the fields to include for returned resources of type ciBuildRuns
        :type fields_ci_build_runs: List[str]
        :param limit: maximum resources per page
        :type limit: int
        :param include: comma-separated list of relationships to include
        :type include: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._ci_build_runs_actions_get_to_many_related_serialize(
            id=id,
            fields_ci_build_actions=fields_ci_build_actions,
            fields_ci_build_runs=fields_ci_build_runs,
            limit=limit,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '200': "CiBuildActionsResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def ci_build_runs_actions_get_to_many_related_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_ci_build_actions: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type ciBuildActions")] = None,
        fields_ci_build_runs: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type ciBuildRuns")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        include: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of relationships to include")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CiBuildActionsResponse]:
        """ci_build_runs_actions_get_to_many_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_ci_build_actions: the fields to include for returned resources of type ciBuildActions
        :type fields_ci_build_actions: List[str]
        :param fields_ci_build_runs: the fields to include for returned resources of type ciBuildRuns
        :type fields_ci_build_runs: List[str]
        :param limit: maximum resources per page
        :type limit: int
        :param include: comma-separated list of relationships to include
        :type include: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._ci_build_runs_actions_get_to_many_related_serialize(
            id=id,
            fields_ci_build_actions=fields_ci_build_actions,
            fields_ci_build_runs=fields_ci_build_runs,
            limit=limit,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '200': "CiBuildActionsResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def ci_build_runs_actions_get_to_many_related_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_ci_build_actions: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type ciBuildActions")] = None,
        fields_ci_build_runs: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type ciBuildRuns")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        include: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of relationships to include")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """ci_build_runs_actions_get_to_many_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_ci_build_actions: the fields to include for returned resources of type ciBuildActions
        :type fields_ci_build_actions: List[str]
        :param fields_ci_build_runs: the fields to include for returned resources of type ciBuildRuns
        :type fields_ci_build_runs: List[str]
        :param limit: maximum resources per page
        :type limit: int
        :param include: comma-separated list of relationships to include
        :type include: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._ci_build_runs_actions_get_to_many_related_serialize(
            id=id,
            fields_ci_build_actions=fields_ci_build_actions,
            fields_ci_build_runs=fields_ci_build_runs,
            limit=limit,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '200': "CiBuildActionsResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _ci_build_runs_actions_get_to_many_related_serialize(
        self,
        id,
        fields_ci_build_actions,
        fields_ci_build_runs,
        limit,
        include,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'fields[ciBuildActions]': 'csv',
            'fields[ciBuildRuns]': 'csv',
            'include': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if fields_ci_build_actions is not None:
            
            _query_params.append(('fields[ciBuildActions]', fields_ci_build_actions))
            
        if fields_ci_build_runs is not None:
            
            _query_params.append(('fields[ciBuildRuns]', fields_ci_build_runs))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if include is not None:
            
            _query_params.append(('include', include))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'itc-bearer-token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/ciBuildRuns/{id}/actions',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def ci_build_runs_actions_get_to_many_relationship(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CiBuildRunActionsLinkagesResponse:
        """ci_build_runs_actions_get_to_many_relationship


        :param id: the id of the requested resource (required)
        :type id: str
        :param limit: maximum resources per page
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._ci_build_runs_actions_get_to_many_relationship_serialize(
            id=id,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '200': "CiBuildRunActionsLinkagesResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def ci_build_runs_actions_get_to_many_relationship_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CiBuildRunActionsLinkagesResponse]:
        """ci_build_runs_actions_get_to_many_relationship


        :param id: the id of the requested resource (required)
        :type id: str
        :param limit: maximum resources per page
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._ci_build_runs_actions_get_to_many_relationship_serialize(
            id=id,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '200': "CiBuildRunActionsLinkagesResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def ci_build_runs_actions_get_to_many_relationship_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """ci_build_runs_actions_get_to_many_relationship


        :param id: the id of the requested resource (required)
        :type id: str
        :param limit: maximum resources per page
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._ci_build_runs_actions_get_to_many_relationship_serialize(
            id=id,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '200': "CiBuildRunActionsLinkagesResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _ci_build_runs_actions_get_to_many_relationship_serialize(
        self,
        id,
        limit,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'itc-bearer-token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/ciBuildRuns/{id}/relationships/actions',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def ci_build_runs_builds_get_to_many_related(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        filter_version: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'version'")] = None,
        filter_expired: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'expired'")] = None,
        filter_processing_state: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'processingState'")] = None,
        filter_beta_app_review_submission_beta_review_state: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'betaAppReviewSubmission.betaReviewState'")] = None,
        filter_uses_non_exempt_encryption: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'usesNonExemptEncryption'")] = None,
        filter_pre_release_version_version: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'preReleaseVersion.version'")] = None,
        filter_pre_release_version_platform: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'preReleaseVersion.platform'")] = None,
        filter_build_audience_type: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'buildAudienceType'")] = None,
        filter_pre_release_version: Annotated[Optional[List[StrictStr]], Field(description="filter by id(s) of related 'preReleaseVersion'")] = None,
        filter_app: Annotated[Optional[List[StrictStr]], Field(description="filter by id(s) of related 'app'")] = None,
        filter_beta_groups: Annotated[Optional[List[StrictStr]], Field(description="filter by id(s) of related 'betaGroups'")] = None,
        filter_app_store_version: Annotated[Optional[List[StrictStr]], Field(description="filter by id(s) of related 'appStoreVersion'")] = None,
        filter_id: Annotated[Optional[List[StrictStr]], Field(description="filter by id(s)")] = None,
        exists_uses_non_exempt_encryption: Annotated[Optional[StrictBool], Field(description="filter by attribute 'usesNonExemptEncryption'")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of sort expressions; resources will be sorted as specified")] = None,
        fields_builds: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type builds")] = None,
        fields_pre_release_versions: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type preReleaseVersions")] = None,
        fields_beta_testers: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type betaTesters")] = None,
        fields_beta_groups: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type betaGroups")] = None,
        fields_beta_build_localizations: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type betaBuildLocalizations")] = None,
        fields_app_encryption_declarations: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appEncryptionDeclarations")] = None,
        fields_beta_app_review_submissions: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type betaAppReviewSubmissions")] = None,
        fields_apps: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type apps")] = None,
        fields_build_beta_details: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type buildBetaDetails")] = None,
        fields_app_store_versions: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appStoreVersions")] = None,
        fields_build_icons: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type buildIcons")] = None,
        fields_build_bundles: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type buildBundles")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        include: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of relationships to include")] = None,
        limit_individual_testers: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related individualTesters returned (when they are included)")] = None,
        limit_beta_groups: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related betaGroups returned (when they are included)")] = None,
        limit_beta_build_localizations: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related betaBuildLocalizations returned (when they are included)")] = None,
        limit_icons: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related icons returned (when they are included)")] = None,
        limit_build_bundles: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related buildBundles returned (when they are included)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> BuildsResponse:
        """ci_build_runs_builds_get_to_many_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param filter_version: filter by attribute 'version'
        :type filter_version: List[str]
        :param filter_expired: filter by attribute 'expired'
        :type filter_expired: List[str]
        :param filter_processing_state: filter by attribute 'processingState'
        :type filter_processing_state: List[str]
        :param filter_beta_app_review_submission_beta_review_state: filter by attribute 'betaAppReviewSubmission.betaReviewState'
        :type filter_beta_app_review_submission_beta_review_state: List[str]
        :param filter_uses_non_exempt_encryption: filter by attribute 'usesNonExemptEncryption'
        :type filter_uses_non_exempt_encryption: List[str]
        :param filter_pre_release_version_version: filter by attribute 'preReleaseVersion.version'
        :type filter_pre_release_version_version: List[str]
        :param filter_pre_release_version_platform: filter by attribute 'preReleaseVersion.platform'
        :type filter_pre_release_version_platform: List[str]
        :param filter_build_audience_type: filter by attribute 'buildAudienceType'
        :type filter_build_audience_type: List[str]
        :param filter_pre_release_version: filter by id(s) of related 'preReleaseVersion'
        :type filter_pre_release_version: List[str]
        :param filter_app: filter by id(s) of related 'app'
        :type filter_app: List[str]
        :param filter_beta_groups: filter by id(s) of related 'betaGroups'
        :type filter_beta_groups: List[str]
        :param filter_app_store_version: filter by id(s) of related 'appStoreVersion'
        :type filter_app_store_version: List[str]
        :param filter_id: filter by id(s)
        :type filter_id: List[str]
        :param exists_uses_non_exempt_encryption: filter by attribute 'usesNonExemptEncryption'
        :type exists_uses_non_exempt_encryption: bool
        :param sort: comma-separated list of sort expressions; resources will be sorted as specified
        :type sort: List[str]
        :param fields_builds: the fields to include for returned resources of type builds
        :type fields_builds: List[str]
        :param fields_pre_release_versions: the fields to include for returned resources of type preReleaseVersions
        :type fields_pre_release_versions: List[str]
        :param fields_beta_testers: the fields to include for returned resources of type betaTesters
        :type fields_beta_testers: List[str]
        :param fields_beta_groups: the fields to include for returned resources of type betaGroups
        :type fields_beta_groups: List[str]
        :param fields_beta_build_localizations: the fields to include for returned resources of type betaBuildLocalizations
        :type fields_beta_build_localizations: List[str]
        :param fields_app_encryption_declarations: the fields to include for returned resources of type appEncryptionDeclarations
        :type fields_app_encryption_declarations: List[str]
        :param fields_beta_app_review_submissions: the fields to include for returned resources of type betaAppReviewSubmissions
        :type fields_beta_app_review_submissions: List[str]
        :param fields_apps: the fields to include for returned resources of type apps
        :type fields_apps: List[str]
        :param fields_build_beta_details: the fields to include for returned resources of type buildBetaDetails
        :type fields_build_beta_details: List[str]
        :param fields_app_store_versions: the fields to include for returned resources of type appStoreVersions
        :type fields_app_store_versions: List[str]
        :param fields_build_icons: the fields to include for returned resources of type buildIcons
        :type fields_build_icons: List[str]
        :param fields_build_bundles: the fields to include for returned resources of type buildBundles
        :type fields_build_bundles: List[str]
        :param limit: maximum resources per page
        :type limit: int
        :param include: comma-separated list of relationships to include
        :type include: List[str]
        :param limit_individual_testers: maximum number of related individualTesters returned (when they are included)
        :type limit_individual_testers: int
        :param limit_beta_groups: maximum number of related betaGroups returned (when they are included)
        :type limit_beta_groups: int
        :param limit_beta_build_localizations: maximum number of related betaBuildLocalizations returned (when they are included)
        :type limit_beta_build_localizations: int
        :param limit_icons: maximum number of related icons returned (when they are included)
        :type limit_icons: int
        :param limit_build_bundles: maximum number of related buildBundles returned (when they are included)
        :type limit_build_bundles: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._ci_build_runs_builds_get_to_many_related_serialize(
            id=id,
            filter_version=filter_version,
            filter_expired=filter_expired,
            filter_processing_state=filter_processing_state,
            filter_beta_app_review_submission_beta_review_state=filter_beta_app_review_submission_beta_review_state,
            filter_uses_non_exempt_encryption=filter_uses_non_exempt_encryption,
            filter_pre_release_version_version=filter_pre_release_version_version,
            filter_pre_release_version_platform=filter_pre_release_version_platform,
            filter_build_audience_type=filter_build_audience_type,
            filter_pre_release_version=filter_pre_release_version,
            filter_app=filter_app,
            filter_beta_groups=filter_beta_groups,
            filter_app_store_version=filter_app_store_version,
            filter_id=filter_id,
            exists_uses_non_exempt_encryption=exists_uses_non_exempt_encryption,
            sort=sort,
            fields_builds=fields_builds,
            fields_pre_release_versions=fields_pre_release_versions,
            fields_beta_testers=fields_beta_testers,
            fields_beta_groups=fields_beta_groups,
            fields_beta_build_localizations=fields_beta_build_localizations,
            fields_app_encryption_declarations=fields_app_encryption_declarations,
            fields_beta_app_review_submissions=fields_beta_app_review_submissions,
            fields_apps=fields_apps,
            fields_build_beta_details=fields_build_beta_details,
            fields_app_store_versions=fields_app_store_versions,
            fields_build_icons=fields_build_icons,
            fields_build_bundles=fields_build_bundles,
            limit=limit,
            include=include,
            limit_individual_testers=limit_individual_testers,
            limit_beta_groups=limit_beta_groups,
            limit_beta_build_localizations=limit_beta_build_localizations,
            limit_icons=limit_icons,
            limit_build_bundles=limit_build_bundles,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '200': "BuildsResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def ci_build_runs_builds_get_to_many_related_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        filter_version: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'version'")] = None,
        filter_expired: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'expired'")] = None,
        filter_processing_state: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'processingState'")] = None,
        filter_beta_app_review_submission_beta_review_state: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'betaAppReviewSubmission.betaReviewState'")] = None,
        filter_uses_non_exempt_encryption: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'usesNonExemptEncryption'")] = None,
        filter_pre_release_version_version: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'preReleaseVersion.version'")] = None,
        filter_pre_release_version_platform: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'preReleaseVersion.platform'")] = None,
        filter_build_audience_type: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'buildAudienceType'")] = None,
        filter_pre_release_version: Annotated[Optional[List[StrictStr]], Field(description="filter by id(s) of related 'preReleaseVersion'")] = None,
        filter_app: Annotated[Optional[List[StrictStr]], Field(description="filter by id(s) of related 'app'")] = None,
        filter_beta_groups: Annotated[Optional[List[StrictStr]], Field(description="filter by id(s) of related 'betaGroups'")] = None,
        filter_app_store_version: Annotated[Optional[List[StrictStr]], Field(description="filter by id(s) of related 'appStoreVersion'")] = None,
        filter_id: Annotated[Optional[List[StrictStr]], Field(description="filter by id(s)")] = None,
        exists_uses_non_exempt_encryption: Annotated[Optional[StrictBool], Field(description="filter by attribute 'usesNonExemptEncryption'")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of sort expressions; resources will be sorted as specified")] = None,
        fields_builds: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type builds")] = None,
        fields_pre_release_versions: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type preReleaseVersions")] = None,
        fields_beta_testers: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type betaTesters")] = None,
        fields_beta_groups: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type betaGroups")] = None,
        fields_beta_build_localizations: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type betaBuildLocalizations")] = None,
        fields_app_encryption_declarations: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appEncryptionDeclarations")] = None,
        fields_beta_app_review_submissions: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type betaAppReviewSubmissions")] = None,
        fields_apps: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type apps")] = None,
        fields_build_beta_details: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type buildBetaDetails")] = None,
        fields_app_store_versions: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appStoreVersions")] = None,
        fields_build_icons: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type buildIcons")] = None,
        fields_build_bundles: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type buildBundles")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        include: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of relationships to include")] = None,
        limit_individual_testers: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related individualTesters returned (when they are included)")] = None,
        limit_beta_groups: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related betaGroups returned (when they are included)")] = None,
        limit_beta_build_localizations: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related betaBuildLocalizations returned (when they are included)")] = None,
        limit_icons: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related icons returned (when they are included)")] = None,
        limit_build_bundles: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related buildBundles returned (when they are included)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[BuildsResponse]:
        """ci_build_runs_builds_get_to_many_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param filter_version: filter by attribute 'version'
        :type filter_version: List[str]
        :param filter_expired: filter by attribute 'expired'
        :type filter_expired: List[str]
        :param filter_processing_state: filter by attribute 'processingState'
        :type filter_processing_state: List[str]
        :param filter_beta_app_review_submission_beta_review_state: filter by attribute 'betaAppReviewSubmission.betaReviewState'
        :type filter_beta_app_review_submission_beta_review_state: List[str]
        :param filter_uses_non_exempt_encryption: filter by attribute 'usesNonExemptEncryption'
        :type filter_uses_non_exempt_encryption: List[str]
        :param filter_pre_release_version_version: filter by attribute 'preReleaseVersion.version'
        :type filter_pre_release_version_version: List[str]
        :param filter_pre_release_version_platform: filter by attribute 'preReleaseVersion.platform'
        :type filter_pre_release_version_platform: List[str]
        :param filter_build_audience_type: filter by attribute 'buildAudienceType'
        :type filter_build_audience_type: List[str]
        :param filter_pre_release_version: filter by id(s) of related 'preReleaseVersion'
        :type filter_pre_release_version: List[str]
        :param filter_app: filter by id(s) of related 'app'
        :type filter_app: List[str]
        :param filter_beta_groups: filter by id(s) of related 'betaGroups'
        :type filter_beta_groups: List[str]
        :param filter_app_store_version: filter by id(s) of related 'appStoreVersion'
        :type filter_app_store_version: List[str]
        :param filter_id: filter by id(s)
        :type filter_id: List[str]
        :param exists_uses_non_exempt_encryption: filter by attribute 'usesNonExemptEncryption'
        :type exists_uses_non_exempt_encryption: bool
        :param sort: comma-separated list of sort expressions; resources will be sorted as specified
        :type sort: List[str]
        :param fields_builds: the fields to include for returned resources of type builds
        :type fields_builds: List[str]
        :param fields_pre_release_versions: the fields to include for returned resources of type preReleaseVersions
        :type fields_pre_release_versions: List[str]
        :param fields_beta_testers: the fields to include for returned resources of type betaTesters
        :type fields_beta_testers: List[str]
        :param fields_beta_groups: the fields to include for returned resources of type betaGroups
        :type fields_beta_groups: List[str]
        :param fields_beta_build_localizations: the fields to include for returned resources of type betaBuildLocalizations
        :type fields_beta_build_localizations: List[str]
        :param fields_app_encryption_declarations: the fields to include for returned resources of type appEncryptionDeclarations
        :type fields_app_encryption_declarations: List[str]
        :param fields_beta_app_review_submissions: the fields to include for returned resources of type betaAppReviewSubmissions
        :type fields_beta_app_review_submissions: List[str]
        :param fields_apps: the fields to include for returned resources of type apps
        :type fields_apps: List[str]
        :param fields_build_beta_details: the fields to include for returned resources of type buildBetaDetails
        :type fields_build_beta_details: List[str]
        :param fields_app_store_versions: the fields to include for returned resources of type appStoreVersions
        :type fields_app_store_versions: List[str]
        :param fields_build_icons: the fields to include for returned resources of type buildIcons
        :type fields_build_icons: List[str]
        :param fields_build_bundles: the fields to include for returned resources of type buildBundles
        :type fields_build_bundles: List[str]
        :param limit: maximum resources per page
        :type limit: int
        :param include: comma-separated list of relationships to include
        :type include: List[str]
        :param limit_individual_testers: maximum number of related individualTesters returned (when they are included)
        :type limit_individual_testers: int
        :param limit_beta_groups: maximum number of related betaGroups returned (when they are included)
        :type limit_beta_groups: int
        :param limit_beta_build_localizations: maximum number of related betaBuildLocalizations returned (when they are included)
        :type limit_beta_build_localizations: int
        :param limit_icons: maximum number of related icons returned (when they are included)
        :type limit_icons: int
        :param limit_build_bundles: maximum number of related buildBundles returned (when they are included)
        :type limit_build_bundles: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._ci_build_runs_builds_get_to_many_related_serialize(
            id=id,
            filter_version=filter_version,
            filter_expired=filter_expired,
            filter_processing_state=filter_processing_state,
            filter_beta_app_review_submission_beta_review_state=filter_beta_app_review_submission_beta_review_state,
            filter_uses_non_exempt_encryption=filter_uses_non_exempt_encryption,
            filter_pre_release_version_version=filter_pre_release_version_version,
            filter_pre_release_version_platform=filter_pre_release_version_platform,
            filter_build_audience_type=filter_build_audience_type,
            filter_pre_release_version=filter_pre_release_version,
            filter_app=filter_app,
            filter_beta_groups=filter_beta_groups,
            filter_app_store_version=filter_app_store_version,
            filter_id=filter_id,
            exists_uses_non_exempt_encryption=exists_uses_non_exempt_encryption,
            sort=sort,
            fields_builds=fields_builds,
            fields_pre_release_versions=fields_pre_release_versions,
            fields_beta_testers=fields_beta_testers,
            fields_beta_groups=fields_beta_groups,
            fields_beta_build_localizations=fields_beta_build_localizations,
            fields_app_encryption_declarations=fields_app_encryption_declarations,
            fields_beta_app_review_submissions=fields_beta_app_review_submissions,
            fields_apps=fields_apps,
            fields_build_beta_details=fields_build_beta_details,
            fields_app_store_versions=fields_app_store_versions,
            fields_build_icons=fields_build_icons,
            fields_build_bundles=fields_build_bundles,
            limit=limit,
            include=include,
            limit_individual_testers=limit_individual_testers,
            limit_beta_groups=limit_beta_groups,
            limit_beta_build_localizations=limit_beta_build_localizations,
            limit_icons=limit_icons,
            limit_build_bundles=limit_build_bundles,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '200': "BuildsResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def ci_build_runs_builds_get_to_many_related_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        filter_version: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'version'")] = None,
        filter_expired: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'expired'")] = None,
        filter_processing_state: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'processingState'")] = None,
        filter_beta_app_review_submission_beta_review_state: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'betaAppReviewSubmission.betaReviewState'")] = None,
        filter_uses_non_exempt_encryption: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'usesNonExemptEncryption'")] = None,
        filter_pre_release_version_version: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'preReleaseVersion.version'")] = None,
        filter_pre_release_version_platform: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'preReleaseVersion.platform'")] = None,
        filter_build_audience_type: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'buildAudienceType'")] = None,
        filter_pre_release_version: Annotated[Optional[List[StrictStr]], Field(description="filter by id(s) of related 'preReleaseVersion'")] = None,
        filter_app: Annotated[Optional[List[StrictStr]], Field(description="filter by id(s) of related 'app'")] = None,
        filter_beta_groups: Annotated[Optional[List[StrictStr]], Field(description="filter by id(s) of related 'betaGroups'")] = None,
        filter_app_store_version: Annotated[Optional[List[StrictStr]], Field(description="filter by id(s) of related 'appStoreVersion'")] = None,
        filter_id: Annotated[Optional[List[StrictStr]], Field(description="filter by id(s)")] = None,
        exists_uses_non_exempt_encryption: Annotated[Optional[StrictBool], Field(description="filter by attribute 'usesNonExemptEncryption'")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of sort expressions; resources will be sorted as specified")] = None,
        fields_builds: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type builds")] = None,
        fields_pre_release_versions: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type preReleaseVersions")] = None,
        fields_beta_testers: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type betaTesters")] = None,
        fields_beta_groups: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type betaGroups")] = None,
        fields_beta_build_localizations: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type betaBuildLocalizations")] = None,
        fields_app_encryption_declarations: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appEncryptionDeclarations")] = None,
        fields_beta_app_review_submissions: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type betaAppReviewSubmissions")] = None,
        fields_apps: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type apps")] = None,
        fields_build_beta_details: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type buildBetaDetails")] = None,
        fields_app_store_versions: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appStoreVersions")] = None,
        fields_build_icons: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type buildIcons")] = None,
        fields_build_bundles: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type buildBundles")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        include: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of relationships to include")] = None,
        limit_individual_testers: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related individualTesters returned (when they are included)")] = None,
        limit_beta_groups: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related betaGroups returned (when they are included)")] = None,
        limit_beta_build_localizations: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related betaBuildLocalizations returned (when they are included)")] = None,
        limit_icons: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related icons returned (when they are included)")] = None,
        limit_build_bundles: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related buildBundles returned (when they are included)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """ci_build_runs_builds_get_to_many_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param filter_version: filter by attribute 'version'
        :type filter_version: List[str]
        :param filter_expired: filter by attribute 'expired'
        :type filter_expired: List[str]
        :param filter_processing_state: filter by attribute 'processingState'
        :type filter_processing_state: List[str]
        :param filter_beta_app_review_submission_beta_review_state: filter by attribute 'betaAppReviewSubmission.betaReviewState'
        :type filter_beta_app_review_submission_beta_review_state: List[str]
        :param filter_uses_non_exempt_encryption: filter by attribute 'usesNonExemptEncryption'
        :type filter_uses_non_exempt_encryption: List[str]
        :param filter_pre_release_version_version: filter by attribute 'preReleaseVersion.version'
        :type filter_pre_release_version_version: List[str]
        :param filter_pre_release_version_platform: filter by attribute 'preReleaseVersion.platform'
        :type filter_pre_release_version_platform: List[str]
        :param filter_build_audience_type: filter by attribute 'buildAudienceType'
        :type filter_build_audience_type: List[str]
        :param filter_pre_release_version: filter by id(s) of related 'preReleaseVersion'
        :type filter_pre_release_version: List[str]
        :param filter_app: filter by id(s) of related 'app'
        :type filter_app: List[str]
        :param filter_beta_groups: filter by id(s) of related 'betaGroups'
        :type filter_beta_groups: List[str]
        :param filter_app_store_version: filter by id(s) of related 'appStoreVersion'
        :type filter_app_store_version: List[str]
        :param filter_id: filter by id(s)
        :type filter_id: List[str]
        :param exists_uses_non_exempt_encryption: filter by attribute 'usesNonExemptEncryption'
        :type exists_uses_non_exempt_encryption: bool
        :param sort: comma-separated list of sort expressions; resources will be sorted as specified
        :type sort: List[str]
        :param fields_builds: the fields to include for returned resources of type builds
        :type fields_builds: List[str]
        :param fields_pre_release_versions: the fields to include for returned resources of type preReleaseVersions
        :type fields_pre_release_versions: List[str]
        :param fields_beta_testers: the fields to include for returned resources of type betaTesters
        :type fields_beta_testers: List[str]
        :param fields_beta_groups: the fields to include for returned resources of type betaGroups
        :type fields_beta_groups: List[str]
        :param fields_beta_build_localizations: the fields to include for returned resources of type betaBuildLocalizations
        :type fields_beta_build_localizations: List[str]
        :param fields_app_encryption_declarations: the fields to include for returned resources of type appEncryptionDeclarations
        :type fields_app_encryption_declarations: List[str]
        :param fields_beta_app_review_submissions: the fields to include for returned resources of type betaAppReviewSubmissions
        :type fields_beta_app_review_submissions: List[str]
        :param fields_apps: the fields to include for returned resources of type apps
        :type fields_apps: List[str]
        :param fields_build_beta_details: the fields to include for returned resources of type buildBetaDetails
        :type fields_build_beta_details: List[str]
        :param fields_app_store_versions: the fields to include for returned resources of type appStoreVersions
        :type fields_app_store_versions: List[str]
        :param fields_build_icons: the fields to include for returned resources of type buildIcons
        :type fields_build_icons: List[str]
        :param fields_build_bundles: the fields to include for returned resources of type buildBundles
        :type fields_build_bundles: List[str]
        :param limit: maximum resources per page
        :type limit: int
        :param include: comma-separated list of relationships to include
        :type include: List[str]
        :param limit_individual_testers: maximum number of related individualTesters returned (when they are included)
        :type limit_individual_testers: int
        :param limit_beta_groups: maximum number of related betaGroups returned (when they are included)
        :type limit_beta_groups: int
        :param limit_beta_build_localizations: maximum number of related betaBuildLocalizations returned (when they are included)
        :type limit_beta_build_localizations: int
        :param limit_icons: maximum number of related icons returned (when they are included)
        :type limit_icons: int
        :param limit_build_bundles: maximum number of related buildBundles returned (when they are included)
        :type limit_build_bundles: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._ci_build_runs_builds_get_to_many_related_serialize(
            id=id,
            filter_version=filter_version,
            filter_expired=filter_expired,
            filter_processing_state=filter_processing_state,
            filter_beta_app_review_submission_beta_review_state=filter_beta_app_review_submission_beta_review_state,
            filter_uses_non_exempt_encryption=filter_uses_non_exempt_encryption,
            filter_pre_release_version_version=filter_pre_release_version_version,
            filter_pre_release_version_platform=filter_pre_release_version_platform,
            filter_build_audience_type=filter_build_audience_type,
            filter_pre_release_version=filter_pre_release_version,
            filter_app=filter_app,
            filter_beta_groups=filter_beta_groups,
            filter_app_store_version=filter_app_store_version,
            filter_id=filter_id,
            exists_uses_non_exempt_encryption=exists_uses_non_exempt_encryption,
            sort=sort,
            fields_builds=fields_builds,
            fields_pre_release_versions=fields_pre_release_versions,
            fields_beta_testers=fields_beta_testers,
            fields_beta_groups=fields_beta_groups,
            fields_beta_build_localizations=fields_beta_build_localizations,
            fields_app_encryption_declarations=fields_app_encryption_declarations,
            fields_beta_app_review_submissions=fields_beta_app_review_submissions,
            fields_apps=fields_apps,
            fields_build_beta_details=fields_build_beta_details,
            fields_app_store_versions=fields_app_store_versions,
            fields_build_icons=fields_build_icons,
            fields_build_bundles=fields_build_bundles,
            limit=limit,
            include=include,
            limit_individual_testers=limit_individual_testers,
            limit_beta_groups=limit_beta_groups,
            limit_beta_build_localizations=limit_beta_build_localizations,
            limit_icons=limit_icons,
            limit_build_bundles=limit_build_bundles,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '200': "BuildsResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _ci_build_runs_builds_get_to_many_related_serialize(
        self,
        id,
        filter_version,
        filter_expired,
        filter_processing_state,
        filter_beta_app_review_submission_beta_review_state,
        filter_uses_non_exempt_encryption,
        filter_pre_release_version_version,
        filter_pre_release_version_platform,
        filter_build_audience_type,
        filter_pre_release_version,
        filter_app,
        filter_beta_groups,
        filter_app_store_version,
        filter_id,
        exists_uses_non_exempt_encryption,
        sort,
        fields_builds,
        fields_pre_release_versions,
        fields_beta_testers,
        fields_beta_groups,
        fields_beta_build_localizations,
        fields_app_encryption_declarations,
        fields_beta_app_review_submissions,
        fields_apps,
        fields_build_beta_details,
        fields_app_store_versions,
        fields_build_icons,
        fields_build_bundles,
        limit,
        include,
        limit_individual_testers,
        limit_beta_groups,
        limit_beta_build_localizations,
        limit_icons,
        limit_build_bundles,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'filter[version]': 'csv',
            'filter[expired]': 'csv',
            'filter[processingState]': 'csv',
            'filter[betaAppReviewSubmission.betaReviewState]': 'csv',
            'filter[usesNonExemptEncryption]': 'csv',
            'filter[preReleaseVersion.version]': 'csv',
            'filter[preReleaseVersion.platform]': 'csv',
            'filter[buildAudienceType]': 'csv',
            'filter[preReleaseVersion]': 'csv',
            'filter[app]': 'csv',
            'filter[betaGroups]': 'csv',
            'filter[appStoreVersion]': 'csv',
            'filter[id]': 'csv',
            'sort': 'csv',
            'fields[builds]': 'csv',
            'fields[preReleaseVersions]': 'csv',
            'fields[betaTesters]': 'csv',
            'fields[betaGroups]': 'csv',
            'fields[betaBuildLocalizations]': 'csv',
            'fields[appEncryptionDeclarations]': 'csv',
            'fields[betaAppReviewSubmissions]': 'csv',
            'fields[apps]': 'csv',
            'fields[buildBetaDetails]': 'csv',
            'fields[appStoreVersions]': 'csv',
            'fields[buildIcons]': 'csv',
            'fields[buildBundles]': 'csv',
            'include': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if filter_version is not None:
            
            _query_params.append(('filter[version]', filter_version))
            
        if filter_expired is not None:
            
            _query_params.append(('filter[expired]', filter_expired))
            
        if filter_processing_state is not None:
            
            _query_params.append(('filter[processingState]', filter_processing_state))
            
        if filter_beta_app_review_submission_beta_review_state is not None:
            
            _query_params.append(('filter[betaAppReviewSubmission.betaReviewState]', filter_beta_app_review_submission_beta_review_state))
            
        if filter_uses_non_exempt_encryption is not None:
            
            _query_params.append(('filter[usesNonExemptEncryption]', filter_uses_non_exempt_encryption))
            
        if filter_pre_release_version_version is not None:
            
            _query_params.append(('filter[preReleaseVersion.version]', filter_pre_release_version_version))
            
        if filter_pre_release_version_platform is not None:
            
            _query_params.append(('filter[preReleaseVersion.platform]', filter_pre_release_version_platform))
            
        if filter_build_audience_type is not None:
            
            _query_params.append(('filter[buildAudienceType]', filter_build_audience_type))
            
        if filter_pre_release_version is not None:
            
            _query_params.append(('filter[preReleaseVersion]', filter_pre_release_version))
            
        if filter_app is not None:
            
            _query_params.append(('filter[app]', filter_app))
            
        if filter_beta_groups is not None:
            
            _query_params.append(('filter[betaGroups]', filter_beta_groups))
            
        if filter_app_store_version is not None:
            
            _query_params.append(('filter[appStoreVersion]', filter_app_store_version))
            
        if filter_id is not None:
            
            _query_params.append(('filter[id]', filter_id))
            
        if exists_uses_non_exempt_encryption is not None:
            
            _query_params.append(('exists[usesNonExemptEncryption]', exists_uses_non_exempt_encryption))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if fields_builds is not None:
            
            _query_params.append(('fields[builds]', fields_builds))
            
        if fields_pre_release_versions is not None:
            
            _query_params.append(('fields[preReleaseVersions]', fields_pre_release_versions))
            
        if fields_beta_testers is not None:
            
            _query_params.append(('fields[betaTesters]', fields_beta_testers))
            
        if fields_beta_groups is not None:
            
            _query_params.append(('fields[betaGroups]', fields_beta_groups))
            
        if fields_beta_build_localizations is not None:
            
            _query_params.append(('fields[betaBuildLocalizations]', fields_beta_build_localizations))
            
        if fields_app_encryption_declarations is not None:
            
            _query_params.append(('fields[appEncryptionDeclarations]', fields_app_encryption_declarations))
            
        if fields_beta_app_review_submissions is not None:
            
            _query_params.append(('fields[betaAppReviewSubmissions]', fields_beta_app_review_submissions))
            
        if fields_apps is not None:
            
            _query_params.append(('fields[apps]', fields_apps))
            
        if fields_build_beta_details is not None:
            
            _query_params.append(('fields[buildBetaDetails]', fields_build_beta_details))
            
        if fields_app_store_versions is not None:
            
            _query_params.append(('fields[appStoreVersions]', fields_app_store_versions))
            
        if fields_build_icons is not None:
            
            _query_params.append(('fields[buildIcons]', fields_build_icons))
            
        if fields_build_bundles is not None:
            
            _query_params.append(('fields[buildBundles]', fields_build_bundles))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if include is not None:
            
            _query_params.append(('include', include))
            
        if limit_individual_testers is not None:
            
            _query_params.append(('limit[individualTesters]', limit_individual_testers))
            
        if limit_beta_groups is not None:
            
            _query_params.append(('limit[betaGroups]', limit_beta_groups))
            
        if limit_beta_build_localizations is not None:
            
            _query_params.append(('limit[betaBuildLocalizations]', limit_beta_build_localizations))
            
        if limit_icons is not None:
            
            _query_params.append(('limit[icons]', limit_icons))
            
        if limit_build_bundles is not None:
            
            _query_params.append(('limit[buildBundles]', limit_build_bundles))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'itc-bearer-token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/ciBuildRuns/{id}/builds',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def ci_build_runs_builds_get_to_many_relationship(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CiBuildRunBuildsLinkagesResponse:
        """ci_build_runs_builds_get_to_many_relationship


        :param id: the id of the requested resource (required)
        :type id: str
        :param limit: maximum resources per page
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._ci_build_runs_builds_get_to_many_relationship_serialize(
            id=id,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '200': "CiBuildRunBuildsLinkagesResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def ci_build_runs_builds_get_to_many_relationship_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CiBuildRunBuildsLinkagesResponse]:
        """ci_build_runs_builds_get_to_many_relationship


        :param id: the id of the requested resource (required)
        :type id: str
        :param limit: maximum resources per page
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._ci_build_runs_builds_get_to_many_relationship_serialize(
            id=id,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '200': "CiBuildRunBuildsLinkagesResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def ci_build_runs_builds_get_to_many_relationship_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """ci_build_runs_builds_get_to_many_relationship


        :param id: the id of the requested resource (required)
        :type id: str
        :param limit: maximum resources per page
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._ci_build_runs_builds_get_to_many_relationship_serialize(
            id=id,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '200': "CiBuildRunBuildsLinkagesResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _ci_build_runs_builds_get_to_many_relationship_serialize(
        self,
        id,
        limit,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'itc-bearer-token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/ciBuildRuns/{id}/relationships/builds',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def ci_build_runs_create_instance(
        self,
        ci_build_run_create_request: Annotated[CiBuildRunCreateRequest, Field(description="CiBuildRun representation")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CiBuildRunResponse:
        """ci_build_runs_create_instance


        :param ci_build_run_create_request: CiBuildRun representation (required)
        :type ci_build_run_create_request: CiBuildRunCreateRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._ci_build_runs_create_instance_serialize(
            ci_build_run_create_request=ci_build_run_create_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '422': "ErrorResponse",
            '201': "CiBuildRunResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def ci_build_runs_create_instance_with_http_info(
        self,
        ci_build_run_create_request: Annotated[CiBuildRunCreateRequest, Field(description="CiBuildRun representation")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CiBuildRunResponse]:
        """ci_build_runs_create_instance


        :param ci_build_run_create_request: CiBuildRun representation (required)
        :type ci_build_run_create_request: CiBuildRunCreateRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._ci_build_runs_create_instance_serialize(
            ci_build_run_create_request=ci_build_run_create_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '422': "ErrorResponse",
            '201': "CiBuildRunResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def ci_build_runs_create_instance_without_preload_content(
        self,
        ci_build_run_create_request: Annotated[CiBuildRunCreateRequest, Field(description="CiBuildRun representation")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """ci_build_runs_create_instance


        :param ci_build_run_create_request: CiBuildRun representation (required)
        :type ci_build_run_create_request: CiBuildRunCreateRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._ci_build_runs_create_instance_serialize(
            ci_build_run_create_request=ci_build_run_create_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '422': "ErrorResponse",
            '201': "CiBuildRunResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _ci_build_runs_create_instance_serialize(
        self,
        ci_build_run_create_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if ci_build_run_create_request is not None:
            _body_params = ci_build_run_create_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'itc-bearer-token'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v1/ciBuildRuns',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def ci_build_runs_get_instance(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_ci_build_runs: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type ciBuildRuns")] = None,
        fields_builds: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type builds")] = None,
        include: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of relationships to include")] = None,
        limit_builds: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related builds returned (when they are included)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CiBuildRunResponse:
        """ci_build_runs_get_instance


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_ci_build_runs: the fields to include for returned resources of type ciBuildRuns
        :type fields_ci_build_runs: List[str]
        :param fields_builds: the fields to include for returned resources of type builds
        :type fields_builds: List[str]
        :param include: comma-separated list of relationships to include
        :type include: List[str]
        :param limit_builds: maximum number of related builds returned (when they are included)
        :type limit_builds: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._ci_build_runs_get_instance_serialize(
            id=id,
            fields_ci_build_runs=fields_ci_build_runs,
            fields_builds=fields_builds,
            include=include,
            limit_builds=limit_builds,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '200': "CiBuildRunResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def ci_build_runs_get_instance_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_ci_build_runs: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type ciBuildRuns")] = None,
        fields_builds: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type builds")] = None,
        include: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of relationships to include")] = None,
        limit_builds: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related builds returned (when they are included)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CiBuildRunResponse]:
        """ci_build_runs_get_instance


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_ci_build_runs: the fields to include for returned resources of type ciBuildRuns
        :type fields_ci_build_runs: List[str]
        :param fields_builds: the fields to include for returned resources of type builds
        :type fields_builds: List[str]
        :param include: comma-separated list of relationships to include
        :type include: List[str]
        :param limit_builds: maximum number of related builds returned (when they are included)
        :type limit_builds: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._ci_build_runs_get_instance_serialize(
            id=id,
            fields_ci_build_runs=fields_ci_build_runs,
            fields_builds=fields_builds,
            include=include,
            limit_builds=limit_builds,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '200': "CiBuildRunResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def ci_build_runs_get_instance_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_ci_build_runs: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type ciBuildRuns")] = None,
        fields_builds: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type builds")] = None,
        include: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of relationships to include")] = None,
        limit_builds: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related builds returned (when they are included)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """ci_build_runs_get_instance


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_ci_build_runs: the fields to include for returned resources of type ciBuildRuns
        :type fields_ci_build_runs: List[str]
        :param fields_builds: the fields to include for returned resources of type builds
        :type fields_builds: List[str]
        :param include: comma-separated list of relationships to include
        :type include: List[str]
        :param limit_builds: maximum number of related builds returned (when they are included)
        :type limit_builds: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._ci_build_runs_get_instance_serialize(
            id=id,
            fields_ci_build_runs=fields_ci_build_runs,
            fields_builds=fields_builds,
            include=include,
            limit_builds=limit_builds,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '200': "CiBuildRunResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _ci_build_runs_get_instance_serialize(
        self,
        id,
        fields_ci_build_runs,
        fields_builds,
        include,
        limit_builds,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'fields[ciBuildRuns]': 'csv',
            'fields[builds]': 'csv',
            'include': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if fields_ci_build_runs is not None:
            
            _query_params.append(('fields[ciBuildRuns]', fields_ci_build_runs))
            
        if fields_builds is not None:
            
            _query_params.append(('fields[builds]', fields_builds))
            
        if include is not None:
            
            _query_params.append(('include', include))
            
        if limit_builds is not None:
            
            _query_params.append(('limit[builds]', limit_builds))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'itc-bearer-token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/ciBuildRuns/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


