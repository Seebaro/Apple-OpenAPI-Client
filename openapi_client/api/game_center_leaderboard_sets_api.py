# coding: utf-8

"""
    App Store Connect API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr, field_validator
from typing import List, Optional
from typing_extensions import Annotated
from openapi_client.models.game_center_leaderboard_set_create_request import GameCenterLeaderboardSetCreateRequest
from openapi_client.models.game_center_leaderboard_set_game_center_leaderboards_linkages_request import GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest
from openapi_client.models.game_center_leaderboard_set_game_center_leaderboards_linkages_response import GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesResponse
from openapi_client.models.game_center_leaderboard_set_group_leaderboard_set_linkage_request import GameCenterLeaderboardSetGroupLeaderboardSetLinkageRequest
from openapi_client.models.game_center_leaderboard_set_group_leaderboard_set_linkage_response import GameCenterLeaderboardSetGroupLeaderboardSetLinkageResponse
from openapi_client.models.game_center_leaderboard_set_localizations_linkages_response import GameCenterLeaderboardSetLocalizationsLinkagesResponse
from openapi_client.models.game_center_leaderboard_set_localizations_response import GameCenterLeaderboardSetLocalizationsResponse
from openapi_client.models.game_center_leaderboard_set_releases_linkages_response import GameCenterLeaderboardSetReleasesLinkagesResponse
from openapi_client.models.game_center_leaderboard_set_releases_response import GameCenterLeaderboardSetReleasesResponse
from openapi_client.models.game_center_leaderboard_set_response import GameCenterLeaderboardSetResponse
from openapi_client.models.game_center_leaderboard_set_update_request import GameCenterLeaderboardSetUpdateRequest
from openapi_client.models.game_center_leaderboards_response import GameCenterLeaderboardsResponse

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class GameCenterLeaderboardSetsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def game_center_leaderboard_sets_create_instance(
        self,
        game_center_leaderboard_set_create_request: Annotated[GameCenterLeaderboardSetCreateRequest, Field(description="GameCenterLeaderboardSet representation")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GameCenterLeaderboardSetResponse:
        """game_center_leaderboard_sets_create_instance


        :param game_center_leaderboard_set_create_request: GameCenterLeaderboardSet representation (required)
        :type game_center_leaderboard_set_create_request: GameCenterLeaderboardSetCreateRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._game_center_leaderboard_sets_create_instance_serialize(
            game_center_leaderboard_set_create_request=game_center_leaderboard_set_create_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '422': "ErrorResponse",
            '201': "GameCenterLeaderboardSetResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def game_center_leaderboard_sets_create_instance_with_http_info(
        self,
        game_center_leaderboard_set_create_request: Annotated[GameCenterLeaderboardSetCreateRequest, Field(description="GameCenterLeaderboardSet representation")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GameCenterLeaderboardSetResponse]:
        """game_center_leaderboard_sets_create_instance


        :param game_center_leaderboard_set_create_request: GameCenterLeaderboardSet representation (required)
        :type game_center_leaderboard_set_create_request: GameCenterLeaderboardSetCreateRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._game_center_leaderboard_sets_create_instance_serialize(
            game_center_leaderboard_set_create_request=game_center_leaderboard_set_create_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '422': "ErrorResponse",
            '201': "GameCenterLeaderboardSetResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def game_center_leaderboard_sets_create_instance_without_preload_content(
        self,
        game_center_leaderboard_set_create_request: Annotated[GameCenterLeaderboardSetCreateRequest, Field(description="GameCenterLeaderboardSet representation")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """game_center_leaderboard_sets_create_instance


        :param game_center_leaderboard_set_create_request: GameCenterLeaderboardSet representation (required)
        :type game_center_leaderboard_set_create_request: GameCenterLeaderboardSetCreateRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._game_center_leaderboard_sets_create_instance_serialize(
            game_center_leaderboard_set_create_request=game_center_leaderboard_set_create_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '422': "ErrorResponse",
            '201': "GameCenterLeaderboardSetResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _game_center_leaderboard_sets_create_instance_serialize(
        self,
        game_center_leaderboard_set_create_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if game_center_leaderboard_set_create_request is not None:
            _body_params = game_center_leaderboard_set_create_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'itc-bearer-token'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v1/gameCenterLeaderboardSets',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def game_center_leaderboard_sets_delete_instance(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """game_center_leaderboard_sets_delete_instance


        :param id: the id of the requested resource (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._game_center_leaderboard_sets_delete_instance_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '204': None,
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def game_center_leaderboard_sets_delete_instance_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """game_center_leaderboard_sets_delete_instance


        :param id: the id of the requested resource (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._game_center_leaderboard_sets_delete_instance_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '204': None,
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def game_center_leaderboard_sets_delete_instance_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """game_center_leaderboard_sets_delete_instance


        :param id: the id of the requested resource (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._game_center_leaderboard_sets_delete_instance_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '204': None,
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _game_center_leaderboard_sets_delete_instance_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'itc-bearer-token'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/v1/gameCenterLeaderboardSets/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def game_center_leaderboard_sets_game_center_leaderboards_create_to_many_relationship(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        game_center_leaderboard_set_game_center_leaderboards_linkages_request: Annotated[GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest, Field(description="List of related linkages")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """game_center_leaderboard_sets_game_center_leaderboards_create_to_many_relationship


        :param id: the id of the requested resource (required)
        :type id: str
        :param game_center_leaderboard_set_game_center_leaderboards_linkages_request: List of related linkages (required)
        :type game_center_leaderboard_set_game_center_leaderboards_linkages_request: GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._game_center_leaderboard_sets_game_center_leaderboards_create_to_many_relationship_serialize(
            id=id,
            game_center_leaderboard_set_game_center_leaderboards_linkages_request=game_center_leaderboard_set_game_center_leaderboards_linkages_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '422': "ErrorResponse",
            '409': "ErrorResponse",
            '204': None,
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def game_center_leaderboard_sets_game_center_leaderboards_create_to_many_relationship_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        game_center_leaderboard_set_game_center_leaderboards_linkages_request: Annotated[GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest, Field(description="List of related linkages")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """game_center_leaderboard_sets_game_center_leaderboards_create_to_many_relationship


        :param id: the id of the requested resource (required)
        :type id: str
        :param game_center_leaderboard_set_game_center_leaderboards_linkages_request: List of related linkages (required)
        :type game_center_leaderboard_set_game_center_leaderboards_linkages_request: GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._game_center_leaderboard_sets_game_center_leaderboards_create_to_many_relationship_serialize(
            id=id,
            game_center_leaderboard_set_game_center_leaderboards_linkages_request=game_center_leaderboard_set_game_center_leaderboards_linkages_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '422': "ErrorResponse",
            '409': "ErrorResponse",
            '204': None,
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def game_center_leaderboard_sets_game_center_leaderboards_create_to_many_relationship_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        game_center_leaderboard_set_game_center_leaderboards_linkages_request: Annotated[GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest, Field(description="List of related linkages")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """game_center_leaderboard_sets_game_center_leaderboards_create_to_many_relationship


        :param id: the id of the requested resource (required)
        :type id: str
        :param game_center_leaderboard_set_game_center_leaderboards_linkages_request: List of related linkages (required)
        :type game_center_leaderboard_set_game_center_leaderboards_linkages_request: GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._game_center_leaderboard_sets_game_center_leaderboards_create_to_many_relationship_serialize(
            id=id,
            game_center_leaderboard_set_game_center_leaderboards_linkages_request=game_center_leaderboard_set_game_center_leaderboards_linkages_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '422': "ErrorResponse",
            '409': "ErrorResponse",
            '204': None,
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _game_center_leaderboard_sets_game_center_leaderboards_create_to_many_relationship_serialize(
        self,
        id,
        game_center_leaderboard_set_game_center_leaderboards_linkages_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if game_center_leaderboard_set_game_center_leaderboards_linkages_request is not None:
            _body_params = game_center_leaderboard_set_game_center_leaderboards_linkages_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'itc-bearer-token'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v1/gameCenterLeaderboardSets/{id}/relationships/gameCenterLeaderboards',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def game_center_leaderboard_sets_game_center_leaderboards_delete_to_many_relationship(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        game_center_leaderboard_set_game_center_leaderboards_linkages_request: Annotated[GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest, Field(description="List of related linkages")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """game_center_leaderboard_sets_game_center_leaderboards_delete_to_many_relationship


        :param id: the id of the requested resource (required)
        :type id: str
        :param game_center_leaderboard_set_game_center_leaderboards_linkages_request: List of related linkages (required)
        :type game_center_leaderboard_set_game_center_leaderboards_linkages_request: GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._game_center_leaderboard_sets_game_center_leaderboards_delete_to_many_relationship_serialize(
            id=id,
            game_center_leaderboard_set_game_center_leaderboards_linkages_request=game_center_leaderboard_set_game_center_leaderboards_linkages_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '422': "ErrorResponse",
            '409': "ErrorResponse",
            '204': None,
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def game_center_leaderboard_sets_game_center_leaderboards_delete_to_many_relationship_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        game_center_leaderboard_set_game_center_leaderboards_linkages_request: Annotated[GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest, Field(description="List of related linkages")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """game_center_leaderboard_sets_game_center_leaderboards_delete_to_many_relationship


        :param id: the id of the requested resource (required)
        :type id: str
        :param game_center_leaderboard_set_game_center_leaderboards_linkages_request: List of related linkages (required)
        :type game_center_leaderboard_set_game_center_leaderboards_linkages_request: GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._game_center_leaderboard_sets_game_center_leaderboards_delete_to_many_relationship_serialize(
            id=id,
            game_center_leaderboard_set_game_center_leaderboards_linkages_request=game_center_leaderboard_set_game_center_leaderboards_linkages_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '422': "ErrorResponse",
            '409': "ErrorResponse",
            '204': None,
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def game_center_leaderboard_sets_game_center_leaderboards_delete_to_many_relationship_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        game_center_leaderboard_set_game_center_leaderboards_linkages_request: Annotated[GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest, Field(description="List of related linkages")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """game_center_leaderboard_sets_game_center_leaderboards_delete_to_many_relationship


        :param id: the id of the requested resource (required)
        :type id: str
        :param game_center_leaderboard_set_game_center_leaderboards_linkages_request: List of related linkages (required)
        :type game_center_leaderboard_set_game_center_leaderboards_linkages_request: GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._game_center_leaderboard_sets_game_center_leaderboards_delete_to_many_relationship_serialize(
            id=id,
            game_center_leaderboard_set_game_center_leaderboards_linkages_request=game_center_leaderboard_set_game_center_leaderboards_linkages_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '422': "ErrorResponse",
            '409': "ErrorResponse",
            '204': None,
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _game_center_leaderboard_sets_game_center_leaderboards_delete_to_many_relationship_serialize(
        self,
        id,
        game_center_leaderboard_set_game_center_leaderboards_linkages_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if game_center_leaderboard_set_game_center_leaderboards_linkages_request is not None:
            _body_params = game_center_leaderboard_set_game_center_leaderboards_linkages_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'itc-bearer-token'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/v1/gameCenterLeaderboardSets/{id}/relationships/gameCenterLeaderboards',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def game_center_leaderboard_sets_game_center_leaderboards_get_to_many_related(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        filter_reference_name: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'referenceName'")] = None,
        filter_archived: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'archived'")] = None,
        filter_id: Annotated[Optional[List[StrictStr]], Field(description="filter by id(s)")] = None,
        fields_game_center_leaderboards: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type gameCenterLeaderboards")] = None,
        fields_game_center_details: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type gameCenterDetails")] = None,
        fields_game_center_groups: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type gameCenterGroups")] = None,
        fields_game_center_leaderboard_sets: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type gameCenterLeaderboardSets")] = None,
        fields_game_center_leaderboard_localizations: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type gameCenterLeaderboardLocalizations")] = None,
        fields_game_center_leaderboard_releases: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type gameCenterLeaderboardReleases")] = None,
        fields_game_center_activities: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type gameCenterActivities")] = None,
        fields_game_center_challenges: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type gameCenterChallenges")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        include: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of relationships to include")] = None,
        limit_game_center_leaderboard_sets: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related gameCenterLeaderboardSets returned (when they are included)")] = None,
        limit_localizations: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related localizations returned (when they are included)")] = None,
        limit_releases: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related releases returned (when they are included)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GameCenterLeaderboardsResponse:
        """game_center_leaderboard_sets_game_center_leaderboards_get_to_many_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param filter_reference_name: filter by attribute 'referenceName'
        :type filter_reference_name: List[str]
        :param filter_archived: filter by attribute 'archived'
        :type filter_archived: List[str]
        :param filter_id: filter by id(s)
        :type filter_id: List[str]
        :param fields_game_center_leaderboards: the fields to include for returned resources of type gameCenterLeaderboards
        :type fields_game_center_leaderboards: List[str]
        :param fields_game_center_details: the fields to include for returned resources of type gameCenterDetails
        :type fields_game_center_details: List[str]
        :param fields_game_center_groups: the fields to include for returned resources of type gameCenterGroups
        :type fields_game_center_groups: List[str]
        :param fields_game_center_leaderboard_sets: the fields to include for returned resources of type gameCenterLeaderboardSets
        :type fields_game_center_leaderboard_sets: List[str]
        :param fields_game_center_leaderboard_localizations: the fields to include for returned resources of type gameCenterLeaderboardLocalizations
        :type fields_game_center_leaderboard_localizations: List[str]
        :param fields_game_center_leaderboard_releases: the fields to include for returned resources of type gameCenterLeaderboardReleases
        :type fields_game_center_leaderboard_releases: List[str]
        :param fields_game_center_activities: the fields to include for returned resources of type gameCenterActivities
        :type fields_game_center_activities: List[str]
        :param fields_game_center_challenges: the fields to include for returned resources of type gameCenterChallenges
        :type fields_game_center_challenges: List[str]
        :param limit: maximum resources per page
        :type limit: int
        :param include: comma-separated list of relationships to include
        :type include: List[str]
        :param limit_game_center_leaderboard_sets: maximum number of related gameCenterLeaderboardSets returned (when they are included)
        :type limit_game_center_leaderboard_sets: int
        :param limit_localizations: maximum number of related localizations returned (when they are included)
        :type limit_localizations: int
        :param limit_releases: maximum number of related releases returned (when they are included)
        :type limit_releases: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._game_center_leaderboard_sets_game_center_leaderboards_get_to_many_related_serialize(
            id=id,
            filter_reference_name=filter_reference_name,
            filter_archived=filter_archived,
            filter_id=filter_id,
            fields_game_center_leaderboards=fields_game_center_leaderboards,
            fields_game_center_details=fields_game_center_details,
            fields_game_center_groups=fields_game_center_groups,
            fields_game_center_leaderboard_sets=fields_game_center_leaderboard_sets,
            fields_game_center_leaderboard_localizations=fields_game_center_leaderboard_localizations,
            fields_game_center_leaderboard_releases=fields_game_center_leaderboard_releases,
            fields_game_center_activities=fields_game_center_activities,
            fields_game_center_challenges=fields_game_center_challenges,
            limit=limit,
            include=include,
            limit_game_center_leaderboard_sets=limit_game_center_leaderboard_sets,
            limit_localizations=limit_localizations,
            limit_releases=limit_releases,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '200': "GameCenterLeaderboardsResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def game_center_leaderboard_sets_game_center_leaderboards_get_to_many_related_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        filter_reference_name: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'referenceName'")] = None,
        filter_archived: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'archived'")] = None,
        filter_id: Annotated[Optional[List[StrictStr]], Field(description="filter by id(s)")] = None,
        fields_game_center_leaderboards: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type gameCenterLeaderboards")] = None,
        fields_game_center_details: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type gameCenterDetails")] = None,
        fields_game_center_groups: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type gameCenterGroups")] = None,
        fields_game_center_leaderboard_sets: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type gameCenterLeaderboardSets")] = None,
        fields_game_center_leaderboard_localizations: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type gameCenterLeaderboardLocalizations")] = None,
        fields_game_center_leaderboard_releases: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type gameCenterLeaderboardReleases")] = None,
        fields_game_center_activities: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type gameCenterActivities")] = None,
        fields_game_center_challenges: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type gameCenterChallenges")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        include: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of relationships to include")] = None,
        limit_game_center_leaderboard_sets: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related gameCenterLeaderboardSets returned (when they are included)")] = None,
        limit_localizations: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related localizations returned (when they are included)")] = None,
        limit_releases: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related releases returned (when they are included)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GameCenterLeaderboardsResponse]:
        """game_center_leaderboard_sets_game_center_leaderboards_get_to_many_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param filter_reference_name: filter by attribute 'referenceName'
        :type filter_reference_name: List[str]
        :param filter_archived: filter by attribute 'archived'
        :type filter_archived: List[str]
        :param filter_id: filter by id(s)
        :type filter_id: List[str]
        :param fields_game_center_leaderboards: the fields to include for returned resources of type gameCenterLeaderboards
        :type fields_game_center_leaderboards: List[str]
        :param fields_game_center_details: the fields to include for returned resources of type gameCenterDetails
        :type fields_game_center_details: List[str]
        :param fields_game_center_groups: the fields to include for returned resources of type gameCenterGroups
        :type fields_game_center_groups: List[str]
        :param fields_game_center_leaderboard_sets: the fields to include for returned resources of type gameCenterLeaderboardSets
        :type fields_game_center_leaderboard_sets: List[str]
        :param fields_game_center_leaderboard_localizations: the fields to include for returned resources of type gameCenterLeaderboardLocalizations
        :type fields_game_center_leaderboard_localizations: List[str]
        :param fields_game_center_leaderboard_releases: the fields to include for returned resources of type gameCenterLeaderboardReleases
        :type fields_game_center_leaderboard_releases: List[str]
        :param fields_game_center_activities: the fields to include for returned resources of type gameCenterActivities
        :type fields_game_center_activities: List[str]
        :param fields_game_center_challenges: the fields to include for returned resources of type gameCenterChallenges
        :type fields_game_center_challenges: List[str]
        :param limit: maximum resources per page
        :type limit: int
        :param include: comma-separated list of relationships to include
        :type include: List[str]
        :param limit_game_center_leaderboard_sets: maximum number of related gameCenterLeaderboardSets returned (when they are included)
        :type limit_game_center_leaderboard_sets: int
        :param limit_localizations: maximum number of related localizations returned (when they are included)
        :type limit_localizations: int
        :param limit_releases: maximum number of related releases returned (when they are included)
        :type limit_releases: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._game_center_leaderboard_sets_game_center_leaderboards_get_to_many_related_serialize(
            id=id,
            filter_reference_name=filter_reference_name,
            filter_archived=filter_archived,
            filter_id=filter_id,
            fields_game_center_leaderboards=fields_game_center_leaderboards,
            fields_game_center_details=fields_game_center_details,
            fields_game_center_groups=fields_game_center_groups,
            fields_game_center_leaderboard_sets=fields_game_center_leaderboard_sets,
            fields_game_center_leaderboard_localizations=fields_game_center_leaderboard_localizations,
            fields_game_center_leaderboard_releases=fields_game_center_leaderboard_releases,
            fields_game_center_activities=fields_game_center_activities,
            fields_game_center_challenges=fields_game_center_challenges,
            limit=limit,
            include=include,
            limit_game_center_leaderboard_sets=limit_game_center_leaderboard_sets,
            limit_localizations=limit_localizations,
            limit_releases=limit_releases,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '200': "GameCenterLeaderboardsResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def game_center_leaderboard_sets_game_center_leaderboards_get_to_many_related_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        filter_reference_name: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'referenceName'")] = None,
        filter_archived: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'archived'")] = None,
        filter_id: Annotated[Optional[List[StrictStr]], Field(description="filter by id(s)")] = None,
        fields_game_center_leaderboards: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type gameCenterLeaderboards")] = None,
        fields_game_center_details: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type gameCenterDetails")] = None,
        fields_game_center_groups: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type gameCenterGroups")] = None,
        fields_game_center_leaderboard_sets: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type gameCenterLeaderboardSets")] = None,
        fields_game_center_leaderboard_localizations: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type gameCenterLeaderboardLocalizations")] = None,
        fields_game_center_leaderboard_releases: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type gameCenterLeaderboardReleases")] = None,
        fields_game_center_activities: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type gameCenterActivities")] = None,
        fields_game_center_challenges: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type gameCenterChallenges")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        include: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of relationships to include")] = None,
        limit_game_center_leaderboard_sets: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related gameCenterLeaderboardSets returned (when they are included)")] = None,
        limit_localizations: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related localizations returned (when they are included)")] = None,
        limit_releases: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related releases returned (when they are included)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """game_center_leaderboard_sets_game_center_leaderboards_get_to_many_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param filter_reference_name: filter by attribute 'referenceName'
        :type filter_reference_name: List[str]
        :param filter_archived: filter by attribute 'archived'
        :type filter_archived: List[str]
        :param filter_id: filter by id(s)
        :type filter_id: List[str]
        :param fields_game_center_leaderboards: the fields to include for returned resources of type gameCenterLeaderboards
        :type fields_game_center_leaderboards: List[str]
        :param fields_game_center_details: the fields to include for returned resources of type gameCenterDetails
        :type fields_game_center_details: List[str]
        :param fields_game_center_groups: the fields to include for returned resources of type gameCenterGroups
        :type fields_game_center_groups: List[str]
        :param fields_game_center_leaderboard_sets: the fields to include for returned resources of type gameCenterLeaderboardSets
        :type fields_game_center_leaderboard_sets: List[str]
        :param fields_game_center_leaderboard_localizations: the fields to include for returned resources of type gameCenterLeaderboardLocalizations
        :type fields_game_center_leaderboard_localizations: List[str]
        :param fields_game_center_leaderboard_releases: the fields to include for returned resources of type gameCenterLeaderboardReleases
        :type fields_game_center_leaderboard_releases: List[str]
        :param fields_game_center_activities: the fields to include for returned resources of type gameCenterActivities
        :type fields_game_center_activities: List[str]
        :param fields_game_center_challenges: the fields to include for returned resources of type gameCenterChallenges
        :type fields_game_center_challenges: List[str]
        :param limit: maximum resources per page
        :type limit: int
        :param include: comma-separated list of relationships to include
        :type include: List[str]
        :param limit_game_center_leaderboard_sets: maximum number of related gameCenterLeaderboardSets returned (when they are included)
        :type limit_game_center_leaderboard_sets: int
        :param limit_localizations: maximum number of related localizations returned (when they are included)
        :type limit_localizations: int
        :param limit_releases: maximum number of related releases returned (when they are included)
        :type limit_releases: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._game_center_leaderboard_sets_game_center_leaderboards_get_to_many_related_serialize(
            id=id,
            filter_reference_name=filter_reference_name,
            filter_archived=filter_archived,
            filter_id=filter_id,
            fields_game_center_leaderboards=fields_game_center_leaderboards,
            fields_game_center_details=fields_game_center_details,
            fields_game_center_groups=fields_game_center_groups,
            fields_game_center_leaderboard_sets=fields_game_center_leaderboard_sets,
            fields_game_center_leaderboard_localizations=fields_game_center_leaderboard_localizations,
            fields_game_center_leaderboard_releases=fields_game_center_leaderboard_releases,
            fields_game_center_activities=fields_game_center_activities,
            fields_game_center_challenges=fields_game_center_challenges,
            limit=limit,
            include=include,
            limit_game_center_leaderboard_sets=limit_game_center_leaderboard_sets,
            limit_localizations=limit_localizations,
            limit_releases=limit_releases,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '200': "GameCenterLeaderboardsResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _game_center_leaderboard_sets_game_center_leaderboards_get_to_many_related_serialize(
        self,
        id,
        filter_reference_name,
        filter_archived,
        filter_id,
        fields_game_center_leaderboards,
        fields_game_center_details,
        fields_game_center_groups,
        fields_game_center_leaderboard_sets,
        fields_game_center_leaderboard_localizations,
        fields_game_center_leaderboard_releases,
        fields_game_center_activities,
        fields_game_center_challenges,
        limit,
        include,
        limit_game_center_leaderboard_sets,
        limit_localizations,
        limit_releases,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'filter[referenceName]': 'csv',
            'filter[archived]': 'csv',
            'filter[id]': 'csv',
            'fields[gameCenterLeaderboards]': 'csv',
            'fields[gameCenterDetails]': 'csv',
            'fields[gameCenterGroups]': 'csv',
            'fields[gameCenterLeaderboardSets]': 'csv',
            'fields[gameCenterLeaderboardLocalizations]': 'csv',
            'fields[gameCenterLeaderboardReleases]': 'csv',
            'fields[gameCenterActivities]': 'csv',
            'fields[gameCenterChallenges]': 'csv',
            'include': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if filter_reference_name is not None:
            
            _query_params.append(('filter[referenceName]', filter_reference_name))
            
        if filter_archived is not None:
            
            _query_params.append(('filter[archived]', filter_archived))
            
        if filter_id is not None:
            
            _query_params.append(('filter[id]', filter_id))
            
        if fields_game_center_leaderboards is not None:
            
            _query_params.append(('fields[gameCenterLeaderboards]', fields_game_center_leaderboards))
            
        if fields_game_center_details is not None:
            
            _query_params.append(('fields[gameCenterDetails]', fields_game_center_details))
            
        if fields_game_center_groups is not None:
            
            _query_params.append(('fields[gameCenterGroups]', fields_game_center_groups))
            
        if fields_game_center_leaderboard_sets is not None:
            
            _query_params.append(('fields[gameCenterLeaderboardSets]', fields_game_center_leaderboard_sets))
            
        if fields_game_center_leaderboard_localizations is not None:
            
            _query_params.append(('fields[gameCenterLeaderboardLocalizations]', fields_game_center_leaderboard_localizations))
            
        if fields_game_center_leaderboard_releases is not None:
            
            _query_params.append(('fields[gameCenterLeaderboardReleases]', fields_game_center_leaderboard_releases))
            
        if fields_game_center_activities is not None:
            
            _query_params.append(('fields[gameCenterActivities]', fields_game_center_activities))
            
        if fields_game_center_challenges is not None:
            
            _query_params.append(('fields[gameCenterChallenges]', fields_game_center_challenges))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if include is not None:
            
            _query_params.append(('include', include))
            
        if limit_game_center_leaderboard_sets is not None:
            
            _query_params.append(('limit[gameCenterLeaderboardSets]', limit_game_center_leaderboard_sets))
            
        if limit_localizations is not None:
            
            _query_params.append(('limit[localizations]', limit_localizations))
            
        if limit_releases is not None:
            
            _query_params.append(('limit[releases]', limit_releases))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'itc-bearer-token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/gameCenterLeaderboardSets/{id}/gameCenterLeaderboards',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def game_center_leaderboard_sets_game_center_leaderboards_get_to_many_relationship(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesResponse:
        """game_center_leaderboard_sets_game_center_leaderboards_get_to_many_relationship


        :param id: the id of the requested resource (required)
        :type id: str
        :param limit: maximum resources per page
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._game_center_leaderboard_sets_game_center_leaderboards_get_to_many_relationship_serialize(
            id=id,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '200': "GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def game_center_leaderboard_sets_game_center_leaderboards_get_to_many_relationship_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesResponse]:
        """game_center_leaderboard_sets_game_center_leaderboards_get_to_many_relationship


        :param id: the id of the requested resource (required)
        :type id: str
        :param limit: maximum resources per page
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._game_center_leaderboard_sets_game_center_leaderboards_get_to_many_relationship_serialize(
            id=id,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '200': "GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def game_center_leaderboard_sets_game_center_leaderboards_get_to_many_relationship_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """game_center_leaderboard_sets_game_center_leaderboards_get_to_many_relationship


        :param id: the id of the requested resource (required)
        :type id: str
        :param limit: maximum resources per page
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._game_center_leaderboard_sets_game_center_leaderboards_get_to_many_relationship_serialize(
            id=id,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '200': "GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _game_center_leaderboard_sets_game_center_leaderboards_get_to_many_relationship_serialize(
        self,
        id,
        limit,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'itc-bearer-token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/gameCenterLeaderboardSets/{id}/relationships/gameCenterLeaderboards',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def game_center_leaderboard_sets_game_center_leaderboards_replace_to_many_relationship(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        game_center_leaderboard_set_game_center_leaderboards_linkages_request: Annotated[GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest, Field(description="List of related linkages")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """game_center_leaderboard_sets_game_center_leaderboards_replace_to_many_relationship


        :param id: the id of the requested resource (required)
        :type id: str
        :param game_center_leaderboard_set_game_center_leaderboards_linkages_request: List of related linkages (required)
        :type game_center_leaderboard_set_game_center_leaderboards_linkages_request: GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._game_center_leaderboard_sets_game_center_leaderboards_replace_to_many_relationship_serialize(
            id=id,
            game_center_leaderboard_set_game_center_leaderboards_linkages_request=game_center_leaderboard_set_game_center_leaderboards_linkages_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '422': "ErrorResponse",
            '409': "ErrorResponse",
            '204': None,
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def game_center_leaderboard_sets_game_center_leaderboards_replace_to_many_relationship_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        game_center_leaderboard_set_game_center_leaderboards_linkages_request: Annotated[GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest, Field(description="List of related linkages")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """game_center_leaderboard_sets_game_center_leaderboards_replace_to_many_relationship


        :param id: the id of the requested resource (required)
        :type id: str
        :param game_center_leaderboard_set_game_center_leaderboards_linkages_request: List of related linkages (required)
        :type game_center_leaderboard_set_game_center_leaderboards_linkages_request: GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._game_center_leaderboard_sets_game_center_leaderboards_replace_to_many_relationship_serialize(
            id=id,
            game_center_leaderboard_set_game_center_leaderboards_linkages_request=game_center_leaderboard_set_game_center_leaderboards_linkages_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '422': "ErrorResponse",
            '409': "ErrorResponse",
            '204': None,
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def game_center_leaderboard_sets_game_center_leaderboards_replace_to_many_relationship_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        game_center_leaderboard_set_game_center_leaderboards_linkages_request: Annotated[GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest, Field(description="List of related linkages")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """game_center_leaderboard_sets_game_center_leaderboards_replace_to_many_relationship


        :param id: the id of the requested resource (required)
        :type id: str
        :param game_center_leaderboard_set_game_center_leaderboards_linkages_request: List of related linkages (required)
        :type game_center_leaderboard_set_game_center_leaderboards_linkages_request: GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._game_center_leaderboard_sets_game_center_leaderboards_replace_to_many_relationship_serialize(
            id=id,
            game_center_leaderboard_set_game_center_leaderboards_linkages_request=game_center_leaderboard_set_game_center_leaderboards_linkages_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '422': "ErrorResponse",
            '409': "ErrorResponse",
            '204': None,
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _game_center_leaderboard_sets_game_center_leaderboards_replace_to_many_relationship_serialize(
        self,
        id,
        game_center_leaderboard_set_game_center_leaderboards_linkages_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if game_center_leaderboard_set_game_center_leaderboards_linkages_request is not None:
            _body_params = game_center_leaderboard_set_game_center_leaderboards_linkages_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'itc-bearer-token'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/v1/gameCenterLeaderboardSets/{id}/relationships/gameCenterLeaderboards',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def game_center_leaderboard_sets_get_instance(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_game_center_leaderboard_sets: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type gameCenterLeaderboardSets")] = None,
        fields_game_center_leaderboard_set_localizations: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations")] = None,
        fields_game_center_leaderboards: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type gameCenterLeaderboards")] = None,
        fields_game_center_leaderboard_set_releases: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type gameCenterLeaderboardSetReleases")] = None,
        include: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of relationships to include")] = None,
        limit_game_center_leaderboards: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related gameCenterLeaderboards returned (when they are included)")] = None,
        limit_localizations: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related localizations returned (when they are included)")] = None,
        limit_releases: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related releases returned (when they are included)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GameCenterLeaderboardSetResponse:
        """game_center_leaderboard_sets_get_instance


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_game_center_leaderboard_sets: the fields to include for returned resources of type gameCenterLeaderboardSets
        :type fields_game_center_leaderboard_sets: List[str]
        :param fields_game_center_leaderboard_set_localizations: the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations
        :type fields_game_center_leaderboard_set_localizations: List[str]
        :param fields_game_center_leaderboards: the fields to include for returned resources of type gameCenterLeaderboards
        :type fields_game_center_leaderboards: List[str]
        :param fields_game_center_leaderboard_set_releases: the fields to include for returned resources of type gameCenterLeaderboardSetReleases
        :type fields_game_center_leaderboard_set_releases: List[str]
        :param include: comma-separated list of relationships to include
        :type include: List[str]
        :param limit_game_center_leaderboards: maximum number of related gameCenterLeaderboards returned (when they are included)
        :type limit_game_center_leaderboards: int
        :param limit_localizations: maximum number of related localizations returned (when they are included)
        :type limit_localizations: int
        :param limit_releases: maximum number of related releases returned (when they are included)
        :type limit_releases: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._game_center_leaderboard_sets_get_instance_serialize(
            id=id,
            fields_game_center_leaderboard_sets=fields_game_center_leaderboard_sets,
            fields_game_center_leaderboard_set_localizations=fields_game_center_leaderboard_set_localizations,
            fields_game_center_leaderboards=fields_game_center_leaderboards,
            fields_game_center_leaderboard_set_releases=fields_game_center_leaderboard_set_releases,
            include=include,
            limit_game_center_leaderboards=limit_game_center_leaderboards,
            limit_localizations=limit_localizations,
            limit_releases=limit_releases,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '200': "GameCenterLeaderboardSetResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def game_center_leaderboard_sets_get_instance_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_game_center_leaderboard_sets: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type gameCenterLeaderboardSets")] = None,
        fields_game_center_leaderboard_set_localizations: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations")] = None,
        fields_game_center_leaderboards: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type gameCenterLeaderboards")] = None,
        fields_game_center_leaderboard_set_releases: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type gameCenterLeaderboardSetReleases")] = None,
        include: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of relationships to include")] = None,
        limit_game_center_leaderboards: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related gameCenterLeaderboards returned (when they are included)")] = None,
        limit_localizations: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related localizations returned (when they are included)")] = None,
        limit_releases: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related releases returned (when they are included)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GameCenterLeaderboardSetResponse]:
        """game_center_leaderboard_sets_get_instance


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_game_center_leaderboard_sets: the fields to include for returned resources of type gameCenterLeaderboardSets
        :type fields_game_center_leaderboard_sets: List[str]
        :param fields_game_center_leaderboard_set_localizations: the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations
        :type fields_game_center_leaderboard_set_localizations: List[str]
        :param fields_game_center_leaderboards: the fields to include for returned resources of type gameCenterLeaderboards
        :type fields_game_center_leaderboards: List[str]
        :param fields_game_center_leaderboard_set_releases: the fields to include for returned resources of type gameCenterLeaderboardSetReleases
        :type fields_game_center_leaderboard_set_releases: List[str]
        :param include: comma-separated list of relationships to include
        :type include: List[str]
        :param limit_game_center_leaderboards: maximum number of related gameCenterLeaderboards returned (when they are included)
        :type limit_game_center_leaderboards: int
        :param limit_localizations: maximum number of related localizations returned (when they are included)
        :type limit_localizations: int
        :param limit_releases: maximum number of related releases returned (when they are included)
        :type limit_releases: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._game_center_leaderboard_sets_get_instance_serialize(
            id=id,
            fields_game_center_leaderboard_sets=fields_game_center_leaderboard_sets,
            fields_game_center_leaderboard_set_localizations=fields_game_center_leaderboard_set_localizations,
            fields_game_center_leaderboards=fields_game_center_leaderboards,
            fields_game_center_leaderboard_set_releases=fields_game_center_leaderboard_set_releases,
            include=include,
            limit_game_center_leaderboards=limit_game_center_leaderboards,
            limit_localizations=limit_localizations,
            limit_releases=limit_releases,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '200': "GameCenterLeaderboardSetResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def game_center_leaderboard_sets_get_instance_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_game_center_leaderboard_sets: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type gameCenterLeaderboardSets")] = None,
        fields_game_center_leaderboard_set_localizations: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations")] = None,
        fields_game_center_leaderboards: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type gameCenterLeaderboards")] = None,
        fields_game_center_leaderboard_set_releases: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type gameCenterLeaderboardSetReleases")] = None,
        include: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of relationships to include")] = None,
        limit_game_center_leaderboards: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related gameCenterLeaderboards returned (when they are included)")] = None,
        limit_localizations: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related localizations returned (when they are included)")] = None,
        limit_releases: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related releases returned (when they are included)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """game_center_leaderboard_sets_get_instance


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_game_center_leaderboard_sets: the fields to include for returned resources of type gameCenterLeaderboardSets
        :type fields_game_center_leaderboard_sets: List[str]
        :param fields_game_center_leaderboard_set_localizations: the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations
        :type fields_game_center_leaderboard_set_localizations: List[str]
        :param fields_game_center_leaderboards: the fields to include for returned resources of type gameCenterLeaderboards
        :type fields_game_center_leaderboards: List[str]
        :param fields_game_center_leaderboard_set_releases: the fields to include for returned resources of type gameCenterLeaderboardSetReleases
        :type fields_game_center_leaderboard_set_releases: List[str]
        :param include: comma-separated list of relationships to include
        :type include: List[str]
        :param limit_game_center_leaderboards: maximum number of related gameCenterLeaderboards returned (when they are included)
        :type limit_game_center_leaderboards: int
        :param limit_localizations: maximum number of related localizations returned (when they are included)
        :type limit_localizations: int
        :param limit_releases: maximum number of related releases returned (when they are included)
        :type limit_releases: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._game_center_leaderboard_sets_get_instance_serialize(
            id=id,
            fields_game_center_leaderboard_sets=fields_game_center_leaderboard_sets,
            fields_game_center_leaderboard_set_localizations=fields_game_center_leaderboard_set_localizations,
            fields_game_center_leaderboards=fields_game_center_leaderboards,
            fields_game_center_leaderboard_set_releases=fields_game_center_leaderboard_set_releases,
            include=include,
            limit_game_center_leaderboards=limit_game_center_leaderboards,
            limit_localizations=limit_localizations,
            limit_releases=limit_releases,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '200': "GameCenterLeaderboardSetResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _game_center_leaderboard_sets_get_instance_serialize(
        self,
        id,
        fields_game_center_leaderboard_sets,
        fields_game_center_leaderboard_set_localizations,
        fields_game_center_leaderboards,
        fields_game_center_leaderboard_set_releases,
        include,
        limit_game_center_leaderboards,
        limit_localizations,
        limit_releases,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'fields[gameCenterLeaderboardSets]': 'csv',
            'fields[gameCenterLeaderboardSetLocalizations]': 'csv',
            'fields[gameCenterLeaderboards]': 'csv',
            'fields[gameCenterLeaderboardSetReleases]': 'csv',
            'include': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if fields_game_center_leaderboard_sets is not None:
            
            _query_params.append(('fields[gameCenterLeaderboardSets]', fields_game_center_leaderboard_sets))
            
        if fields_game_center_leaderboard_set_localizations is not None:
            
            _query_params.append(('fields[gameCenterLeaderboardSetLocalizations]', fields_game_center_leaderboard_set_localizations))
            
        if fields_game_center_leaderboards is not None:
            
            _query_params.append(('fields[gameCenterLeaderboards]', fields_game_center_leaderboards))
            
        if fields_game_center_leaderboard_set_releases is not None:
            
            _query_params.append(('fields[gameCenterLeaderboardSetReleases]', fields_game_center_leaderboard_set_releases))
            
        if include is not None:
            
            _query_params.append(('include', include))
            
        if limit_game_center_leaderboards is not None:
            
            _query_params.append(('limit[gameCenterLeaderboards]', limit_game_center_leaderboards))
            
        if limit_localizations is not None:
            
            _query_params.append(('limit[localizations]', limit_localizations))
            
        if limit_releases is not None:
            
            _query_params.append(('limit[releases]', limit_releases))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'itc-bearer-token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/gameCenterLeaderboardSets/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def game_center_leaderboard_sets_group_leaderboard_set_get_to_one_related(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_game_center_leaderboard_sets: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type gameCenterLeaderboardSets")] = None,
        fields_game_center_details: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type gameCenterDetails")] = None,
        fields_game_center_groups: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type gameCenterGroups")] = None,
        fields_game_center_leaderboard_set_localizations: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations")] = None,
        fields_game_center_leaderboards: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type gameCenterLeaderboards")] = None,
        fields_game_center_leaderboard_set_releases: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type gameCenterLeaderboardSetReleases")] = None,
        include: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of relationships to include")] = None,
        limit_localizations: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related localizations returned (when they are included)")] = None,
        limit_game_center_leaderboards: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related gameCenterLeaderboards returned (when they are included)")] = None,
        limit_releases: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related releases returned (when they are included)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GameCenterLeaderboardSetResponse:
        """(Deprecated) game_center_leaderboard_sets_group_leaderboard_set_get_to_one_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_game_center_leaderboard_sets: the fields to include for returned resources of type gameCenterLeaderboardSets
        :type fields_game_center_leaderboard_sets: List[str]
        :param fields_game_center_details: the fields to include for returned resources of type gameCenterDetails
        :type fields_game_center_details: List[str]
        :param fields_game_center_groups: the fields to include for returned resources of type gameCenterGroups
        :type fields_game_center_groups: List[str]
        :param fields_game_center_leaderboard_set_localizations: the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations
        :type fields_game_center_leaderboard_set_localizations: List[str]
        :param fields_game_center_leaderboards: the fields to include for returned resources of type gameCenterLeaderboards
        :type fields_game_center_leaderboards: List[str]
        :param fields_game_center_leaderboard_set_releases: the fields to include for returned resources of type gameCenterLeaderboardSetReleases
        :type fields_game_center_leaderboard_set_releases: List[str]
        :param include: comma-separated list of relationships to include
        :type include: List[str]
        :param limit_localizations: maximum number of related localizations returned (when they are included)
        :type limit_localizations: int
        :param limit_game_center_leaderboards: maximum number of related gameCenterLeaderboards returned (when they are included)
        :type limit_game_center_leaderboards: int
        :param limit_releases: maximum number of related releases returned (when they are included)
        :type limit_releases: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /v1/gameCenterLeaderboardSets/{id}/groupLeaderboardSet is deprecated.", DeprecationWarning)

        _param = self._game_center_leaderboard_sets_group_leaderboard_set_get_to_one_related_serialize(
            id=id,
            fields_game_center_leaderboard_sets=fields_game_center_leaderboard_sets,
            fields_game_center_details=fields_game_center_details,
            fields_game_center_groups=fields_game_center_groups,
            fields_game_center_leaderboard_set_localizations=fields_game_center_leaderboard_set_localizations,
            fields_game_center_leaderboards=fields_game_center_leaderboards,
            fields_game_center_leaderboard_set_releases=fields_game_center_leaderboard_set_releases,
            include=include,
            limit_localizations=limit_localizations,
            limit_game_center_leaderboards=limit_game_center_leaderboards,
            limit_releases=limit_releases,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '200': "GameCenterLeaderboardSetResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def game_center_leaderboard_sets_group_leaderboard_set_get_to_one_related_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_game_center_leaderboard_sets: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type gameCenterLeaderboardSets")] = None,
        fields_game_center_details: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type gameCenterDetails")] = None,
        fields_game_center_groups: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type gameCenterGroups")] = None,
        fields_game_center_leaderboard_set_localizations: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations")] = None,
        fields_game_center_leaderboards: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type gameCenterLeaderboards")] = None,
        fields_game_center_leaderboard_set_releases: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type gameCenterLeaderboardSetReleases")] = None,
        include: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of relationships to include")] = None,
        limit_localizations: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related localizations returned (when they are included)")] = None,
        limit_game_center_leaderboards: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related gameCenterLeaderboards returned (when they are included)")] = None,
        limit_releases: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related releases returned (when they are included)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GameCenterLeaderboardSetResponse]:
        """(Deprecated) game_center_leaderboard_sets_group_leaderboard_set_get_to_one_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_game_center_leaderboard_sets: the fields to include for returned resources of type gameCenterLeaderboardSets
        :type fields_game_center_leaderboard_sets: List[str]
        :param fields_game_center_details: the fields to include for returned resources of type gameCenterDetails
        :type fields_game_center_details: List[str]
        :param fields_game_center_groups: the fields to include for returned resources of type gameCenterGroups
        :type fields_game_center_groups: List[str]
        :param fields_game_center_leaderboard_set_localizations: the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations
        :type fields_game_center_leaderboard_set_localizations: List[str]
        :param fields_game_center_leaderboards: the fields to include for returned resources of type gameCenterLeaderboards
        :type fields_game_center_leaderboards: List[str]
        :param fields_game_center_leaderboard_set_releases: the fields to include for returned resources of type gameCenterLeaderboardSetReleases
        :type fields_game_center_leaderboard_set_releases: List[str]
        :param include: comma-separated list of relationships to include
        :type include: List[str]
        :param limit_localizations: maximum number of related localizations returned (when they are included)
        :type limit_localizations: int
        :param limit_game_center_leaderboards: maximum number of related gameCenterLeaderboards returned (when they are included)
        :type limit_game_center_leaderboards: int
        :param limit_releases: maximum number of related releases returned (when they are included)
        :type limit_releases: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /v1/gameCenterLeaderboardSets/{id}/groupLeaderboardSet is deprecated.", DeprecationWarning)

        _param = self._game_center_leaderboard_sets_group_leaderboard_set_get_to_one_related_serialize(
            id=id,
            fields_game_center_leaderboard_sets=fields_game_center_leaderboard_sets,
            fields_game_center_details=fields_game_center_details,
            fields_game_center_groups=fields_game_center_groups,
            fields_game_center_leaderboard_set_localizations=fields_game_center_leaderboard_set_localizations,
            fields_game_center_leaderboards=fields_game_center_leaderboards,
            fields_game_center_leaderboard_set_releases=fields_game_center_leaderboard_set_releases,
            include=include,
            limit_localizations=limit_localizations,
            limit_game_center_leaderboards=limit_game_center_leaderboards,
            limit_releases=limit_releases,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '200': "GameCenterLeaderboardSetResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def game_center_leaderboard_sets_group_leaderboard_set_get_to_one_related_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_game_center_leaderboard_sets: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type gameCenterLeaderboardSets")] = None,
        fields_game_center_details: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type gameCenterDetails")] = None,
        fields_game_center_groups: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type gameCenterGroups")] = None,
        fields_game_center_leaderboard_set_localizations: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations")] = None,
        fields_game_center_leaderboards: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type gameCenterLeaderboards")] = None,
        fields_game_center_leaderboard_set_releases: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type gameCenterLeaderboardSetReleases")] = None,
        include: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of relationships to include")] = None,
        limit_localizations: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related localizations returned (when they are included)")] = None,
        limit_game_center_leaderboards: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related gameCenterLeaderboards returned (when they are included)")] = None,
        limit_releases: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related releases returned (when they are included)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """(Deprecated) game_center_leaderboard_sets_group_leaderboard_set_get_to_one_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_game_center_leaderboard_sets: the fields to include for returned resources of type gameCenterLeaderboardSets
        :type fields_game_center_leaderboard_sets: List[str]
        :param fields_game_center_details: the fields to include for returned resources of type gameCenterDetails
        :type fields_game_center_details: List[str]
        :param fields_game_center_groups: the fields to include for returned resources of type gameCenterGroups
        :type fields_game_center_groups: List[str]
        :param fields_game_center_leaderboard_set_localizations: the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations
        :type fields_game_center_leaderboard_set_localizations: List[str]
        :param fields_game_center_leaderboards: the fields to include for returned resources of type gameCenterLeaderboards
        :type fields_game_center_leaderboards: List[str]
        :param fields_game_center_leaderboard_set_releases: the fields to include for returned resources of type gameCenterLeaderboardSetReleases
        :type fields_game_center_leaderboard_set_releases: List[str]
        :param include: comma-separated list of relationships to include
        :type include: List[str]
        :param limit_localizations: maximum number of related localizations returned (when they are included)
        :type limit_localizations: int
        :param limit_game_center_leaderboards: maximum number of related gameCenterLeaderboards returned (when they are included)
        :type limit_game_center_leaderboards: int
        :param limit_releases: maximum number of related releases returned (when they are included)
        :type limit_releases: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /v1/gameCenterLeaderboardSets/{id}/groupLeaderboardSet is deprecated.", DeprecationWarning)

        _param = self._game_center_leaderboard_sets_group_leaderboard_set_get_to_one_related_serialize(
            id=id,
            fields_game_center_leaderboard_sets=fields_game_center_leaderboard_sets,
            fields_game_center_details=fields_game_center_details,
            fields_game_center_groups=fields_game_center_groups,
            fields_game_center_leaderboard_set_localizations=fields_game_center_leaderboard_set_localizations,
            fields_game_center_leaderboards=fields_game_center_leaderboards,
            fields_game_center_leaderboard_set_releases=fields_game_center_leaderboard_set_releases,
            include=include,
            limit_localizations=limit_localizations,
            limit_game_center_leaderboards=limit_game_center_leaderboards,
            limit_releases=limit_releases,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '200': "GameCenterLeaderboardSetResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _game_center_leaderboard_sets_group_leaderboard_set_get_to_one_related_serialize(
        self,
        id,
        fields_game_center_leaderboard_sets,
        fields_game_center_details,
        fields_game_center_groups,
        fields_game_center_leaderboard_set_localizations,
        fields_game_center_leaderboards,
        fields_game_center_leaderboard_set_releases,
        include,
        limit_localizations,
        limit_game_center_leaderboards,
        limit_releases,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'fields[gameCenterLeaderboardSets]': 'csv',
            'fields[gameCenterDetails]': 'csv',
            'fields[gameCenterGroups]': 'csv',
            'fields[gameCenterLeaderboardSetLocalizations]': 'csv',
            'fields[gameCenterLeaderboards]': 'csv',
            'fields[gameCenterLeaderboardSetReleases]': 'csv',
            'include': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if fields_game_center_leaderboard_sets is not None:
            
            _query_params.append(('fields[gameCenterLeaderboardSets]', fields_game_center_leaderboard_sets))
            
        if fields_game_center_details is not None:
            
            _query_params.append(('fields[gameCenterDetails]', fields_game_center_details))
            
        if fields_game_center_groups is not None:
            
            _query_params.append(('fields[gameCenterGroups]', fields_game_center_groups))
            
        if fields_game_center_leaderboard_set_localizations is not None:
            
            _query_params.append(('fields[gameCenterLeaderboardSetLocalizations]', fields_game_center_leaderboard_set_localizations))
            
        if fields_game_center_leaderboards is not None:
            
            _query_params.append(('fields[gameCenterLeaderboards]', fields_game_center_leaderboards))
            
        if fields_game_center_leaderboard_set_releases is not None:
            
            _query_params.append(('fields[gameCenterLeaderboardSetReleases]', fields_game_center_leaderboard_set_releases))
            
        if include is not None:
            
            _query_params.append(('include', include))
            
        if limit_localizations is not None:
            
            _query_params.append(('limit[localizations]', limit_localizations))
            
        if limit_game_center_leaderboards is not None:
            
            _query_params.append(('limit[gameCenterLeaderboards]', limit_game_center_leaderboards))
            
        if limit_releases is not None:
            
            _query_params.append(('limit[releases]', limit_releases))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'itc-bearer-token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/gameCenterLeaderboardSets/{id}/groupLeaderboardSet',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def game_center_leaderboard_sets_group_leaderboard_set_get_to_one_relationship(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GameCenterLeaderboardSetGroupLeaderboardSetLinkageResponse:
        """(Deprecated) game_center_leaderboard_sets_group_leaderboard_set_get_to_one_relationship


        :param id: the id of the requested resource (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /v1/gameCenterLeaderboardSets/{id}/relationships/groupLeaderboardSet is deprecated.", DeprecationWarning)

        _param = self._game_center_leaderboard_sets_group_leaderboard_set_get_to_one_relationship_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '200': "GameCenterLeaderboardSetGroupLeaderboardSetLinkageResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def game_center_leaderboard_sets_group_leaderboard_set_get_to_one_relationship_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GameCenterLeaderboardSetGroupLeaderboardSetLinkageResponse]:
        """(Deprecated) game_center_leaderboard_sets_group_leaderboard_set_get_to_one_relationship


        :param id: the id of the requested resource (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /v1/gameCenterLeaderboardSets/{id}/relationships/groupLeaderboardSet is deprecated.", DeprecationWarning)

        _param = self._game_center_leaderboard_sets_group_leaderboard_set_get_to_one_relationship_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '200': "GameCenterLeaderboardSetGroupLeaderboardSetLinkageResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def game_center_leaderboard_sets_group_leaderboard_set_get_to_one_relationship_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """(Deprecated) game_center_leaderboard_sets_group_leaderboard_set_get_to_one_relationship


        :param id: the id of the requested resource (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /v1/gameCenterLeaderboardSets/{id}/relationships/groupLeaderboardSet is deprecated.", DeprecationWarning)

        _param = self._game_center_leaderboard_sets_group_leaderboard_set_get_to_one_relationship_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '200': "GameCenterLeaderboardSetGroupLeaderboardSetLinkageResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _game_center_leaderboard_sets_group_leaderboard_set_get_to_one_relationship_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'itc-bearer-token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/gameCenterLeaderboardSets/{id}/relationships/groupLeaderboardSet',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def game_center_leaderboard_sets_group_leaderboard_set_update_to_one_relationship(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        game_center_leaderboard_set_group_leaderboard_set_linkage_request: Annotated[GameCenterLeaderboardSetGroupLeaderboardSetLinkageRequest, Field(description="Related linkage")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """(Deprecated) game_center_leaderboard_sets_group_leaderboard_set_update_to_one_relationship


        :param id: the id of the requested resource (required)
        :type id: str
        :param game_center_leaderboard_set_group_leaderboard_set_linkage_request: Related linkage (required)
        :type game_center_leaderboard_set_group_leaderboard_set_linkage_request: GameCenterLeaderboardSetGroupLeaderboardSetLinkageRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("PATCH /v1/gameCenterLeaderboardSets/{id}/relationships/groupLeaderboardSet is deprecated.", DeprecationWarning)

        _param = self._game_center_leaderboard_sets_group_leaderboard_set_update_to_one_relationship_serialize(
            id=id,
            game_center_leaderboard_set_group_leaderboard_set_linkage_request=game_center_leaderboard_set_group_leaderboard_set_linkage_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '422': "ErrorResponse",
            '409': "ErrorResponse",
            '204': None,
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def game_center_leaderboard_sets_group_leaderboard_set_update_to_one_relationship_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        game_center_leaderboard_set_group_leaderboard_set_linkage_request: Annotated[GameCenterLeaderboardSetGroupLeaderboardSetLinkageRequest, Field(description="Related linkage")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """(Deprecated) game_center_leaderboard_sets_group_leaderboard_set_update_to_one_relationship


        :param id: the id of the requested resource (required)
        :type id: str
        :param game_center_leaderboard_set_group_leaderboard_set_linkage_request: Related linkage (required)
        :type game_center_leaderboard_set_group_leaderboard_set_linkage_request: GameCenterLeaderboardSetGroupLeaderboardSetLinkageRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("PATCH /v1/gameCenterLeaderboardSets/{id}/relationships/groupLeaderboardSet is deprecated.", DeprecationWarning)

        _param = self._game_center_leaderboard_sets_group_leaderboard_set_update_to_one_relationship_serialize(
            id=id,
            game_center_leaderboard_set_group_leaderboard_set_linkage_request=game_center_leaderboard_set_group_leaderboard_set_linkage_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '422': "ErrorResponse",
            '409': "ErrorResponse",
            '204': None,
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def game_center_leaderboard_sets_group_leaderboard_set_update_to_one_relationship_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        game_center_leaderboard_set_group_leaderboard_set_linkage_request: Annotated[GameCenterLeaderboardSetGroupLeaderboardSetLinkageRequest, Field(description="Related linkage")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """(Deprecated) game_center_leaderboard_sets_group_leaderboard_set_update_to_one_relationship


        :param id: the id of the requested resource (required)
        :type id: str
        :param game_center_leaderboard_set_group_leaderboard_set_linkage_request: Related linkage (required)
        :type game_center_leaderboard_set_group_leaderboard_set_linkage_request: GameCenterLeaderboardSetGroupLeaderboardSetLinkageRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("PATCH /v1/gameCenterLeaderboardSets/{id}/relationships/groupLeaderboardSet is deprecated.", DeprecationWarning)

        _param = self._game_center_leaderboard_sets_group_leaderboard_set_update_to_one_relationship_serialize(
            id=id,
            game_center_leaderboard_set_group_leaderboard_set_linkage_request=game_center_leaderboard_set_group_leaderboard_set_linkage_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '422': "ErrorResponse",
            '409': "ErrorResponse",
            '204': None,
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _game_center_leaderboard_sets_group_leaderboard_set_update_to_one_relationship_serialize(
        self,
        id,
        game_center_leaderboard_set_group_leaderboard_set_linkage_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if game_center_leaderboard_set_group_leaderboard_set_linkage_request is not None:
            _body_params = game_center_leaderboard_set_group_leaderboard_set_linkage_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'itc-bearer-token'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/v1/gameCenterLeaderboardSets/{id}/relationships/groupLeaderboardSet',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def game_center_leaderboard_sets_localizations_get_to_many_related(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_game_center_leaderboard_set_localizations: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations")] = None,
        fields_game_center_leaderboard_sets: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type gameCenterLeaderboardSets")] = None,
        fields_game_center_leaderboard_set_images: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type gameCenterLeaderboardSetImages")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        include: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of relationships to include")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GameCenterLeaderboardSetLocalizationsResponse:
        """game_center_leaderboard_sets_localizations_get_to_many_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_game_center_leaderboard_set_localizations: the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations
        :type fields_game_center_leaderboard_set_localizations: List[str]
        :param fields_game_center_leaderboard_sets: the fields to include for returned resources of type gameCenterLeaderboardSets
        :type fields_game_center_leaderboard_sets: List[str]
        :param fields_game_center_leaderboard_set_images: the fields to include for returned resources of type gameCenterLeaderboardSetImages
        :type fields_game_center_leaderboard_set_images: List[str]
        :param limit: maximum resources per page
        :type limit: int
        :param include: comma-separated list of relationships to include
        :type include: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._game_center_leaderboard_sets_localizations_get_to_many_related_serialize(
            id=id,
            fields_game_center_leaderboard_set_localizations=fields_game_center_leaderboard_set_localizations,
            fields_game_center_leaderboard_sets=fields_game_center_leaderboard_sets,
            fields_game_center_leaderboard_set_images=fields_game_center_leaderboard_set_images,
            limit=limit,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '200': "GameCenterLeaderboardSetLocalizationsResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def game_center_leaderboard_sets_localizations_get_to_many_related_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_game_center_leaderboard_set_localizations: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations")] = None,
        fields_game_center_leaderboard_sets: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type gameCenterLeaderboardSets")] = None,
        fields_game_center_leaderboard_set_images: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type gameCenterLeaderboardSetImages")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        include: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of relationships to include")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GameCenterLeaderboardSetLocalizationsResponse]:
        """game_center_leaderboard_sets_localizations_get_to_many_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_game_center_leaderboard_set_localizations: the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations
        :type fields_game_center_leaderboard_set_localizations: List[str]
        :param fields_game_center_leaderboard_sets: the fields to include for returned resources of type gameCenterLeaderboardSets
        :type fields_game_center_leaderboard_sets: List[str]
        :param fields_game_center_leaderboard_set_images: the fields to include for returned resources of type gameCenterLeaderboardSetImages
        :type fields_game_center_leaderboard_set_images: List[str]
        :param limit: maximum resources per page
        :type limit: int
        :param include: comma-separated list of relationships to include
        :type include: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._game_center_leaderboard_sets_localizations_get_to_many_related_serialize(
            id=id,
            fields_game_center_leaderboard_set_localizations=fields_game_center_leaderboard_set_localizations,
            fields_game_center_leaderboard_sets=fields_game_center_leaderboard_sets,
            fields_game_center_leaderboard_set_images=fields_game_center_leaderboard_set_images,
            limit=limit,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '200': "GameCenterLeaderboardSetLocalizationsResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def game_center_leaderboard_sets_localizations_get_to_many_related_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_game_center_leaderboard_set_localizations: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations")] = None,
        fields_game_center_leaderboard_sets: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type gameCenterLeaderboardSets")] = None,
        fields_game_center_leaderboard_set_images: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type gameCenterLeaderboardSetImages")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        include: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of relationships to include")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """game_center_leaderboard_sets_localizations_get_to_many_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_game_center_leaderboard_set_localizations: the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations
        :type fields_game_center_leaderboard_set_localizations: List[str]
        :param fields_game_center_leaderboard_sets: the fields to include for returned resources of type gameCenterLeaderboardSets
        :type fields_game_center_leaderboard_sets: List[str]
        :param fields_game_center_leaderboard_set_images: the fields to include for returned resources of type gameCenterLeaderboardSetImages
        :type fields_game_center_leaderboard_set_images: List[str]
        :param limit: maximum resources per page
        :type limit: int
        :param include: comma-separated list of relationships to include
        :type include: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._game_center_leaderboard_sets_localizations_get_to_many_related_serialize(
            id=id,
            fields_game_center_leaderboard_set_localizations=fields_game_center_leaderboard_set_localizations,
            fields_game_center_leaderboard_sets=fields_game_center_leaderboard_sets,
            fields_game_center_leaderboard_set_images=fields_game_center_leaderboard_set_images,
            limit=limit,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '200': "GameCenterLeaderboardSetLocalizationsResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _game_center_leaderboard_sets_localizations_get_to_many_related_serialize(
        self,
        id,
        fields_game_center_leaderboard_set_localizations,
        fields_game_center_leaderboard_sets,
        fields_game_center_leaderboard_set_images,
        limit,
        include,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'fields[gameCenterLeaderboardSetLocalizations]': 'csv',
            'fields[gameCenterLeaderboardSets]': 'csv',
            'fields[gameCenterLeaderboardSetImages]': 'csv',
            'include': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if fields_game_center_leaderboard_set_localizations is not None:
            
            _query_params.append(('fields[gameCenterLeaderboardSetLocalizations]', fields_game_center_leaderboard_set_localizations))
            
        if fields_game_center_leaderboard_sets is not None:
            
            _query_params.append(('fields[gameCenterLeaderboardSets]', fields_game_center_leaderboard_sets))
            
        if fields_game_center_leaderboard_set_images is not None:
            
            _query_params.append(('fields[gameCenterLeaderboardSetImages]', fields_game_center_leaderboard_set_images))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if include is not None:
            
            _query_params.append(('include', include))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'itc-bearer-token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/gameCenterLeaderboardSets/{id}/localizations',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def game_center_leaderboard_sets_localizations_get_to_many_relationship(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GameCenterLeaderboardSetLocalizationsLinkagesResponse:
        """game_center_leaderboard_sets_localizations_get_to_many_relationship


        :param id: the id of the requested resource (required)
        :type id: str
        :param limit: maximum resources per page
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._game_center_leaderboard_sets_localizations_get_to_many_relationship_serialize(
            id=id,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '200': "GameCenterLeaderboardSetLocalizationsLinkagesResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def game_center_leaderboard_sets_localizations_get_to_many_relationship_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GameCenterLeaderboardSetLocalizationsLinkagesResponse]:
        """game_center_leaderboard_sets_localizations_get_to_many_relationship


        :param id: the id of the requested resource (required)
        :type id: str
        :param limit: maximum resources per page
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._game_center_leaderboard_sets_localizations_get_to_many_relationship_serialize(
            id=id,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '200': "GameCenterLeaderboardSetLocalizationsLinkagesResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def game_center_leaderboard_sets_localizations_get_to_many_relationship_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """game_center_leaderboard_sets_localizations_get_to_many_relationship


        :param id: the id of the requested resource (required)
        :type id: str
        :param limit: maximum resources per page
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._game_center_leaderboard_sets_localizations_get_to_many_relationship_serialize(
            id=id,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '200': "GameCenterLeaderboardSetLocalizationsLinkagesResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _game_center_leaderboard_sets_localizations_get_to_many_relationship_serialize(
        self,
        id,
        limit,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'itc-bearer-token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/gameCenterLeaderboardSets/{id}/relationships/localizations',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def game_center_leaderboard_sets_releases_get_to_many_related(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        filter_live: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'live'")] = None,
        filter_game_center_detail: Annotated[Optional[List[StrictStr]], Field(description="filter by id(s) of related 'gameCenterDetail'")] = None,
        fields_game_center_leaderboard_set_releases: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type gameCenterLeaderboardSetReleases")] = None,
        fields_game_center_details: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type gameCenterDetails")] = None,
        fields_game_center_leaderboard_sets: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type gameCenterLeaderboardSets")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        include: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of relationships to include")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GameCenterLeaderboardSetReleasesResponse:
        """game_center_leaderboard_sets_releases_get_to_many_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param filter_live: filter by attribute 'live'
        :type filter_live: List[str]
        :param filter_game_center_detail: filter by id(s) of related 'gameCenterDetail'
        :type filter_game_center_detail: List[str]
        :param fields_game_center_leaderboard_set_releases: the fields to include for returned resources of type gameCenterLeaderboardSetReleases
        :type fields_game_center_leaderboard_set_releases: List[str]
        :param fields_game_center_details: the fields to include for returned resources of type gameCenterDetails
        :type fields_game_center_details: List[str]
        :param fields_game_center_leaderboard_sets: the fields to include for returned resources of type gameCenterLeaderboardSets
        :type fields_game_center_leaderboard_sets: List[str]
        :param limit: maximum resources per page
        :type limit: int
        :param include: comma-separated list of relationships to include
        :type include: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._game_center_leaderboard_sets_releases_get_to_many_related_serialize(
            id=id,
            filter_live=filter_live,
            filter_game_center_detail=filter_game_center_detail,
            fields_game_center_leaderboard_set_releases=fields_game_center_leaderboard_set_releases,
            fields_game_center_details=fields_game_center_details,
            fields_game_center_leaderboard_sets=fields_game_center_leaderboard_sets,
            limit=limit,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '200': "GameCenterLeaderboardSetReleasesResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def game_center_leaderboard_sets_releases_get_to_many_related_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        filter_live: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'live'")] = None,
        filter_game_center_detail: Annotated[Optional[List[StrictStr]], Field(description="filter by id(s) of related 'gameCenterDetail'")] = None,
        fields_game_center_leaderboard_set_releases: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type gameCenterLeaderboardSetReleases")] = None,
        fields_game_center_details: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type gameCenterDetails")] = None,
        fields_game_center_leaderboard_sets: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type gameCenterLeaderboardSets")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        include: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of relationships to include")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GameCenterLeaderboardSetReleasesResponse]:
        """game_center_leaderboard_sets_releases_get_to_many_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param filter_live: filter by attribute 'live'
        :type filter_live: List[str]
        :param filter_game_center_detail: filter by id(s) of related 'gameCenterDetail'
        :type filter_game_center_detail: List[str]
        :param fields_game_center_leaderboard_set_releases: the fields to include for returned resources of type gameCenterLeaderboardSetReleases
        :type fields_game_center_leaderboard_set_releases: List[str]
        :param fields_game_center_details: the fields to include for returned resources of type gameCenterDetails
        :type fields_game_center_details: List[str]
        :param fields_game_center_leaderboard_sets: the fields to include for returned resources of type gameCenterLeaderboardSets
        :type fields_game_center_leaderboard_sets: List[str]
        :param limit: maximum resources per page
        :type limit: int
        :param include: comma-separated list of relationships to include
        :type include: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._game_center_leaderboard_sets_releases_get_to_many_related_serialize(
            id=id,
            filter_live=filter_live,
            filter_game_center_detail=filter_game_center_detail,
            fields_game_center_leaderboard_set_releases=fields_game_center_leaderboard_set_releases,
            fields_game_center_details=fields_game_center_details,
            fields_game_center_leaderboard_sets=fields_game_center_leaderboard_sets,
            limit=limit,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '200': "GameCenterLeaderboardSetReleasesResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def game_center_leaderboard_sets_releases_get_to_many_related_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        filter_live: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'live'")] = None,
        filter_game_center_detail: Annotated[Optional[List[StrictStr]], Field(description="filter by id(s) of related 'gameCenterDetail'")] = None,
        fields_game_center_leaderboard_set_releases: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type gameCenterLeaderboardSetReleases")] = None,
        fields_game_center_details: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type gameCenterDetails")] = None,
        fields_game_center_leaderboard_sets: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type gameCenterLeaderboardSets")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        include: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of relationships to include")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """game_center_leaderboard_sets_releases_get_to_many_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param filter_live: filter by attribute 'live'
        :type filter_live: List[str]
        :param filter_game_center_detail: filter by id(s) of related 'gameCenterDetail'
        :type filter_game_center_detail: List[str]
        :param fields_game_center_leaderboard_set_releases: the fields to include for returned resources of type gameCenterLeaderboardSetReleases
        :type fields_game_center_leaderboard_set_releases: List[str]
        :param fields_game_center_details: the fields to include for returned resources of type gameCenterDetails
        :type fields_game_center_details: List[str]
        :param fields_game_center_leaderboard_sets: the fields to include for returned resources of type gameCenterLeaderboardSets
        :type fields_game_center_leaderboard_sets: List[str]
        :param limit: maximum resources per page
        :type limit: int
        :param include: comma-separated list of relationships to include
        :type include: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._game_center_leaderboard_sets_releases_get_to_many_related_serialize(
            id=id,
            filter_live=filter_live,
            filter_game_center_detail=filter_game_center_detail,
            fields_game_center_leaderboard_set_releases=fields_game_center_leaderboard_set_releases,
            fields_game_center_details=fields_game_center_details,
            fields_game_center_leaderboard_sets=fields_game_center_leaderboard_sets,
            limit=limit,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '200': "GameCenterLeaderboardSetReleasesResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _game_center_leaderboard_sets_releases_get_to_many_related_serialize(
        self,
        id,
        filter_live,
        filter_game_center_detail,
        fields_game_center_leaderboard_set_releases,
        fields_game_center_details,
        fields_game_center_leaderboard_sets,
        limit,
        include,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'filter[live]': 'csv',
            'filter[gameCenterDetail]': 'csv',
            'fields[gameCenterLeaderboardSetReleases]': 'csv',
            'fields[gameCenterDetails]': 'csv',
            'fields[gameCenterLeaderboardSets]': 'csv',
            'include': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if filter_live is not None:
            
            _query_params.append(('filter[live]', filter_live))
            
        if filter_game_center_detail is not None:
            
            _query_params.append(('filter[gameCenterDetail]', filter_game_center_detail))
            
        if fields_game_center_leaderboard_set_releases is not None:
            
            _query_params.append(('fields[gameCenterLeaderboardSetReleases]', fields_game_center_leaderboard_set_releases))
            
        if fields_game_center_details is not None:
            
            _query_params.append(('fields[gameCenterDetails]', fields_game_center_details))
            
        if fields_game_center_leaderboard_sets is not None:
            
            _query_params.append(('fields[gameCenterLeaderboardSets]', fields_game_center_leaderboard_sets))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if include is not None:
            
            _query_params.append(('include', include))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'itc-bearer-token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/gameCenterLeaderboardSets/{id}/releases',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def game_center_leaderboard_sets_releases_get_to_many_relationship(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GameCenterLeaderboardSetReleasesLinkagesResponse:
        """game_center_leaderboard_sets_releases_get_to_many_relationship


        :param id: the id of the requested resource (required)
        :type id: str
        :param limit: maximum resources per page
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._game_center_leaderboard_sets_releases_get_to_many_relationship_serialize(
            id=id,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '200': "GameCenterLeaderboardSetReleasesLinkagesResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def game_center_leaderboard_sets_releases_get_to_many_relationship_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GameCenterLeaderboardSetReleasesLinkagesResponse]:
        """game_center_leaderboard_sets_releases_get_to_many_relationship


        :param id: the id of the requested resource (required)
        :type id: str
        :param limit: maximum resources per page
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._game_center_leaderboard_sets_releases_get_to_many_relationship_serialize(
            id=id,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '200': "GameCenterLeaderboardSetReleasesLinkagesResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def game_center_leaderboard_sets_releases_get_to_many_relationship_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """game_center_leaderboard_sets_releases_get_to_many_relationship


        :param id: the id of the requested resource (required)
        :type id: str
        :param limit: maximum resources per page
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._game_center_leaderboard_sets_releases_get_to_many_relationship_serialize(
            id=id,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '200': "GameCenterLeaderboardSetReleasesLinkagesResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _game_center_leaderboard_sets_releases_get_to_many_relationship_serialize(
        self,
        id,
        limit,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'itc-bearer-token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/gameCenterLeaderboardSets/{id}/relationships/releases',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def game_center_leaderboard_sets_update_instance(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        game_center_leaderboard_set_update_request: Annotated[GameCenterLeaderboardSetUpdateRequest, Field(description="GameCenterLeaderboardSet representation")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GameCenterLeaderboardSetResponse:
        """game_center_leaderboard_sets_update_instance


        :param id: the id of the requested resource (required)
        :type id: str
        :param game_center_leaderboard_set_update_request: GameCenterLeaderboardSet representation (required)
        :type game_center_leaderboard_set_update_request: GameCenterLeaderboardSetUpdateRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._game_center_leaderboard_sets_update_instance_serialize(
            id=id,
            game_center_leaderboard_set_update_request=game_center_leaderboard_set_update_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '422': "ErrorResponse",
            '200': "GameCenterLeaderboardSetResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def game_center_leaderboard_sets_update_instance_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        game_center_leaderboard_set_update_request: Annotated[GameCenterLeaderboardSetUpdateRequest, Field(description="GameCenterLeaderboardSet representation")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GameCenterLeaderboardSetResponse]:
        """game_center_leaderboard_sets_update_instance


        :param id: the id of the requested resource (required)
        :type id: str
        :param game_center_leaderboard_set_update_request: GameCenterLeaderboardSet representation (required)
        :type game_center_leaderboard_set_update_request: GameCenterLeaderboardSetUpdateRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._game_center_leaderboard_sets_update_instance_serialize(
            id=id,
            game_center_leaderboard_set_update_request=game_center_leaderboard_set_update_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '422': "ErrorResponse",
            '200': "GameCenterLeaderboardSetResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def game_center_leaderboard_sets_update_instance_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        game_center_leaderboard_set_update_request: Annotated[GameCenterLeaderboardSetUpdateRequest, Field(description="GameCenterLeaderboardSet representation")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """game_center_leaderboard_sets_update_instance


        :param id: the id of the requested resource (required)
        :type id: str
        :param game_center_leaderboard_set_update_request: GameCenterLeaderboardSet representation (required)
        :type game_center_leaderboard_set_update_request: GameCenterLeaderboardSetUpdateRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._game_center_leaderboard_sets_update_instance_serialize(
            id=id,
            game_center_leaderboard_set_update_request=game_center_leaderboard_set_update_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '422': "ErrorResponse",
            '200': "GameCenterLeaderboardSetResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _game_center_leaderboard_sets_update_instance_serialize(
        self,
        id,
        game_center_leaderboard_set_update_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if game_center_leaderboard_set_update_request is not None:
            _body_params = game_center_leaderboard_set_update_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'itc-bearer-token'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/v1/gameCenterLeaderboardSets/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


